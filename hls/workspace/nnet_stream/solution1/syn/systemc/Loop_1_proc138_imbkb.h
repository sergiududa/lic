// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __Loop_1_proc138_imbkb_H__
#define __Loop_1_proc138_imbkb_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct Loop_1_proc138_imbkb_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 12;
  static const unsigned AddressRange = 1024;
  static const unsigned AddressWidth = 10;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(Loop_1_proc138_imbkb_ram) {
        for (unsigned i = 0; i < 301 ; i = i + 1) {
            ram[i] = "0b000000000000";
        }
        ram[301] = "0b011000010110";
        ram[302] = "0b011000000110";
        ram[303] = "0b010011010100";
        ram[304] = "0b011101100111";
        ram[305] = "0b001111010011";
        for (unsigned i = 306; i < 325 ; i = i + 1) {
            ram[i] = "0b000000000000";
        }
        ram[325] = "0b010110100101";
        ram[326] = "0b100010101000";
        for (unsigned i = 327; i < 333 ; i = i + 1) {
            ram[i] = "0b111010111110";
        }
        ram[333] = "0b111110111111";
        ram[334] = "0b111110111111";
        ram[335] = "0b111110001111";
        ram[336] = "0b111111101111";
        ram[337] = "0b111101011111";
        ram[338] = "0b111010111110";
        ram[339] = "0b101111101011";
        ram[340] = "0b000101010001";
        for (unsigned i = 341; i < 356 ; i = i + 1) {
            ram[i] = "0b000000000000";
        }
        ram[356] = "0b100011001000";
        ram[357] = "0b111110111111";
        for (unsigned i = 358; i < 372 ; i = i + 1) {
            ram[i] = "0b111111101111";
        }
        ram[372] = "0b101111011011";
        ram[373] = "0b000101110001";
        for (unsigned i = 374; i < 388 ; i = i + 1) {
            ram[i] = "0b000000000000";
        }
        ram[388] = "0b111000101110";
        ram[389] = "0b111111101111";
        ram[390] = "0b110100001101";
        ram[391] = "0b110001111100";
        ram[392] = "0b110001111100";
        ram[393] = "0b110001111100";
        ram[394] = "0b110001111100";
        ram[395] = "0b100010111000";
        for (unsigned i = 396; i < 401 ; i = i + 1) {
            ram[i] = "0b001111010011";
        }
        ram[401] = "0b100000001000";
        ram[402] = "0b110111101101";
        ram[403] = "0b111111101111";
        ram[404] = "0b111111101111";
        ram[405] = "0b101111011011";
        ram[406] = "0b000101010001";
        for (unsigned i = 407; i < 420 ; i = i + 1) {
            ram[i] = "0b000000000000";
        }
        ram[420] = "0b001001100010";
        ram[421] = "0b010100100101";
        ram[422] = "0b000011010000";
        for (unsigned i = 423; i < 434 ; i = i + 1) {
            ram[i] = "0b000000000000";
        }
        ram[434] = "0b001000100010";
        ram[435] = "0b110101011101";
        ram[436] = "0b111111101111";
        ram[437] = "0b111111101111";
        ram[438] = "0b011100110111";
        for (unsigned i = 439; i < 467 ; i = i + 1) {
            ram[i] = "0b000000000000";
        }
        ram[467] = "0b010101000101";
        ram[468] = "0b111111101111";
        ram[469] = "0b111111101111";
        ram[470] = "0b111010101110";
        for (unsigned i = 471; i < 499 ; i = i + 1) {
            ram[i] = "0b000000000000";
        }
        ram[499] = "0b010101000101";
        ram[500] = "0b111111101111";
        ram[501] = "0b111111101111";
        ram[502] = "0b111010101110";
        for (unsigned i = 503; i < 530 ; i = i + 1) {
            ram[i] = "0b000000000000";
        }
        ram[530] = "0b011010100110";
        ram[531] = "0b100111011001";
        ram[532] = "0b111111101111";
        ram[533] = "0b111111101111";
        ram[534] = "0b111100111111";
        ram[535] = "0b001100110011";
        for (unsigned i = 536; i < 557 ; i = i + 1) {
            ram[i] = "0b000000000000";
        }
        ram[557] = "0b000110010001";
        ram[558] = "0b011101010111";
        ram[559] = "0b111001001110";
        ram[560] = "0b111001001110";
        ram[561] = "0b111001001110";
        ram[562] = "0b111111011111";
        ram[563] = "0b111111101111";
        ram[564] = "0b111111101111";
        ram[565] = "0b111111101111";
        ram[566] = "0b111111101111";
        ram[567] = "0b111100001111";
        for (unsigned i = 568; i < 587 ; i = i + 1) {
            ram[i] = "0b000000000000";
        }
        ram[587] = "0b010001000100";
        ram[588] = "0b011101110111";
        ram[589] = "0b110111001101";
        for (unsigned i = 590; i < 599 ; i = i + 1) {
            ram[i] = "0b111111101111";
        }
        ram[599] = "0b100011101000";
        for (unsigned i = 600; i < 617 ; i = i + 1) {
            ram[i] = "0b000000000000";
        }
        ram[617] = "0b001001010010";
        ram[618] = "0b101110111011";
        ram[619] = "0b111111011111";
        ram[620] = "0b111111101111";
        ram[621] = "0b111111101111";
        ram[622] = "0b111111101111";
        ram[623] = "0b110111111101";
        ram[624] = "0b110011101100";
        ram[625] = "0b110011101100";
        ram[626] = "0b010010110100";
        ram[627] = "0b010001000100";
        ram[628] = "0b110101111101";
        ram[629] = "0b111111101111";
        ram[630] = "0b111111101111";
        ram[631] = "0b011101010111";
        for (unsigned i = 632; i < 648 ; i = i + 1) {
            ram[i] = "0b000000000000";
        }
        ram[648] = "0b011100010111";
        ram[649] = "0b110110111101";
        ram[650] = "0b111111101111";
        ram[651] = "0b111100101111";
        ram[652] = "0b111000111110";
        ram[653] = "0b011100110111";
        ram[654] = "0b010110010101";
        ram[655] = "0b000111110001";
        ram[656] = "0b000000000000";
        ram[657] = "0b000000000000";
        ram[658] = "0b000000000000";
        ram[659] = "0b000000000000";
        ram[660] = "0b110010001100";
        ram[661] = "0b111111101111";
        ram[662] = "0b111100011111";
        ram[663] = "0b001010010010";
        for (unsigned i = 664; i < 680 ; i = i + 1) {
            ram[i] = "0b000000000000";
        }
        ram[680] = "0b101010011010";
        ram[681] = "0b111111101111";
        ram[682] = "0b101100001011";
        ram[683] = "0b001111100011";
        for (unsigned i = 684; i < 691 ; i = i + 1) {
            ram[i] = "0b000000000000";
        }
        ram[691] = "0b001100000011";
        ram[692] = "0b111001111110";
        ram[693] = "0b111111101111";
        ram[694] = "0b111010101110";
        for (unsigned i = 695; i < 712 ; i = i + 1) {
            ram[i] = "0b000000000000";
        }
        ram[712] = "0b000100100001";
        ram[713] = "0b011111000111";
        for (unsigned i = 714; i < 723 ; i = i + 1) {
            ram[i] = "0b000000000000";
        }
        ram[723] = "0b010101000101";
        ram[724] = "0b111111101111";
        ram[725] = "0b111111101111";
        ram[726] = "0b101001101010";
        for (unsigned i = 727; i < 755 ; i = i + 1) {
            ram[i] = "0b000000000000";
        }
        ram[755] = "0b100010111000";
        ram[756] = "0b111111101111";
        ram[757] = "0b111011101110";
        ram[758] = "0b001110010011";
        for (unsigned i = 759; i < 786 ; i = i + 1) {
            ram[i] = "0b000000000000";
        }
        ram[786] = "0b110100101101";
        ram[787] = "0b111110101111";
        ram[788] = "0b111111101111";
        ram[789] = "0b101010001010";
        for (unsigned i = 790; i < 818 ; i = i + 1) {
            ram[i] = "0b000000000000";
        }
        ram[818] = "0b111100101111";
        ram[819] = "0b111111101111";
        ram[820] = "0b111011111110";
        ram[821] = "0b001110010011";
        for (unsigned i = 822; i < 849 ; i = i + 1) {
            ram[i] = "0b000000000000";
        }
        ram[849] = "0b010110010101";
        ram[850] = "0b111110111111";
        ram[851] = "0b111100011111";
        ram[852] = "0b010101100101";
        for (unsigned i = 853; i < 880 ; i = i + 1) {
            ram[i] = "0b000000000000";
        }
        ram[880] = "0b000001010000";
        ram[881] = "0b110011101100";
        ram[882] = "0b111101101111";
        ram[883] = "0b100111011001";
        for (unsigned i = 884; i < 912 ; i = i + 1) {
            ram[i] = "0b000000000000";
        }
        ram[912] = "0b000001000000";
        ram[913] = "0b011101010111";
        ram[914] = "0b010001010100";
        for (unsigned i = 915; i < 1024 ; i = i + 1) {
            ram[i] = "0b000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(Loop_1_proc138_imbkb) {


static const unsigned DataWidth = 12;
static const unsigned AddressRange = 1024;
static const unsigned AddressWidth = 10;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


Loop_1_proc138_imbkb_ram* meminst;


SC_CTOR(Loop_1_proc138_imbkb) {
meminst = new Loop_1_proc138_imbkb_ram("Loop_1_proc138_imbkb_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~Loop_1_proc138_imbkb() {
    delete meminst;
}


};//endmodule
#endif
