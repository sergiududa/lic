// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __fc_layer3_fc_layeicb_H__
#define __fc_layer3_fc_layeicb_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct fc_layer3_fc_layeicb_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 11;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(fc_layer3_fc_layeicb_ram) {
        ram[0] = "0b00101011111";
        ram[1] = "0b11100011001";
        ram[2] = "0b11010000100";
        ram[3] = "0b01101101100";
        ram[4] = "0b00100011011";
        ram[5] = "0b10000101111";
        ram[6] = "0b01111100101";
        ram[7] = "0b11011100101";
        ram[8] = "0b11001110110";
        ram[9] = "0b11101110111";
        ram[10] = "0b00101101000";
        ram[11] = "0b01100101100";
        ram[12] = "0b00010111111";
        ram[13] = "0b01011010010";
        ram[14] = "0b10010000000";
        ram[15] = "0b10010011110";
        ram[16] = "0b01101101110";
        ram[17] = "0b10111011001";
        ram[18] = "0b00010110111";
        ram[19] = "0b01101101100";
        ram[20] = "0b11000101111";
        ram[21] = "0b00110010101";
        ram[22] = "0b11000101000";
        ram[23] = "0b01100101000";
        ram[24] = "0b11111001001";
        ram[25] = "0b00111010000";
        ram[26] = "0b01010110000";
        ram[27] = "0b00010010000";
        ram[28] = "0b10100000000";
        ram[29] = "0b00010100000";
        ram[30] = "0b00010101010";
        ram[31] = "0b10010011001";
        ram[32] = "0b01011100110";
        ram[33] = "0b01110010111";
        ram[34] = "0b10101001100";
        ram[35] = "0b10010110000";
        ram[36] = "0b00000101101";
        ram[37] = "0b11111011001";
        ram[38] = "0b00110110100";
        ram[39] = "0b01001111001";
        ram[40] = "0b11110001001";
        ram[41] = "0b00000110111";
        ram[42] = "0b01111110001";
        ram[43] = "0b00111111100";
        ram[44] = "0b11010111110";
        ram[45] = "0b01001001001";
        ram[46] = "0b10100000001";
        ram[47] = "0b01001000111";
        ram[48] = "0b10001111000";
        ram[49] = "0b00110100000";
        ram[50] = "0b01110111011";
        ram[51] = "0b00000101100";
        ram[52] = "0b11101100110";
        ram[53] = "0b01011001001";
        ram[54] = "0b00001101100";
        ram[55] = "0b00100111111";
        ram[56] = "0b11011001110";
        ram[57] = "0b11100010111";
        ram[58] = "0b10111011111";
        ram[59] = "0b00011101100";
        ram[60] = "0b11000110011";
        ram[61] = "0b11000111010";
        ram[62] = "0b01110100010";
        ram[63] = "0b10010011110";
        ram[64] = "0b10111101001";
        ram[65] = "0b01100100011";
        ram[66] = "0b10110111010";
        ram[67] = "0b11101100101";
        ram[68] = "0b00111010001";
        ram[69] = "0b11111101010";
        ram[70] = "0b10100010011";
        ram[71] = "0b00101110011";
        ram[72] = "0b11000101000";
        ram[73] = "0b00101111000";
        ram[74] = "0b00100111110";
        ram[75] = "0b01100001000";
        ram[76] = "0b01110010001";
        ram[77] = "0b01101010100";
        ram[78] = "0b00000111100";
        ram[79] = "0b01110011000";
        ram[80] = "0b10000101000";
        ram[81] = "0b00001111111";
        ram[82] = "0b01111101111";
        ram[83] = "0b10111100001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(fc_layer3_fc_layeicb) {


static const unsigned DataWidth = 11;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


fc_layer3_fc_layeicb_ram* meminst;


SC_CTOR(fc_layer3_fc_layeicb) {
meminst = new fc_layer3_fc_layeicb_ram("fc_layer3_fc_layeicb_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~fc_layer3_fc_layeicb() {
    delete meminst;
}


};//endmodule
#endif
