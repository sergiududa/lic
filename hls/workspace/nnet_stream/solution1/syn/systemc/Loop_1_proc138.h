// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Loop_1_proc138_HH_
#define _Loop_1_proc138_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Loop_1_proc138_imbkb.h"

namespace ap_rtl {

struct Loop_1_proc138 : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<16> > image_in_V_V_din;
    sc_in< sc_logic > image_in_V_V_full_n;
    sc_out< sc_logic > image_in_V_V_write;


    // Module declarations
    Loop_1_proc138(sc_module_name name);
    SC_HAS_PROCESS(Loop_1_proc138);

    ~Loop_1_proc138();

    sc_trace_file* mVcdFile;

    Loop_1_proc138_imbkb* image_V_U;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<10> > image_V_address0;
    sc_signal< sc_logic > image_V_ce0;
    sc_signal< sc_lv<12> > image_V_q0;
    sc_signal< sc_logic > image_in_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<11> > i_fu_76_p2;
    sc_signal< sc_lv<11> > i_reg_95;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > exitcond_i_i_fu_70_p2;
    sc_signal< sc_lv<11> > i_0_i_i_reg_59;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<64> > tmp_i_fu_82_p1;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<11> ap_const_lv11_400;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond_i_i_fu_70_p2();
    void thread_i_fu_76_p2();
    void thread_image_V_address0();
    void thread_image_V_ce0();
    void thread_image_in_V_V_blk_n();
    void thread_image_in_V_V_din();
    void thread_image_in_V_V_write();
    void thread_tmp_i_fu_82_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
