-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fc_layer1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC );
end;


architecture behav of fc_layer1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv10_240 : STD_LOGIC_VECTOR (9 downto 0) := "1001000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fc_layer1_weights_V_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal fc_layer1_weights_V_ce0 : STD_LOGIC;
    signal fc_layer1_weights_V_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal fc_layer1_weights_V_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal fc_layer1_weights_V_ce1 : STD_LOGIC;
    signal fc_layer1_weights_V_q1 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond3_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_254_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_3_reg_559 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_21_fu_284_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_21_reg_564 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_17_cast_fu_290_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_17_cast_reg_572 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond2_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_addr_10_reg_588 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_V_addr_11_reg_599 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_19_reg_605 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_51_1_reg_610 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_V_addr_12_reg_620 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_V_addr_13_reg_630 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_8_3_fu_436_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_8_3_reg_635 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_51_2_reg_640 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_51_3_reg_645 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_fu_490_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_653 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_V_ce0 : STD_LOGIC;
    signal output_V_we0 : STD_LOGIC;
    signal output_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_V_ce1 : STD_LOGIC;
    signal output_V_we1 : STD_LOGIC;
    signal output_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_V_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_reg_214 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i5_reg_225 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i1_reg_237 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_25_cast_fu_314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_cast_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_1_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_cast_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_2_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_cast_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_3_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_260_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_20_fu_272_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl_cast_fu_268_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl1_cast_fu_280_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_14_cast_fu_305_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_22_fu_309_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal i_8_s_fu_319_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_46_1_cast_fu_330_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_23_fu_334_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_524_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_532_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal i_8_1_fu_386_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_46_2_cast_fu_397_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_24_fu_401_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal i_8_2_fu_411_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_46_3_cast_fu_422_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_25_fu_426_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_540_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_548_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_i_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_501_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_V_fu_511_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_524_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_524_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_532_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_532_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_540_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_540_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_548_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_548_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component nnet_mac_muladd_1bZs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component fc_layer1_fc_layeh6b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        address1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component fc_layer1_output_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    fc_layer1_weights_V_U : component fc_layer1_fc_layeh6b
    generic map (
        DataWidth => 10,
        AddressRange => 69120,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer1_weights_V_address0,
        ce0 => fc_layer1_weights_V_ce0,
        q0 => fc_layer1_weights_V_q0,
        address1 => fc_layer1_weights_V_address1,
        ce1 => fc_layer1_weights_V_ce1,
        q1 => fc_layer1_weights_V_q1);

    output_V_U : component fc_layer1_output_V
    generic map (
        DataWidth => 16,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_V_address0,
        ce0 => output_V_ce0,
        we0 => output_V_we0,
        d0 => output_V_d0,
        q0 => output_V_q0,
        address1 => output_V_address1,
        ce1 => output_V_ce1,
        we1 => output_V_we1,
        d1 => output_V_d1,
        q1 => output_V_q1);

    nnet_mac_muladd_1bZs_U212 : component nnet_mac_muladd_1bZs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        din0 => grp_fu_524_p0,
        din1 => fc_layer1_weights_V_q0,
        din2 => grp_fu_524_p2,
        dout => grp_fu_524_p3);

    nnet_mac_muladd_1bZs_U213 : component nnet_mac_muladd_1bZs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        din0 => grp_fu_532_p0,
        din1 => fc_layer1_weights_V_q1,
        din2 => grp_fu_532_p2,
        dout => grp_fu_532_p3);

    nnet_mac_muladd_1bZs_U214 : component nnet_mac_muladd_1bZs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        din0 => grp_fu_540_p0,
        din1 => fc_layer1_weights_V_q0,
        din2 => grp_fu_540_p2,
        dout => grp_fu_540_p3);

    nnet_mac_muladd_1bZs_U215 : component nnet_mac_muladd_1bZs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        din0 => grp_fu_548_p0,
        din1 => fc_layer1_weights_V_q1,
        din2 => grp_fu_548_p2,
        dout => grp_fu_548_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_fu_484_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond3_fu_248_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond3_fu_248_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_reg_237 <= ap_const_lv7_0;
            elsif (((out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i1_reg_237 <= i_reg_653;
            end if; 
        end if;
    end process;

    i5_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i5_reg_225 <= i_8_3_reg_635;
            elsif ((not(((exitcond3_fu_248_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond3_fu_248_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i5_reg_225 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_reg_214 <= ap_const_lv10_0;
            elsif (((exitcond2_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_214 <= j_3_reg_559;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_8_3_reg_635 <= i_8_3_fu_436_p2;
                    output_V_addr_12_reg_620(0) <= tmp_46_2_fu_392_p1(7 - 1 downto 0)(0);    output_V_addr_12_reg_620(6 downto 2) <= tmp_46_2_fu_392_p1(7 - 1 downto 0)(6 downto 2);
                    output_V_addr_13_reg_630(6 downto 2) <= tmp_46_3_fu_417_p1(7 - 1 downto 0)(6 downto 2);
                tmp_19_reg_605 <= grp_fu_524_p3(27 downto 12);
                tmp_51_1_reg_610 <= grp_fu_532_p3(27 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_reg_653 <= i_fu_490_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond3_fu_248_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                j_3_reg_559 <= j_3_fu_254_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                output_V_addr_10_reg_588 <= tmp_14_fu_300_p1(7 - 1 downto 0);
                    output_V_addr_11_reg_599(6 downto 1) <= tmp_46_1_fu_325_p1(7 - 1 downto 0)(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond3_fu_248_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond3_fu_248_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_17_cast_reg_572 <= tmp_17_cast_fu_290_p1;
                    tmp_21_reg_564(17 downto 3) <= tmp_21_fu_284_p2(17 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_51_2_reg_640 <= grp_fu_540_p3(27 downto 12);
                tmp_51_3_reg_645 <= grp_fu_548_p3(27 downto 12);
            end if;
        end if;
    end process;
    tmp_21_reg_564(2 downto 0) <= "000";
    output_V_addr_11_reg_599(0) <= '1';
    output_V_addr_12_reg_620(1) <= '1';
    output_V_addr_13_reg_630(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, out_V_V_full_n, in_V_V_empty_n, ap_CS_fsm_state8, ap_CS_fsm_state2, exitcond3_fu_248_p2, ap_CS_fsm_state3, exitcond2_fu_294_p2, ap_CS_fsm_state7, exitcond_fu_484_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((exitcond3_fu_248_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond3_fu_248_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif ((not(((exitcond3_fu_248_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond3_fu_248_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond2_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_fu_484_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(in_V_V_empty_n, exitcond3_fu_248_p2)
    begin
                ap_block_state2 <= ((exitcond3_fu_248_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7, exitcond_fu_484_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_fu_484_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, exitcond_fu_484_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_fu_484_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_294_p2 <= "1" when (i5_reg_225 = ap_const_lv7_78) else "0";
    exitcond3_fu_248_p2 <= "1" when (j_reg_214 = ap_const_lv10_240) else "0";
    exitcond_fu_484_p2 <= "1" when (i1_reg_237 = ap_const_lv7_78) else "0";

    fc_layer1_weights_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_25_cast_fu_314_p1, tmp_27_cast_fu_406_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fc_layer1_weights_V_address0 <= tmp_27_cast_fu_406_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_layer1_weights_V_address0 <= tmp_25_cast_fu_314_p1(17 - 1 downto 0);
        else 
            fc_layer1_weights_V_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fc_layer1_weights_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_26_cast_fu_339_p1, tmp_28_cast_fu_431_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fc_layer1_weights_V_address1 <= tmp_28_cast_fu_431_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_layer1_weights_V_address1 <= tmp_26_cast_fu_339_p1(17 - 1 downto 0);
        else 
            fc_layer1_weights_V_address1 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fc_layer1_weights_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            fc_layer1_weights_V_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer1_weights_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            fc_layer1_weights_V_ce1 <= ap_const_logic_1;
        else 
            fc_layer1_weights_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_524_p0 <= tmp_17_cast_reg_572(16 - 1 downto 0);
    grp_fu_524_p2 <= (output_V_q0 & ap_const_lv12_0);
    grp_fu_532_p0 <= tmp_17_cast_reg_572(16 - 1 downto 0);
    grp_fu_532_p2 <= (output_V_q1 & ap_const_lv12_0);
    grp_fu_540_p0 <= tmp_17_cast_reg_572(16 - 1 downto 0);
    grp_fu_540_p2 <= (output_V_q1 & ap_const_lv12_0);
    grp_fu_548_p0 <= tmp_17_cast_reg_572(16 - 1 downto 0);
    grp_fu_548_p2 <= (output_V_q0 & ap_const_lv12_0);
    i_8_1_fu_386_p2 <= (i5_reg_225 or ap_const_lv7_2);
    i_8_2_fu_411_p2 <= (i5_reg_225 or ap_const_lv7_3);
    i_8_3_fu_436_p2 <= std_logic_vector(unsigned(i5_reg_225) + unsigned(ap_const_lv7_4));
    i_8_s_fu_319_p2 <= (i5_reg_225 or ap_const_lv7_1);
    i_fu_490_p2 <= std_logic_vector(unsigned(i1_reg_237) + unsigned(ap_const_lv7_1));

    in_V_V_blk_n_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_state2, exitcond3_fu_248_p2)
    begin
        if (((exitcond3_fu_248_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_state2, exitcond3_fu_248_p2)
    begin
        if ((not(((exitcond3_fu_248_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond3_fu_248_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    j_3_fu_254_p2 <= std_logic_vector(unsigned(j_reg_214) + unsigned(ap_const_lv10_1));

    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_511_p3),16));

    out_V_V_write_assign_proc : process(out_V_V_full_n, ap_CS_fsm_state8)
    begin
        if (((out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    output_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, output_V_addr_11_reg_599, ap_CS_fsm_state4, output_V_addr_13_reg_630, ap_CS_fsm_state5, ap_CS_fsm_state6, tmp_14_fu_300_p1, tmp_46_3_fu_417_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_V_address0 <= output_V_addr_13_reg_630;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_V_address0 <= output_V_addr_11_reg_599;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_V_address0 <= tmp_46_3_fu_417_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_V_address0 <= tmp_14_fu_300_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            output_V_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            output_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    output_V_address1_assign_proc : process(ap_CS_fsm_state3, output_V_addr_10_reg_588, ap_CS_fsm_state4, output_V_addr_12_reg_620, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state6, tmp_46_1_fu_325_p1, tmp_46_2_fu_392_p1, tmp_s_fu_496_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_address1 <= tmp_s_fu_496_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_V_address1 <= output_V_addr_12_reg_620;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_V_address1 <= output_V_addr_10_reg_588;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_V_address1 <= tmp_46_2_fu_392_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_V_address1 <= tmp_46_1_fu_325_p1(7 - 1 downto 0);
        else 
            output_V_address1 <= "XXXXXXX";
        end if; 
    end process;


    output_V_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_V_ce1 <= ap_const_logic_1;
        else 
            output_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_d0_assign_proc : process(ap_CS_fsm_state1, tmp_51_1_reg_610, ap_CS_fsm_state5, tmp_51_3_reg_645, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_V_d0 <= tmp_51_3_reg_645;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_V_d0 <= tmp_51_1_reg_610;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            output_V_d0 <= ap_const_lv16_0;
        else 
            output_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_V_d1_assign_proc : process(tmp_19_reg_605, tmp_51_2_reg_640, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_V_d1 <= tmp_51_2_reg_640;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_V_d1 <= tmp_19_reg_605;
        else 
            output_V_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_V_we0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_V_we1 <= ap_const_logic_1;
        else 
            output_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_272_p3),18));
    p_shl_cast_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_260_p3),18));
    tmp_14_cast_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i5_reg_225),18));
    tmp_14_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i5_reg_225),64));
        tmp_17_cast_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in_V_V_dout),27));

    tmp_18_fu_501_p1 <= output_V_q1(15 - 1 downto 0);
    tmp_20_fu_272_p3 <= (j_reg_214 & ap_const_lv3_0);
    tmp_21_fu_284_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_268_p1) - unsigned(p_shl1_cast_fu_280_p1));
    tmp_22_fu_309_p2 <= std_logic_vector(unsigned(tmp_14_cast_fu_305_p1) + unsigned(tmp_21_reg_564));
    tmp_23_fu_334_p2 <= std_logic_vector(unsigned(tmp_46_1_cast_fu_330_p1) + unsigned(tmp_21_reg_564));
    tmp_24_fu_401_p2 <= std_logic_vector(unsigned(tmp_46_2_cast_fu_397_p1) + unsigned(tmp_21_reg_564));
        tmp_25_cast_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_22_fu_309_p2),64));

    tmp_25_fu_426_p2 <= std_logic_vector(unsigned(tmp_46_3_cast_fu_422_p1) + unsigned(tmp_21_reg_564));
        tmp_26_cast_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_23_fu_334_p2),64));

        tmp_27_cast_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_24_fu_401_p2),64));

        tmp_28_cast_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_25_fu_426_p2),64));

    tmp_46_1_cast_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_8_s_fu_319_p2),18));
    tmp_46_1_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_8_s_fu_319_p2),64));
    tmp_46_2_cast_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_8_1_fu_386_p2),18));
    tmp_46_2_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_8_1_fu_386_p2),64));
    tmp_46_3_cast_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_8_2_fu_411_p2),18));
    tmp_46_3_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_8_2_fu_411_p2),64));
    tmp_V_fu_511_p3 <= 
        tmp_18_fu_501_p1 when (tmp_i_fu_505_p2(0) = '1') else 
        ap_const_lv15_0;
    tmp_fu_260_p3 <= (j_reg_214 & ap_const_lv7_0);
    tmp_i_fu_505_p2 <= "1" when (signed(output_V_q1) > signed(ap_const_lv16_0)) else "0";
    tmp_s_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_237),64));
end behav;
