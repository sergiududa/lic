-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity fc_layer3_fc_layeidb_rom is 
    generic(
             dwidth     : integer := 12; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of fc_layer3_fc_layeidb_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "110101000110", 1 => "001110101000", 2 => "110100010100", 
    3 => "110001100111", 4 => "110101000110", 5 => "110001011100", 
    6 => "000001000011", 7 => "111000010011", 8 => "001111110101", 
    9 => "111011011011", 10 => "001010001101", 11 => "001110111010", 
    12 => "110111001010", 13 => "111000010110", 14 => "110101010110", 
    15 => "000110100001", 16 => "000011001100", 17 => "110100010000", 
    18 => "001111011010", 19 => "111100110011", 20 => "000111001110", 
    21 => "110001101110", 22 => "000011101111", 23 => "000001010101", 
    24 => "111110000111", 25 => "000111110000", 26 => "001011000001", 
    27 => "111010010000", 28 => "001101100001", 29 => "001011010001", 
    30 => "111001010011", 31 => "110101001001", 32 => "001000000111", 
    33 => "000101100010", 34 => "000110001100", 35 => "111010011010", 
    36 => "110010101110", 37 => "001100101001", 38 => "001011101001", 
    39 => "111010100010", 40 => "001011000111", 41 => "110000001101", 
    42 => "001101011000", 43 => "111010100000", 44 => "001111011001", 
    45 => "001000100001", 46 => "111110100101", 47 => "110011011011", 
    48 => "000011001100", 49 => "000100010001", 50 => "001010011110", 
    51 => "001010010010", 52 => "111011001001", 53 => "001011111001", 
    54 => "000101100101", 55 => "001111001000", 56 => "000011110110", 
    57 => "000010110110", 58 => "001010011101", 59 => "110010100011", 
    60 => "001110011011", 61 => "001011000010", 62 => "000100001111", 
    63 => "110101100101", 64 => "000101011100", 65 => "111100111111", 
    66 => "111111111010", 67 => "001111100100", 68 => "001010101111", 
    69 => "010000000001", 70 => "001101011001", 71 => "000010010100", 
    72 => "001000001100", 73 => "110000010001", 74 => "110111010001", 
    75 => "001011101101", 76 => "111010101111", 77 => "001100111011", 
    78 => "111100101001", 79 => "110010110111", 80 => "110101010001", 
    81 => "111000111000", 82 => "110101110100", 83 => "001000100100" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity fc_layer3_fc_layeidb is
    generic (
        DataWidth : INTEGER := 12;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of fc_layer3_fc_layeidb is
    component fc_layer3_fc_layeidb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    fc_layer3_fc_layeidb_rom_U :  component fc_layer3_fc_layeidb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


