-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Loop_1_proc137_imbkb_rom is 
    generic(
             dwidth     : integer := 12; 
             awidth     : integer := 10; 
             mem_size    : integer := 1024
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of Loop_1_proc137_imbkb_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 to 300=> "000000000000", 301 => "011000010110", 302 => "011000000110", 
    303 => "010011010100", 304 => "011101100111", 305 => "001111010011", 
    306 to 324=> "000000000000", 325 => "010110100101", 326 => "100010101000", 
    327 to 332=> "111010111110", 333 to 334=> "111110111111", 335 => "111110001111", 
    336 => "111111101111", 337 => "111101011111", 338 => "111010111110", 
    339 => "101111101011", 340 => "000101010001", 341 to 355=> "000000000000", 
    356 => "100011001000", 357 => "111110111111", 358 to 371=> "111111101111", 
    372 => "101111011011", 373 => "000101110001", 374 to 387=> "000000000000", 
    388 => "111000101110", 389 => "111111101111", 390 => "110100001101", 
    391 to 394=> "110001111100", 395 => "100010111000", 396 to 400=> "001111010011", 
    401 => "100000001000", 402 => "110111101101", 403 to 404=> "111111101111", 
    405 => "101111011011", 406 => "000101010001", 407 to 419=> "000000000000", 
    420 => "001001100010", 421 => "010100100101", 422 => "000011010000", 
    423 to 433=> "000000000000", 434 => "001000100010", 435 => "110101011101", 
    436 to 437=> "111111101111", 438 => "011100110111", 439 to 466=> "000000000000", 
    467 => "010101000101", 468 to 469=> "111111101111", 470 => "111010101110", 
    471 to 498=> "000000000000", 499 => "010101000101", 500 to 501=> "111111101111", 
    502 => "111010101110", 503 to 529=> "000000000000", 530 => "011010100110", 
    531 => "100111011001", 532 to 533=> "111111101111", 534 => "111100111111", 
    535 => "001100110011", 536 to 556=> "000000000000", 557 => "000110010001", 
    558 => "011101010111", 559 to 561=> "111001001110", 562 => "111111011111", 
    563 to 566=> "111111101111", 567 => "111100001111", 568 to 586=> "000000000000", 
    587 => "010001000100", 588 => "011101110111", 589 => "110111001101", 
    590 to 598=> "111111101111", 599 => "100011101000", 600 to 616=> "000000000000", 
    617 => "001001010010", 618 => "101110111011", 619 => "111111011111", 
    620 to 622=> "111111101111", 623 => "110111111101", 624 to 625=> "110011101100", 
    626 => "010010110100", 627 => "010001000100", 628 => "110101111101", 
    629 to 630=> "111111101111", 631 => "011101010111", 632 to 647=> "000000000000", 
    648 => "011100010111", 649 => "110110111101", 650 => "111111101111", 
    651 => "111100101111", 652 => "111000111110", 653 => "011100110111", 
    654 => "010110010101", 655 => "000111110001", 656 to 659=> "000000000000", 
    660 => "110010001100", 661 => "111111101111", 662 => "111100011111", 
    663 => "001010010010", 664 to 679=> "000000000000", 680 => "101010011010", 
    681 => "111111101111", 682 => "101100001011", 683 => "001111100011", 
    684 to 690=> "000000000000", 691 => "001100000011", 692 => "111001111110", 
    693 => "111111101111", 694 => "111010101110", 695 to 711=> "000000000000", 
    712 => "000100100001", 713 => "011111000111", 714 to 722=> "000000000000", 
    723 => "010101000101", 724 to 725=> "111111101111", 726 => "101001101010", 
    727 to 754=> "000000000000", 755 => "100010111000", 756 => "111111101111", 
    757 => "111011101110", 758 => "001110010011", 759 to 785=> "000000000000", 
    786 => "110100101101", 787 => "111110101111", 788 => "111111101111", 
    789 => "101010001010", 790 to 817=> "000000000000", 818 => "111100101111", 
    819 => "111111101111", 820 => "111011111110", 821 => "001110010011", 
    822 to 848=> "000000000000", 849 => "010110010101", 850 => "111110111111", 
    851 => "111100011111", 852 => "010101100101", 853 to 879=> "000000000000", 
    880 => "000001010000", 881 => "110011101100", 882 => "111101101111", 
    883 => "100111011001", 884 to 911=> "000000000000", 912 => "000001000000", 
    913 => "011101010111", 914 => "010001010100", 915 to 1023=> "000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity Loop_1_proc137_imbkb is
    generic (
        DataWidth : INTEGER := 12;
        AddressRange : INTEGER := 1024;
        AddressWidth : INTEGER := 10);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of Loop_1_proc137_imbkb is
    component Loop_1_proc137_imbkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    Loop_1_proc137_imbkb_rom_U :  component Loop_1_proc137_imbkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


