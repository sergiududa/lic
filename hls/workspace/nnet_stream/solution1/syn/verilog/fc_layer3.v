// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fc_layer3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [15:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;
input  [15:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_V_V_write;
reg in_V_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] fc_layer3_weights_V_10_address0;
reg    fc_layer3_weights_V_10_ce0;
wire  signed [11:0] fc_layer3_weights_V_10_q0;
wire   [6:0] fc_layer3_weights_V_1_address0;
reg    fc_layer3_weights_V_1_ce0;
wire  signed [11:0] fc_layer3_weights_V_1_q0;
wire   [6:0] fc_layer3_weights_V_2_address0;
reg    fc_layer3_weights_V_2_ce0;
wire  signed [11:0] fc_layer3_weights_V_2_q0;
wire   [6:0] fc_layer3_weights_V_3_address0;
reg    fc_layer3_weights_V_3_ce0;
wire  signed [10:0] fc_layer3_weights_V_3_q0;
wire   [6:0] fc_layer3_weights_V_4_address0;
reg    fc_layer3_weights_V_4_ce0;
wire  signed [11:0] fc_layer3_weights_V_4_q0;
wire   [6:0] fc_layer3_weights_V_5_address0;
reg    fc_layer3_weights_V_5_ce0;
wire  signed [11:0] fc_layer3_weights_V_5_q0;
wire   [6:0] fc_layer3_weights_V_6_address0;
reg    fc_layer3_weights_V_6_ce0;
wire   [11:0] fc_layer3_weights_V_6_q0;
wire   [6:0] fc_layer3_weights_V_7_address0;
reg    fc_layer3_weights_V_7_ce0;
wire   [11:0] fc_layer3_weights_V_7_q0;
wire   [6:0] fc_layer3_weights_V_8_address0;
reg    fc_layer3_weights_V_8_ce0;
wire   [11:0] fc_layer3_weights_V_8_q0;
wire   [6:0] fc_layer3_weights_V_9_address0;
reg    fc_layer3_weights_V_9_ce0;
wire   [10:0] fc_layer3_weights_V_9_q0;
reg    out_V_V_blk_n;
wire    ap_CS_fsm_state14;
reg    in_V_V_blk_n;
wire    ap_CS_fsm_state3;
wire   [3:0] output_V_addr_reg_741;
reg    ap_block_state1;
wire   [6:0] j_1_fu_393_p2;
reg   [6:0] j_1_reg_796;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_fu_399_p1;
reg   [63:0] tmp_reg_801;
wire   [0:0] exitcond1_fu_387_p2;
reg  signed [15:0] tmp_V_712_reg_823;
wire  signed [27:0] OP2_V_cast_fu_405_p1;
reg  signed [27:0] OP2_V_cast_reg_828;
reg   [15:0] tmp_5_reg_838;
reg   [15:0] tmp_33_1_reg_843;
wire  signed [26:0] OP2_V_cast_cast_fu_451_p1;
reg  signed [26:0] OP2_V_cast_cast_reg_858;
wire    ap_CS_fsm_state4;
reg   [15:0] tmp_33_2_reg_863;
reg   [15:0] tmp_33_3_reg_868;
reg   [15:0] tmp_33_4_reg_903;
wire    ap_CS_fsm_state5;
reg   [15:0] tmp_33_5_reg_908;
reg  signed [11:0] fc_layer3_weights_V_13_reg_913;
reg  signed [11:0] fc_layer3_weights_V_15_reg_918;
reg  signed [11:0] fc_layer3_weights_V_17_reg_923;
reg  signed [10:0] fc_layer3_weights_V_19_reg_928;
reg   [15:0] tmp_33_6_reg_933;
wire    ap_CS_fsm_state6;
reg   [15:0] tmp_33_7_reg_938;
reg   [15:0] tmp_33_8_reg_943;
wire    ap_CS_fsm_state7;
reg   [15:0] tmp_33_9_reg_948;
wire   [3:0] i_fu_624_p2;
reg   [3:0] i_reg_956;
wire    ap_CS_fsm_state13;
wire   [0:0] exitcond_fu_618_p2;
reg   [3:0] output_V_address0;
reg    output_V_ce0;
reg    output_V_we0;
reg   [15:0] output_V_d0;
wire   [15:0] output_V_q0;
reg   [3:0] output_V_address1;
reg    output_V_ce1;
reg    output_V_we1;
reg   [15:0] output_V_d1;
wire   [15:0] output_V_q1;
reg   [6:0] j_reg_365;
wire    ap_CS_fsm_state11;
reg   [3:0] i1_reg_376;
wire    ap_CS_fsm_state12;
wire   [63:0] tmp_s_fu_630_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire  signed [27:0] grp_fu_658_p3;
wire  signed [27:0] grp_fu_667_p3;
wire  signed [27:0] grp_fu_676_p3;
wire  signed [27:0] grp_fu_684_p3;
wire  signed [27:0] grp_fu_693_p3;
wire  signed [27:0] grp_fu_701_p3;
wire  signed [27:0] grp_fu_709_p3;
wire  signed [27:0] grp_fu_717_p3;
wire  signed [27:0] grp_fu_725_p3;
wire  signed [27:0] grp_fu_733_p3;
wire   [0:0] tmp_i_fu_639_p2;
wire   [14:0] tmp_12_fu_635_p1;
wire   [14:0] tmp_V_fu_645_p3;
wire  signed [15:0] grp_fu_658_p1;
wire   [27:0] grp_fu_658_p2;
wire  signed [15:0] grp_fu_667_p1;
wire   [27:0] grp_fu_667_p2;
wire  signed [15:0] grp_fu_676_p1;
wire   [27:0] grp_fu_676_p2;
wire   [27:0] grp_fu_684_p2;
wire  signed [15:0] grp_fu_693_p1;
wire   [27:0] grp_fu_693_p2;
wire  signed [15:0] grp_fu_701_p1;
wire   [27:0] grp_fu_701_p2;
wire  signed [15:0] grp_fu_709_p1;
wire   [27:0] grp_fu_709_p2;
wire  signed [15:0] grp_fu_717_p1;
wire   [27:0] grp_fu_717_p2;
wire  signed [15:0] grp_fu_725_p1;
wire   [27:0] grp_fu_725_p2;
wire  signed [15:0] grp_fu_733_p1;
wire   [27:0] grp_fu_733_p2;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 14'd1;
end

fc_layer3_fc_layeh9b #(
    .DataWidth( 12 ),
    .AddressRange( 84 ),
    .AddressWidth( 7 ))
fc_layer3_weights_V_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc_layer3_weights_V_10_address0),
    .ce0(fc_layer3_weights_V_10_ce0),
    .q0(fc_layer3_weights_V_10_q0)
);

fc_layer3_fc_layeiab #(
    .DataWidth( 12 ),
    .AddressRange( 84 ),
    .AddressWidth( 7 ))
fc_layer3_weights_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc_layer3_weights_V_1_address0),
    .ce0(fc_layer3_weights_V_1_ce0),
    .q0(fc_layer3_weights_V_1_q0)
);

fc_layer3_fc_layeibb #(
    .DataWidth( 12 ),
    .AddressRange( 84 ),
    .AddressWidth( 7 ))
fc_layer3_weights_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc_layer3_weights_V_2_address0),
    .ce0(fc_layer3_weights_V_2_ce0),
    .q0(fc_layer3_weights_V_2_q0)
);

fc_layer3_fc_layeicb #(
    .DataWidth( 11 ),
    .AddressRange( 84 ),
    .AddressWidth( 7 ))
fc_layer3_weights_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc_layer3_weights_V_3_address0),
    .ce0(fc_layer3_weights_V_3_ce0),
    .q0(fc_layer3_weights_V_3_q0)
);

fc_layer3_fc_layeidb #(
    .DataWidth( 12 ),
    .AddressRange( 84 ),
    .AddressWidth( 7 ))
fc_layer3_weights_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc_layer3_weights_V_4_address0),
    .ce0(fc_layer3_weights_V_4_ce0),
    .q0(fc_layer3_weights_V_4_q0)
);

fc_layer3_fc_layeieb #(
    .DataWidth( 12 ),
    .AddressRange( 84 ),
    .AddressWidth( 7 ))
fc_layer3_weights_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc_layer3_weights_V_5_address0),
    .ce0(fc_layer3_weights_V_5_ce0),
    .q0(fc_layer3_weights_V_5_q0)
);

fc_layer3_fc_layeifb #(
    .DataWidth( 12 ),
    .AddressRange( 84 ),
    .AddressWidth( 7 ))
fc_layer3_weights_V_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc_layer3_weights_V_6_address0),
    .ce0(fc_layer3_weights_V_6_ce0),
    .q0(fc_layer3_weights_V_6_q0)
);

fc_layer3_fc_layeigb #(
    .DataWidth( 12 ),
    .AddressRange( 84 ),
    .AddressWidth( 7 ))
fc_layer3_weights_V_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc_layer3_weights_V_7_address0),
    .ce0(fc_layer3_weights_V_7_ce0),
    .q0(fc_layer3_weights_V_7_q0)
);

fc_layer3_fc_layeihb #(
    .DataWidth( 12 ),
    .AddressRange( 84 ),
    .AddressWidth( 7 ))
fc_layer3_weights_V_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc_layer3_weights_V_8_address0),
    .ce0(fc_layer3_weights_V_8_ce0),
    .q0(fc_layer3_weights_V_8_q0)
);

fc_layer3_fc_layeiib #(
    .DataWidth( 11 ),
    .AddressRange( 84 ),
    .AddressWidth( 7 ))
fc_layer3_weights_V_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc_layer3_weights_V_9_address0),
    .ce0(fc_layer3_weights_V_9_ce0),
    .q0(fc_layer3_weights_V_9_q0)
);

fc_layer3_output_V #(
    .DataWidth( 16 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
output_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_V_address0),
    .ce0(output_V_ce0),
    .we0(output_V_we0),
    .d0(output_V_d0),
    .q0(output_V_q0),
    .address1(output_V_address1),
    .ce1(output_V_ce1),
    .we1(output_V_we1),
    .d1(output_V_d1),
    .q1(output_V_q1)
);

nnet_mac_muladd_1ijb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
nnet_mac_muladd_1ijb_U425(
    .din0(fc_layer3_weights_V_10_q0),
    .din1(grp_fu_658_p1),
    .din2(grp_fu_658_p2),
    .dout(grp_fu_658_p3)
);

nnet_mac_muladd_1ijb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
nnet_mac_muladd_1ijb_U426(
    .din0(fc_layer3_weights_V_1_q0),
    .din1(grp_fu_667_p1),
    .din2(grp_fu_667_p2),
    .dout(grp_fu_667_p3)
);

nnet_mac_muladd_1ijb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
nnet_mac_muladd_1ijb_U427(
    .din0(fc_layer3_weights_V_2_q0),
    .din1(grp_fu_676_p1),
    .din2(grp_fu_676_p2),
    .dout(grp_fu_676_p3)
);

nnet_mac_muladd_1ikb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
nnet_mac_muladd_1ikb_U428(
    .din0(fc_layer3_weights_V_3_q0),
    .din1(tmp_V_712_reg_823),
    .din2(grp_fu_684_p2),
    .dout(grp_fu_684_p3)
);

nnet_mac_muladd_1ijb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
nnet_mac_muladd_1ijb_U429(
    .din0(fc_layer3_weights_V_4_q0),
    .din1(grp_fu_693_p1),
    .din2(grp_fu_693_p2),
    .dout(grp_fu_693_p3)
);

nnet_mac_muladd_1ijb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
nnet_mac_muladd_1ijb_U430(
    .din0(fc_layer3_weights_V_5_q0),
    .din1(grp_fu_701_p1),
    .din2(grp_fu_701_p2),
    .dout(grp_fu_701_p3)
);

nnet_mac_muladd_1ijb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
nnet_mac_muladd_1ijb_U431(
    .din0(fc_layer3_weights_V_13_reg_913),
    .din1(grp_fu_709_p1),
    .din2(grp_fu_709_p2),
    .dout(grp_fu_709_p3)
);

nnet_mac_muladd_1ijb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
nnet_mac_muladd_1ijb_U432(
    .din0(fc_layer3_weights_V_15_reg_918),
    .din1(grp_fu_717_p1),
    .din2(grp_fu_717_p2),
    .dout(grp_fu_717_p3)
);

nnet_mac_muladd_1ijb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
nnet_mac_muladd_1ijb_U433(
    .din0(fc_layer3_weights_V_17_reg_923),
    .din1(grp_fu_725_p1),
    .din2(grp_fu_725_p2),
    .dout(grp_fu_725_p3)
);

nnet_mac_muladd_1ikb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
nnet_mac_muladd_1ikb_U434(
    .din0(fc_layer3_weights_V_19_reg_928),
    .din1(grp_fu_733_p1),
    .din2(grp_fu_733_p2),
    .dout(grp_fu_733_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond_fu_618_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i1_reg_376 <= 4'd0;
    end else if (((out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        i1_reg_376 <= i_reg_956;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_365 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        j_reg_365 <= j_1_reg_796;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        OP2_V_cast_cast_reg_858 <= OP2_V_cast_cast_fu_451_p1;
        tmp_33_2_reg_863 <= {{grp_fu_676_p3[27:12]}};
        tmp_33_3_reg_868 <= {{grp_fu_684_p3[27:12]}};
    end
end

always @ (posedge ap_clk) begin
    if (((in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        OP2_V_cast_reg_828 <= OP2_V_cast_fu_405_p1;
        tmp_33_1_reg_843 <= {{grp_fu_667_p3[27:12]}};
        tmp_5_reg_838 <= {{grp_fu_658_p3[27:12]}};
        tmp_V_712_reg_823 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        fc_layer3_weights_V_13_reg_913 <= fc_layer3_weights_V_6_q0;
        fc_layer3_weights_V_15_reg_918 <= fc_layer3_weights_V_7_q0;
        fc_layer3_weights_V_17_reg_923 <= fc_layer3_weights_V_8_q0;
        fc_layer3_weights_V_19_reg_928 <= fc_layer3_weights_V_9_q0;
        tmp_33_4_reg_903 <= {{grp_fu_693_p3[27:12]}};
        tmp_33_5_reg_908 <= {{grp_fu_701_p3[27:12]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_reg_956 <= i_fu_624_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        j_1_reg_796 <= j_1_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_33_6_reg_933 <= {{grp_fu_709_p3[27:12]}};
        tmp_33_7_reg_938 <= {{grp_fu_717_p3[27:12]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_33_8_reg_943 <= {{grp_fu_725_p3[27:12]}};
        tmp_33_9_reg_948 <= {{grp_fu_733_p3[27:12]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_387_p2 == 1'd0))) begin
        tmp_reg_801[6 : 0] <= tmp_fu_399_p1[6 : 0];
    end
end

always @ (*) begin
    if (((exitcond_fu_618_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_618_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        fc_layer3_weights_V_10_ce0 = 1'b1;
    end else begin
        fc_layer3_weights_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        fc_layer3_weights_V_1_ce0 = 1'b1;
    end else begin
        fc_layer3_weights_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        fc_layer3_weights_V_2_ce0 = 1'b1;
    end else begin
        fc_layer3_weights_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        fc_layer3_weights_V_3_ce0 = 1'b1;
    end else begin
        fc_layer3_weights_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        fc_layer3_weights_V_4_ce0 = 1'b1;
    end else begin
        fc_layer3_weights_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        fc_layer3_weights_V_5_ce0 = 1'b1;
    end else begin
        fc_layer3_weights_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        fc_layer3_weights_V_6_ce0 = 1'b1;
    end else begin
        fc_layer3_weights_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        fc_layer3_weights_V_7_ce0 = 1'b1;
    end else begin
        fc_layer3_weights_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        fc_layer3_weights_V_8_ce0 = 1'b1;
    end else begin
        fc_layer3_weights_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        fc_layer3_weights_V_9_ce0 = 1'b1;
    end else begin
        fc_layer3_weights_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_V_address0 = 64'd1;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6))) begin
        output_V_address0 = 64'd9;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        output_V_address0 = 64'd7;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        output_V_address0 = 64'd5;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3))) begin
        output_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_V_address0 = output_V_addr_reg_741;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        output_V_address0 = 64'd0;
    end else begin
        output_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_address1 = tmp_s_fu_630_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_V_address1 = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6))) begin
        output_V_address1 = 64'd8;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        output_V_address1 = 64'd6;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        output_V_address1 = 64'd4;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3))) begin
        output_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_V_address1 = 64'd1;
    end else begin
        output_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | ((in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        output_V_ce1 = 1'b1;
    end else begin
        output_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_V_d0 = tmp_33_9_reg_948;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_V_d0 = tmp_33_7_reg_938;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_V_d0 = tmp_33_5_reg_908;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_V_d0 = tmp_33_3_reg_868;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_V_d0 = tmp_33_1_reg_843;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        output_V_d0 = 16'd0;
    end else begin
        output_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_V_d1 = tmp_33_8_reg_943;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_V_d1 = tmp_33_6_reg_933;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_V_d1 = tmp_33_4_reg_903;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_V_d1 = tmp_33_2_reg_863;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_V_d1 = tmp_5_reg_838;
    end else begin
        output_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        output_V_we1 = 1'b1;
    end else begin
        output_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_387_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((exitcond_fu_618_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP2_V_cast_cast_fu_451_p1 = tmp_V_712_reg_823;

assign OP2_V_cast_fu_405_p1 = $signed(in_V_V_dout);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign exitcond1_fu_387_p2 = ((j_reg_365 == 7'd84) ? 1'b1 : 1'b0);

assign exitcond_fu_618_p2 = ((i1_reg_376 == 4'd10) ? 1'b1 : 1'b0);

assign fc_layer3_weights_V_10_address0 = tmp_fu_399_p1;

assign fc_layer3_weights_V_1_address0 = tmp_fu_399_p1;

assign fc_layer3_weights_V_2_address0 = tmp_reg_801;

assign fc_layer3_weights_V_3_address0 = tmp_reg_801;

assign fc_layer3_weights_V_4_address0 = tmp_reg_801;

assign fc_layer3_weights_V_5_address0 = tmp_reg_801;

assign fc_layer3_weights_V_6_address0 = tmp_reg_801;

assign fc_layer3_weights_V_7_address0 = tmp_reg_801;

assign fc_layer3_weights_V_8_address0 = tmp_reg_801;

assign fc_layer3_weights_V_9_address0 = tmp_reg_801;

assign grp_fu_658_p1 = OP2_V_cast_fu_405_p1;

assign grp_fu_658_p2 = {{output_V_q0}, {12'd0}};

assign grp_fu_667_p1 = OP2_V_cast_fu_405_p1;

assign grp_fu_667_p2 = {{output_V_q1}, {12'd0}};

assign grp_fu_676_p1 = OP2_V_cast_reg_828;

assign grp_fu_676_p2 = {{output_V_q1}, {12'd0}};

assign grp_fu_684_p2 = {{output_V_q0}, {12'd0}};

assign grp_fu_693_p1 = OP2_V_cast_reg_828;

assign grp_fu_693_p2 = {{output_V_q1}, {12'd0}};

assign grp_fu_701_p1 = OP2_V_cast_reg_828;

assign grp_fu_701_p2 = {{output_V_q0}, {12'd0}};

assign grp_fu_709_p1 = OP2_V_cast_reg_828;

assign grp_fu_709_p2 = {{output_V_q1}, {12'd0}};

assign grp_fu_717_p1 = OP2_V_cast_reg_828;

assign grp_fu_717_p2 = {{output_V_q0}, {12'd0}};

assign grp_fu_725_p1 = OP2_V_cast_reg_828;

assign grp_fu_725_p2 = {{output_V_q1}, {12'd0}};

assign grp_fu_733_p1 = OP2_V_cast_cast_reg_858;

assign grp_fu_733_p2 = {{output_V_q0}, {12'd0}};

assign i_fu_624_p2 = (i1_reg_376 + 4'd1);

assign j_1_fu_393_p2 = (j_reg_365 + 7'd1);

assign out_V_V_din = tmp_V_fu_645_p3;

assign output_V_addr_reg_741 = 64'd0;

assign tmp_12_fu_635_p1 = output_V_q1[14:0];

assign tmp_V_fu_645_p3 = ((tmp_i_fu_639_p2[0:0] === 1'b1) ? tmp_12_fu_635_p1 : 15'd0);

assign tmp_fu_399_p1 = j_reg_365;

assign tmp_i_fu_639_p2 = (($signed(output_V_q1) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign tmp_s_fu_630_p1 = i1_reg_376;

always @ (posedge ap_clk) begin
    tmp_reg_801[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //fc_layer3
