// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fc_layer2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [15:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;
input  [15:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_V_V_write;
reg in_V_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [13:0] fc_layer2_weights_V_address0;
reg    fc_layer2_weights_V_ce0;
wire  signed [10:0] fc_layer2_weights_V_q0;
reg   [13:0] fc_layer2_weights_V_address1;
reg    fc_layer2_weights_V_ce1;
wire  signed [10:0] fc_layer2_weights_V_q1;
reg    out_V_V_blk_n;
wire    ap_CS_fsm_state8;
reg    in_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond2_fu_260_p2;
wire   [13:0] next_mul_fu_254_p2;
reg   [13:0] next_mul_reg_542;
reg    ap_block_state2;
wire   [6:0] j_2_fu_266_p2;
reg   [6:0] j_2_reg_550;
wire  signed [26:0] tmp_11_cast_fu_272_p1;
reg  signed [26:0] tmp_11_cast_reg_555;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond1_fu_276_p2;
reg   [6:0] output_V_addr_6_reg_571;
reg   [6:0] output_V_addr_7_reg_582;
reg   [15:0] tmp_13_reg_588;
wire    ap_CS_fsm_state4;
reg   [15:0] tmp_42_1_reg_593;
reg   [6:0] output_V_addr_8_reg_603;
reg   [6:0] output_V_addr_9_reg_613;
wire   [6:0] i_6_3_fu_422_p2;
reg   [6:0] i_6_3_reg_618;
reg   [15:0] tmp_42_2_reg_623;
wire    ap_CS_fsm_state5;
reg   [15:0] tmp_42_3_reg_628;
wire   [6:0] i_fu_476_p2;
reg   [6:0] i_reg_636;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond_fu_470_p2;
reg   [6:0] output_V_address0;
reg    output_V_ce0;
reg    output_V_we0;
reg   [15:0] output_V_d0;
wire   [15:0] output_V_q0;
reg   [6:0] output_V_address1;
reg    output_V_ce1;
reg    output_V_we1;
reg   [15:0] output_V_d1;
wire   [15:0] output_V_q1;
reg   [6:0] j_reg_208;
reg    ap_block_state1;
reg   [13:0] phi_mul_reg_219;
reg   [6:0] i4_reg_231;
wire    ap_CS_fsm_state6;
reg   [6:0] i1_reg_243;
wire   [63:0] tmp_18_cast_fu_297_p1;
wire   [63:0] tmp_8_fu_282_p1;
wire   [63:0] tmp_19_cast_fu_323_p1;
wire   [63:0] tmp_37_1_fu_308_p1;
wire   [63:0] tmp_20_cast_fu_391_p1;
wire   [63:0] tmp_37_2_fu_376_p1;
wire   [63:0] tmp_21_cast_fu_417_p1;
wire   [63:0] tmp_37_3_fu_402_p1;
wire   [63:0] tmp_s_fu_482_p1;
wire   [13:0] tmp_8_cast_fu_287_p1;
wire   [13:0] tmp_16_fu_291_p2;
wire   [6:0] i_6_s_fu_302_p2;
wire   [13:0] tmp_37_1_cast_fu_313_p1;
wire   [13:0] tmp_17_fu_317_p2;
wire  signed [27:0] grp_fu_510_p3;
wire  signed [27:0] grp_fu_518_p3;
wire   [6:0] i_6_1_fu_370_p2;
wire   [13:0] tmp_37_2_cast_fu_381_p1;
wire   [13:0] tmp_18_fu_385_p2;
wire   [6:0] i_6_2_fu_396_p2;
wire   [13:0] tmp_37_3_cast_fu_407_p1;
wire   [13:0] tmp_19_fu_411_p2;
wire  signed [27:0] grp_fu_526_p3;
wire  signed [27:0] grp_fu_534_p3;
wire   [0:0] tmp_i_fu_491_p2;
wire   [14:0] tmp_fu_487_p1;
wire   [14:0] tmp_V_fu_497_p3;
wire  signed [15:0] grp_fu_510_p0;
wire   [27:0] grp_fu_510_p2;
wire  signed [15:0] grp_fu_518_p0;
wire   [27:0] grp_fu_518_p2;
wire  signed [15:0] grp_fu_526_p0;
wire   [27:0] grp_fu_526_p2;
wire  signed [15:0] grp_fu_534_p0;
wire   [27:0] grp_fu_534_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
end

fc_layer2_fc_layeh7b #(
    .DataWidth( 11 ),
    .AddressRange( 10080 ),
    .AddressWidth( 14 ))
fc_layer2_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc_layer2_weights_V_address0),
    .ce0(fc_layer2_weights_V_ce0),
    .q0(fc_layer2_weights_V_q0),
    .address1(fc_layer2_weights_V_address1),
    .ce1(fc_layer2_weights_V_ce1),
    .q1(fc_layer2_weights_V_q1)
);

fc_layer2_output_V #(
    .DataWidth( 16 ),
    .AddressRange( 84 ),
    .AddressWidth( 7 ))
output_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_V_address0),
    .ce0(output_V_ce0),
    .we0(output_V_we0),
    .d0(output_V_d0),
    .q0(output_V_q0),
    .address1(output_V_address1),
    .ce1(output_V_ce1),
    .we1(output_V_we1),
    .d1(output_V_d1),
    .q1(output_V_q1)
);

nnet_mac_muladd_1bVr #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
nnet_mac_muladd_1bVr_U220(
    .din0(grp_fu_510_p0),
    .din1(fc_layer2_weights_V_q0),
    .din2(grp_fu_510_p2),
    .dout(grp_fu_510_p3)
);

nnet_mac_muladd_1bVr #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
nnet_mac_muladd_1bVr_U221(
    .din0(grp_fu_518_p0),
    .din1(fc_layer2_weights_V_q1),
    .din2(grp_fu_518_p2),
    .dout(grp_fu_518_p3)
);

nnet_mac_muladd_1bVr #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
nnet_mac_muladd_1bVr_U222(
    .din0(grp_fu_526_p0),
    .din1(fc_layer2_weights_V_q0),
    .din2(grp_fu_526_p2),
    .dout(grp_fu_526_p3)
);

nnet_mac_muladd_1bVr #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
nnet_mac_muladd_1bVr_U223(
    .din0(grp_fu_534_p0),
    .din1(fc_layer2_weights_V_q1),
    .din2(grp_fu_534_p2),
    .dout(grp_fu_534_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_470_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond2_fu_260_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (exitcond2_fu_260_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_reg_243 <= 7'd0;
    end else if (((out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        i1_reg_243 <= i_reg_636;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i4_reg_231 <= i_6_3_reg_618;
    end else if ((~((exitcond2_fu_260_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (exitcond2_fu_260_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i4_reg_231 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_208 <= 7'd0;
    end else if (((exitcond1_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_208 <= j_2_reg_550;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_219 <= 14'd0;
    end else if (((exitcond1_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_219 <= next_mul_reg_542;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_6_3_reg_618 <= i_6_3_fu_422_p2;
        output_V_addr_8_reg_603[0] <= tmp_37_2_fu_376_p1[0];
output_V_addr_8_reg_603[6 : 2] <= tmp_37_2_fu_376_p1[6 : 2];
        output_V_addr_9_reg_613[6 : 2] <= tmp_37_3_fu_402_p1[6 : 2];
        tmp_13_reg_588 <= {{grp_fu_510_p3[27:12]}};
        tmp_42_1_reg_593 <= {{grp_fu_518_p3[27:12]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_636 <= i_fu_476_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond2_fu_260_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        j_2_reg_550 <= j_2_fu_266_p2;
        next_mul_reg_542 <= next_mul_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        output_V_addr_6_reg_571 <= tmp_8_fu_282_p1;
        output_V_addr_7_reg_582[6 : 1] <= tmp_37_1_fu_308_p1[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond2_fu_260_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (exitcond2_fu_260_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_11_cast_reg_555 <= tmp_11_cast_fu_272_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_42_2_reg_623 <= {{grp_fu_526_p3[27:12]}};
        tmp_42_3_reg_628 <= {{grp_fu_534_p3[27:12]}};
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_470_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_470_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        fc_layer2_weights_V_address0 = tmp_20_cast_fu_391_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        fc_layer2_weights_V_address0 = tmp_18_cast_fu_297_p1;
    end else begin
        fc_layer2_weights_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        fc_layer2_weights_V_address1 = tmp_21_cast_fu_417_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        fc_layer2_weights_V_address1 = tmp_19_cast_fu_323_p1;
    end else begin
        fc_layer2_weights_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        fc_layer2_weights_V_ce0 = 1'b1;
    end else begin
        fc_layer2_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        fc_layer2_weights_V_ce1 = 1'b1;
    end else begin
        fc_layer2_weights_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_260_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((exitcond2_fu_260_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (exitcond2_fu_260_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_V_address0 = output_V_addr_9_reg_613;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_address0 = output_V_addr_7_reg_582;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_address0 = tmp_37_3_fu_402_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_V_address0 = tmp_8_fu_282_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        output_V_address0 = 64'd0;
    end else begin
        output_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_V_address1 = tmp_s_fu_482_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_V_address1 = output_V_addr_8_reg_603;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_address1 = output_V_addr_6_reg_571;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_address1 = tmp_37_2_fu_376_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_V_address1 = tmp_37_1_fu_308_p1;
    end else begin
        output_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        output_V_ce1 = 1'b1;
    end else begin
        output_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_V_d0 = tmp_42_3_reg_628;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_d0 = tmp_42_1_reg_593;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        output_V_d0 = 16'd0;
    end else begin
        output_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_V_d1 = tmp_42_2_reg_623;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_d1 = tmp_13_reg_588;
    end else begin
        output_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        output_V_we1 = 1'b1;
    end else begin
        output_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((exitcond2_fu_260_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (exitcond2_fu_260_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if ((~((exitcond2_fu_260_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (exitcond2_fu_260_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond1_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_470_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((exitcond2_fu_260_p2 == 1'd0) & (in_V_V_empty_n == 1'b0));
end

assign exitcond1_fu_276_p2 = ((i4_reg_231 == 7'd84) ? 1'b1 : 1'b0);

assign exitcond2_fu_260_p2 = ((j_reg_208 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond_fu_470_p2 = ((i1_reg_243 == 7'd84) ? 1'b1 : 1'b0);

assign grp_fu_510_p0 = tmp_11_cast_reg_555;

assign grp_fu_510_p2 = {{output_V_q0}, {12'd0}};

assign grp_fu_518_p0 = tmp_11_cast_reg_555;

assign grp_fu_518_p2 = {{output_V_q1}, {12'd0}};

assign grp_fu_526_p0 = tmp_11_cast_reg_555;

assign grp_fu_526_p2 = {{output_V_q1}, {12'd0}};

assign grp_fu_534_p0 = tmp_11_cast_reg_555;

assign grp_fu_534_p2 = {{output_V_q0}, {12'd0}};

assign i_6_1_fu_370_p2 = (i4_reg_231 | 7'd2);

assign i_6_2_fu_396_p2 = (i4_reg_231 | 7'd3);

assign i_6_3_fu_422_p2 = (i4_reg_231 + 7'd4);

assign i_6_s_fu_302_p2 = (i4_reg_231 | 7'd1);

assign i_fu_476_p2 = (i1_reg_243 + 7'd1);

assign j_2_fu_266_p2 = (j_reg_208 + 7'd1);

assign next_mul_fu_254_p2 = (phi_mul_reg_219 + 14'd84);

assign out_V_V_din = tmp_V_fu_497_p3;

assign tmp_11_cast_fu_272_p1 = $signed(in_V_V_dout);

assign tmp_16_fu_291_p2 = (tmp_8_cast_fu_287_p1 + phi_mul_reg_219);

assign tmp_17_fu_317_p2 = (tmp_37_1_cast_fu_313_p1 + phi_mul_reg_219);

assign tmp_18_cast_fu_297_p1 = tmp_16_fu_291_p2;

assign tmp_18_fu_385_p2 = (tmp_37_2_cast_fu_381_p1 + phi_mul_reg_219);

assign tmp_19_cast_fu_323_p1 = tmp_17_fu_317_p2;

assign tmp_19_fu_411_p2 = (tmp_37_3_cast_fu_407_p1 + phi_mul_reg_219);

assign tmp_20_cast_fu_391_p1 = tmp_18_fu_385_p2;

assign tmp_21_cast_fu_417_p1 = tmp_19_fu_411_p2;

assign tmp_37_1_cast_fu_313_p1 = i_6_s_fu_302_p2;

assign tmp_37_1_fu_308_p1 = i_6_s_fu_302_p2;

assign tmp_37_2_cast_fu_381_p1 = i_6_1_fu_370_p2;

assign tmp_37_2_fu_376_p1 = i_6_1_fu_370_p2;

assign tmp_37_3_cast_fu_407_p1 = i_6_2_fu_396_p2;

assign tmp_37_3_fu_402_p1 = i_6_2_fu_396_p2;

assign tmp_8_cast_fu_287_p1 = i4_reg_231;

assign tmp_8_fu_282_p1 = i4_reg_231;

assign tmp_V_fu_497_p3 = ((tmp_i_fu_491_p2[0:0] === 1'b1) ? tmp_fu_487_p1 : 15'd0);

assign tmp_fu_487_p1 = output_V_q1[14:0];

assign tmp_i_fu_491_p2 = (($signed(output_V_q1) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign tmp_s_fu_482_p1 = i1_reg_243;

always @ (posedge ap_clk) begin
    output_V_addr_7_reg_582[0] <= 1'b1;
    output_V_addr_8_reg_603[1] <= 1'b1;
    output_V_addr_9_reg_613[1:0] <= 2'b11;
end

endmodule //fc_layer2
