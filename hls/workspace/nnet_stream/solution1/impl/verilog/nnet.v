// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="nnet,hls_ip_2017_4_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.159000,HLS_SYN_LAT=3317931,HLS_SYN_TPT=none,HLS_SYN_MEM=2088,HLS_SYN_DSP=25,HLS_SYN_FF=41747,HLS_SYN_LUT=50573}" *)

module nnet (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fc3_out_V_din,
        fc3_out_V_full_n,
        fc3_out_V_write
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] fc3_out_V_din;
input   fc3_out_V_full_n;
output   fc3_out_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fc3_out_V_write;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] image_r_address0;
reg    image_r_ce0;
wire   [31:0] image_r_q0;
wire   [10:0] i_3_fu_207_p2;
reg   [10:0] i_3_reg_263;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_fu_201_p2;
wire    grp_conv_layer1_fu_144_ap_start;
wire    grp_conv_layer1_fu_144_ap_done;
wire    grp_conv_layer1_fu_144_ap_idle;
wire    grp_conv_layer1_fu_144_ap_ready;
wire   [31:0] grp_conv_layer1_fu_144_out_V_din;
wire    grp_conv_layer1_fu_144_out_V_write;
wire    grp_conv_layer1_fu_144_in_V_read;
wire    grp_conv_layer2_fu_154_ap_start;
wire    grp_conv_layer2_fu_154_ap_done;
wire    grp_conv_layer2_fu_154_ap_idle;
wire    grp_conv_layer2_fu_154_ap_ready;
wire   [31:0] grp_conv_layer2_fu_154_out_V_din;
wire    grp_conv_layer2_fu_154_out_V_write;
wire    grp_conv_layer2_fu_154_in_V_read;
wire    grp_pool_layer1_fu_164_ap_start;
wire    grp_pool_layer1_fu_164_ap_done;
wire    grp_pool_layer1_fu_164_ap_idle;
wire    grp_pool_layer1_fu_164_ap_ready;
wire   [31:0] grp_pool_layer1_fu_164_out_V_din;
wire    grp_pool_layer1_fu_164_out_V_write;
wire    grp_pool_layer1_fu_164_in_V_read;
wire    grp_pool_layer2_fu_170_ap_start;
wire    grp_pool_layer2_fu_170_ap_done;
wire    grp_pool_layer2_fu_170_ap_idle;
wire    grp_pool_layer2_fu_170_ap_ready;
wire   [31:0] grp_pool_layer2_fu_170_out_V_din;
wire    grp_pool_layer2_fu_170_out_V_write;
wire    grp_pool_layer2_fu_170_in_V_read;
wire    grp_fc_layer1_fu_176_ap_start;
wire    grp_fc_layer1_fu_176_ap_done;
wire    grp_fc_layer1_fu_176_ap_idle;
wire    grp_fc_layer1_fu_176_ap_ready;
wire   [31:0] grp_fc_layer1_fu_176_out_V_din;
wire    grp_fc_layer1_fu_176_out_V_write;
wire    grp_fc_layer1_fu_176_in_V_read;
wire    grp_fc_layer2_fu_184_ap_start;
wire    grp_fc_layer2_fu_184_ap_done;
wire    grp_fc_layer2_fu_184_ap_idle;
wire    grp_fc_layer2_fu_184_ap_ready;
wire   [31:0] grp_fc_layer2_fu_184_out_V_din;
wire    grp_fc_layer2_fu_184_out_V_write;
wire    grp_fc_layer2_fu_184_in_V_read;
wire    grp_fc_layer3_fu_192_ap_start;
wire    grp_fc_layer3_fu_192_ap_done;
wire    grp_fc_layer3_fu_192_ap_idle;
wire    grp_fc_layer3_fu_192_ap_ready;
wire   [31:0] grp_fc_layer3_fu_192_out_V_din;
wire    grp_fc_layer3_fu_192_out_V_write;
wire    grp_fc_layer3_fu_192_in_V_read;
reg   [10:0] i_reg_133;
wire    ap_CS_fsm_state3;
wire    image_in_V_full_n;
reg    image_in_V_write;
reg    ap_reg_grp_conv_layer1_fu_144_ap_start;
wire    conv1_out_V_full_n;
reg    conv1_out_V_write;
wire    ap_CS_fsm_state4;
wire   [31:0] image_in_V_dout;
wire    image_in_V_empty_n;
reg    image_in_V_read;
reg    ap_reg_grp_conv_layer2_fu_154_ap_start;
wire    ap_CS_fsm_state7;
wire    conv2_out_V_full_n;
reg    conv2_out_V_write;
wire    ap_CS_fsm_state8;
wire   [31:0] pool1_out_V_dout;
wire    pool1_out_V_empty_n;
reg    pool1_out_V_read;
reg    ap_reg_grp_pool_layer1_fu_164_ap_start;
wire    ap_CS_fsm_state5;
wire    pool1_out_V_full_n;
reg    pool1_out_V_write;
wire    ap_CS_fsm_state6;
wire   [31:0] conv1_out_V_dout;
wire    conv1_out_V_empty_n;
reg    conv1_out_V_read;
reg    ap_reg_grp_pool_layer2_fu_170_ap_start;
wire    ap_CS_fsm_state9;
wire    pool2_out_V_full_n;
reg    pool2_out_V_write;
wire    ap_CS_fsm_state10;
wire   [31:0] conv2_out_V_dout;
wire    conv2_out_V_empty_n;
reg    conv2_out_V_read;
reg    ap_reg_grp_fc_layer1_fu_176_ap_start;
wire    ap_CS_fsm_state11;
wire    fc1_out_V_full_n;
reg    fc1_out_V_write;
wire    ap_CS_fsm_state12;
wire   [31:0] pool2_out_V_dout;
wire    pool2_out_V_empty_n;
reg    pool2_out_V_read;
reg    ap_reg_grp_fc_layer2_fu_184_ap_start;
wire    ap_CS_fsm_state13;
wire    fc2_out_V_full_n;
reg    fc2_out_V_write;
wire    ap_CS_fsm_state14;
wire   [31:0] fc1_out_V_dout;
wire    fc1_out_V_empty_n;
reg    fc1_out_V_read;
reg    ap_reg_grp_fc_layer3_fu_192_ap_start;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire   [31:0] fc2_out_V_dout;
wire    fc2_out_V_empty_n;
reg    fc2_out_V_read;
wire   [63:0] tmp_fu_213_p1;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 ap_reg_grp_conv_layer1_fu_144_ap_start = 1'b0;
#0 ap_reg_grp_conv_layer2_fu_154_ap_start = 1'b0;
#0 ap_reg_grp_pool_layer1_fu_164_ap_start = 1'b0;
#0 ap_reg_grp_pool_layer2_fu_170_ap_start = 1'b0;
#0 ap_reg_grp_fc_layer1_fu_176_ap_start = 1'b0;
#0 ap_reg_grp_fc_layer2_fu_184_ap_start = 1'b0;
#0 ap_reg_grp_fc_layer3_fu_192_ap_start = 1'b0;
end

nnet_image_r #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
image_r_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(image_r_address0),
    .ce0(image_r_ce0),
    .q0(image_r_q0)
);

conv_layer1 grp_conv_layer1_fu_144(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_conv_layer1_fu_144_ap_start),
    .ap_done(grp_conv_layer1_fu_144_ap_done),
    .ap_idle(grp_conv_layer1_fu_144_ap_idle),
    .ap_ready(grp_conv_layer1_fu_144_ap_ready),
    .out_V_din(grp_conv_layer1_fu_144_out_V_din),
    .out_V_full_n(conv1_out_V_full_n),
    .out_V_write(grp_conv_layer1_fu_144_out_V_write),
    .in_V_dout(image_in_V_dout),
    .in_V_empty_n(image_in_V_empty_n),
    .in_V_read(grp_conv_layer1_fu_144_in_V_read)
);

conv_layer2 grp_conv_layer2_fu_154(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_conv_layer2_fu_154_ap_start),
    .ap_done(grp_conv_layer2_fu_154_ap_done),
    .ap_idle(grp_conv_layer2_fu_154_ap_idle),
    .ap_ready(grp_conv_layer2_fu_154_ap_ready),
    .out_V_din(grp_conv_layer2_fu_154_out_V_din),
    .out_V_full_n(conv2_out_V_full_n),
    .out_V_write(grp_conv_layer2_fu_154_out_V_write),
    .in_V_dout(pool1_out_V_dout),
    .in_V_empty_n(pool1_out_V_empty_n),
    .in_V_read(grp_conv_layer2_fu_154_in_V_read)
);

pool_layer1 grp_pool_layer1_fu_164(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pool_layer1_fu_164_ap_start),
    .ap_done(grp_pool_layer1_fu_164_ap_done),
    .ap_idle(grp_pool_layer1_fu_164_ap_idle),
    .ap_ready(grp_pool_layer1_fu_164_ap_ready),
    .out_V_din(grp_pool_layer1_fu_164_out_V_din),
    .out_V_full_n(pool1_out_V_full_n),
    .out_V_write(grp_pool_layer1_fu_164_out_V_write),
    .in_V_dout(conv1_out_V_dout),
    .in_V_empty_n(conv1_out_V_empty_n),
    .in_V_read(grp_pool_layer1_fu_164_in_V_read)
);

pool_layer2 grp_pool_layer2_fu_170(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pool_layer2_fu_170_ap_start),
    .ap_done(grp_pool_layer2_fu_170_ap_done),
    .ap_idle(grp_pool_layer2_fu_170_ap_idle),
    .ap_ready(grp_pool_layer2_fu_170_ap_ready),
    .out_V_din(grp_pool_layer2_fu_170_out_V_din),
    .out_V_full_n(pool2_out_V_full_n),
    .out_V_write(grp_pool_layer2_fu_170_out_V_write),
    .in_V_dout(conv2_out_V_dout),
    .in_V_empty_n(conv2_out_V_empty_n),
    .in_V_read(grp_pool_layer2_fu_170_in_V_read)
);

fc_layer1 grp_fc_layer1_fu_176(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_fc_layer1_fu_176_ap_start),
    .ap_done(grp_fc_layer1_fu_176_ap_done),
    .ap_idle(grp_fc_layer1_fu_176_ap_idle),
    .ap_ready(grp_fc_layer1_fu_176_ap_ready),
    .out_V_din(grp_fc_layer1_fu_176_out_V_din),
    .out_V_full_n(fc1_out_V_full_n),
    .out_V_write(grp_fc_layer1_fu_176_out_V_write),
    .in_V_dout(pool2_out_V_dout),
    .in_V_empty_n(pool2_out_V_empty_n),
    .in_V_read(grp_fc_layer1_fu_176_in_V_read)
);

fc_layer2 grp_fc_layer2_fu_184(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_fc_layer2_fu_184_ap_start),
    .ap_done(grp_fc_layer2_fu_184_ap_done),
    .ap_idle(grp_fc_layer2_fu_184_ap_idle),
    .ap_ready(grp_fc_layer2_fu_184_ap_ready),
    .out_V_din(grp_fc_layer2_fu_184_out_V_din),
    .out_V_full_n(fc2_out_V_full_n),
    .out_V_write(grp_fc_layer2_fu_184_out_V_write),
    .in_V_dout(fc1_out_V_dout),
    .in_V_empty_n(fc1_out_V_empty_n),
    .in_V_read(grp_fc_layer2_fu_184_in_V_read)
);

fc_layer3 grp_fc_layer3_fu_192(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_fc_layer3_fu_192_ap_start),
    .ap_done(grp_fc_layer3_fu_192_ap_done),
    .ap_idle(grp_fc_layer3_fu_192_ap_idle),
    .ap_ready(grp_fc_layer3_fu_192_ap_ready),
    .out_V_din(grp_fc_layer3_fu_192_out_V_din),
    .out_V_full_n(fc3_out_V_full_n),
    .out_V_write(grp_fc_layer3_fu_192_out_V_write),
    .in_V_dout(fc2_out_V_dout),
    .in_V_empty_n(fc2_out_V_empty_n),
    .in_V_read(grp_fc_layer3_fu_192_in_V_read)
);

fifo_w32_d100000_A conv1_out_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_conv_layer1_fu_144_out_V_din),
    .if_full_n(conv1_out_V_full_n),
    .if_write(conv1_out_V_write),
    .if_dout(conv1_out_V_dout),
    .if_empty_n(conv1_out_V_empty_n),
    .if_read(conv1_out_V_read)
);

fifo_w32_d100000_A conv2_out_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_conv_layer2_fu_154_out_V_din),
    .if_full_n(conv2_out_V_full_n),
    .if_write(conv2_out_V_write),
    .if_dout(conv2_out_V_dout),
    .if_empty_n(conv2_out_V_empty_n),
    .if_read(conv2_out_V_read)
);

fifo_w32_d100000_A pool1_out_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_pool_layer1_fu_164_out_V_din),
    .if_full_n(pool1_out_V_full_n),
    .if_write(pool1_out_V_write),
    .if_dout(pool1_out_V_dout),
    .if_empty_n(pool1_out_V_empty_n),
    .if_read(pool1_out_V_read)
);

fifo_w32_d100000_A pool2_out_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_pool_layer2_fu_170_out_V_din),
    .if_full_n(pool2_out_V_full_n),
    .if_write(pool2_out_V_write),
    .if_dout(pool2_out_V_dout),
    .if_empty_n(pool2_out_V_empty_n),
    .if_read(pool2_out_V_read)
);

fifo_w32_d100000_A fc1_out_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_fc_layer1_fu_176_out_V_din),
    .if_full_n(fc1_out_V_full_n),
    .if_write(fc1_out_V_write),
    .if_dout(fc1_out_V_dout),
    .if_empty_n(fc1_out_V_empty_n),
    .if_read(fc1_out_V_read)
);

fifo_w32_d100000_A fc2_out_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_fc_layer2_fu_184_out_V_din),
    .if_full_n(fc2_out_V_full_n),
    .if_write(fc2_out_V_write),
    .if_dout(fc2_out_V_dout),
    .if_empty_n(fc2_out_V_empty_n),
    .if_read(fc2_out_V_read)
);

fifo_w32_d100000_A image_in_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(image_r_q0),
    .if_full_n(image_in_V_full_n),
    .if_write(image_in_V_write),
    .if_dout(image_in_V_dout),
    .if_empty_n(image_in_V_empty_n),
    .if_read(image_in_V_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_conv_layer1_fu_144_ap_start <= 1'b0;
    end else begin
        if (((exitcond_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_reg_grp_conv_layer1_fu_144_ap_start <= 1'b1;
        end else if ((grp_conv_layer1_fu_144_ap_ready == 1'b1)) begin
            ap_reg_grp_conv_layer1_fu_144_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_conv_layer2_fu_154_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_reg_grp_conv_layer2_fu_154_ap_start <= 1'b1;
        end else if ((grp_conv_layer2_fu_154_ap_ready == 1'b1)) begin
            ap_reg_grp_conv_layer2_fu_154_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_fc_layer1_fu_176_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_reg_grp_fc_layer1_fu_176_ap_start <= 1'b1;
        end else if ((grp_fc_layer1_fu_176_ap_ready == 1'b1)) begin
            ap_reg_grp_fc_layer1_fu_176_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_fc_layer2_fu_184_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_reg_grp_fc_layer2_fu_184_ap_start <= 1'b1;
        end else if ((grp_fc_layer2_fu_184_ap_ready == 1'b1)) begin
            ap_reg_grp_fc_layer2_fu_184_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_fc_layer3_fu_192_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_reg_grp_fc_layer3_fu_192_ap_start <= 1'b1;
        end else if ((grp_fc_layer3_fu_192_ap_ready == 1'b1)) begin
            ap_reg_grp_fc_layer3_fu_192_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_pool_layer1_fu_164_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_reg_grp_pool_layer1_fu_164_ap_start <= 1'b1;
        end else if ((grp_pool_layer1_fu_164_ap_ready == 1'b1)) begin
            ap_reg_grp_pool_layer1_fu_164_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_pool_layer2_fu_170_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_reg_grp_pool_layer2_fu_170_ap_start <= 1'b1;
        end else if ((grp_pool_layer2_fu_170_ap_ready == 1'b1)) begin
            ap_reg_grp_pool_layer2_fu_170_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (image_in_V_full_n == 1'b1))) begin
        i_reg_133 <= i_3_reg_263;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_133 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_3_reg_263 <= i_3_fu_207_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (grp_fc_layer3_fu_192_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (grp_fc_layer3_fu_192_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_out_V_read = grp_pool_layer1_fu_164_in_V_read;
    end else begin
        conv1_out_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv1_out_V_write = grp_conv_layer1_fu_144_out_V_write;
    end else begin
        conv1_out_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        conv2_out_V_read = grp_pool_layer2_fu_170_in_V_read;
    end else begin
        conv2_out_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv2_out_V_write = grp_conv_layer2_fu_154_out_V_write;
    end else begin
        conv2_out_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        fc1_out_V_read = grp_fc_layer2_fu_184_in_V_read;
    end else begin
        fc1_out_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        fc1_out_V_write = grp_fc_layer1_fu_176_out_V_write;
    end else begin
        fc1_out_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        fc2_out_V_read = grp_fc_layer3_fu_192_in_V_read;
    end else begin
        fc2_out_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        fc2_out_V_write = grp_fc_layer2_fu_184_out_V_write;
    end else begin
        fc2_out_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        fc3_out_V_write = grp_fc_layer3_fu_192_out_V_write;
    end else begin
        fc3_out_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        image_in_V_read = grp_conv_layer1_fu_144_in_V_read;
    end else begin
        image_in_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (image_in_V_full_n == 1'b1))) begin
        image_in_V_write = 1'b1;
    end else begin
        image_in_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        image_r_ce0 = 1'b1;
    end else begin
        image_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        pool1_out_V_read = grp_conv_layer2_fu_154_in_V_read;
    end else begin
        pool1_out_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        pool1_out_V_write = grp_pool_layer1_fu_164_out_V_write;
    end else begin
        pool1_out_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        pool2_out_V_read = grp_fc_layer1_fu_176_in_V_read;
    end else begin
        pool2_out_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        pool2_out_V_write = grp_pool_layer2_fu_170_out_V_write;
    end else begin
        pool2_out_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (image_in_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((grp_conv_layer1_fu_144_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_pool_layer1_fu_164_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_conv_layer2_fu_154_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_pool_layer2_fu_170_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (grp_fc_layer1_fu_176_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (grp_fc_layer2_fu_184_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (grp_fc_layer3_fu_192_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond_fu_201_p2 = ((i_reg_133 == 11'd1024) ? 1'b1 : 1'b0);

assign fc3_out_V_din = grp_fc_layer3_fu_192_out_V_din;

assign grp_conv_layer1_fu_144_ap_start = ap_reg_grp_conv_layer1_fu_144_ap_start;

assign grp_conv_layer2_fu_154_ap_start = ap_reg_grp_conv_layer2_fu_154_ap_start;

assign grp_fc_layer1_fu_176_ap_start = ap_reg_grp_fc_layer1_fu_176_ap_start;

assign grp_fc_layer2_fu_184_ap_start = ap_reg_grp_fc_layer2_fu_184_ap_start;

assign grp_fc_layer3_fu_192_ap_start = ap_reg_grp_fc_layer3_fu_192_ap_start;

assign grp_pool_layer1_fu_164_ap_start = ap_reg_grp_pool_layer1_fu_164_ap_start;

assign grp_pool_layer2_fu_170_ap_start = ap_reg_grp_pool_layer2_fu_170_ap_start;

assign i_3_fu_207_p2 = (i_reg_133 + 11'd1);

assign image_r_address0 = tmp_fu_213_p1;

assign tmp_fu_213_p1 = i_reg_133;

endmodule //nnet
