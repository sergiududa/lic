// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fc_layer1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [15:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;
input  [15:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_V_V_write;
reg in_V_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [16:0] fc_layer1_weights_V_address0;
reg    fc_layer1_weights_V_ce0;
wire  signed [9:0] fc_layer1_weights_V_q0;
reg   [16:0] fc_layer1_weights_V_address1;
reg    fc_layer1_weights_V_ce1;
wire  signed [9:0] fc_layer1_weights_V_q1;
reg    out_V_V_blk_n;
wire    ap_CS_fsm_state8;
reg    in_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond3_fu_248_p2;
wire   [9:0] j_3_fu_254_p2;
reg   [9:0] j_3_reg_559;
reg    ap_block_state2;
wire   [17:0] tmp_21_fu_284_p2;
reg   [17:0] tmp_21_reg_564;
wire  signed [26:0] tmp_17_cast_fu_290_p1;
reg  signed [26:0] tmp_17_cast_reg_572;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond2_fu_294_p2;
reg   [6:0] output_V_addr_10_reg_588;
reg   [6:0] output_V_addr_11_reg_599;
reg   [15:0] tmp_19_reg_605;
wire    ap_CS_fsm_state4;
reg   [15:0] tmp_51_1_reg_610;
reg   [6:0] output_V_addr_12_reg_620;
reg   [6:0] output_V_addr_13_reg_630;
wire   [6:0] i_8_3_fu_436_p2;
reg   [6:0] i_8_3_reg_635;
reg   [15:0] tmp_51_2_reg_640;
wire    ap_CS_fsm_state5;
reg   [15:0] tmp_51_3_reg_645;
wire   [6:0] i_fu_490_p2;
reg   [6:0] i_reg_653;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond_fu_484_p2;
reg   [6:0] output_V_address0;
reg    output_V_ce0;
reg    output_V_we0;
reg   [15:0] output_V_d0;
wire   [15:0] output_V_q0;
reg   [6:0] output_V_address1;
reg    output_V_ce1;
reg    output_V_we1;
reg   [15:0] output_V_d1;
wire   [15:0] output_V_q1;
reg   [9:0] j_reg_214;
reg    ap_block_state1;
reg   [6:0] i5_reg_225;
wire    ap_CS_fsm_state6;
reg   [6:0] i1_reg_237;
wire  signed [63:0] tmp_25_cast_fu_314_p1;
wire   [63:0] tmp_14_fu_300_p1;
wire  signed [63:0] tmp_26_cast_fu_339_p1;
wire   [63:0] tmp_46_1_fu_325_p1;
wire  signed [63:0] tmp_27_cast_fu_406_p1;
wire   [63:0] tmp_46_2_fu_392_p1;
wire  signed [63:0] tmp_28_cast_fu_431_p1;
wire   [63:0] tmp_46_3_fu_417_p1;
wire   [63:0] tmp_s_fu_496_p1;
wire   [16:0] tmp_fu_260_p3;
wire   [12:0] tmp_20_fu_272_p3;
wire   [17:0] p_shl_cast_fu_268_p1;
wire   [17:0] p_shl1_cast_fu_280_p1;
wire   [17:0] tmp_14_cast_fu_305_p1;
wire   [17:0] tmp_22_fu_309_p2;
wire   [6:0] i_8_s_fu_319_p2;
wire   [17:0] tmp_46_1_cast_fu_330_p1;
wire   [17:0] tmp_23_fu_334_p2;
wire  signed [27:0] grp_fu_524_p3;
wire  signed [27:0] grp_fu_532_p3;
wire   [6:0] i_8_1_fu_386_p2;
wire   [17:0] tmp_46_2_cast_fu_397_p1;
wire   [17:0] tmp_24_fu_401_p2;
wire   [6:0] i_8_2_fu_411_p2;
wire   [17:0] tmp_46_3_cast_fu_422_p1;
wire   [17:0] tmp_25_fu_426_p2;
wire  signed [27:0] grp_fu_540_p3;
wire  signed [27:0] grp_fu_548_p3;
wire   [0:0] tmp_i_fu_505_p2;
wire   [14:0] tmp_18_fu_501_p1;
wire   [14:0] tmp_V_fu_511_p3;
wire  signed [15:0] grp_fu_524_p0;
wire   [27:0] grp_fu_524_p2;
wire  signed [15:0] grp_fu_532_p0;
wire   [27:0] grp_fu_532_p2;
wire  signed [15:0] grp_fu_540_p0;
wire   [27:0] grp_fu_540_p2;
wire  signed [15:0] grp_fu_548_p0;
wire   [27:0] grp_fu_548_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
end

fc_layer1_fc_layeh6b #(
    .DataWidth( 10 ),
    .AddressRange( 69120 ),
    .AddressWidth( 17 ))
fc_layer1_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc_layer1_weights_V_address0),
    .ce0(fc_layer1_weights_V_ce0),
    .q0(fc_layer1_weights_V_q0),
    .address1(fc_layer1_weights_V_address1),
    .ce1(fc_layer1_weights_V_ce1),
    .q1(fc_layer1_weights_V_q1)
);

fc_layer1_output_V #(
    .DataWidth( 16 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
output_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_V_address0),
    .ce0(output_V_ce0),
    .we0(output_V_we0),
    .d0(output_V_d0),
    .q0(output_V_q0),
    .address1(output_V_address1),
    .ce1(output_V_ce1),
    .we1(output_V_we1),
    .d1(output_V_d1),
    .q1(output_V_q1)
);

nnet_mac_muladd_1bZs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
nnet_mac_muladd_1bZs_U212(
    .din0(grp_fu_524_p0),
    .din1(fc_layer1_weights_V_q0),
    .din2(grp_fu_524_p2),
    .dout(grp_fu_524_p3)
);

nnet_mac_muladd_1bZs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
nnet_mac_muladd_1bZs_U213(
    .din0(grp_fu_532_p0),
    .din1(fc_layer1_weights_V_q1),
    .din2(grp_fu_532_p2),
    .dout(grp_fu_532_p3)
);

nnet_mac_muladd_1bZs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
nnet_mac_muladd_1bZs_U214(
    .din0(grp_fu_540_p0),
    .din1(fc_layer1_weights_V_q0),
    .din2(grp_fu_540_p2),
    .dout(grp_fu_540_p3)
);

nnet_mac_muladd_1bZs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
nnet_mac_muladd_1bZs_U215(
    .din0(grp_fu_548_p0),
    .din1(fc_layer1_weights_V_q1),
    .din2(grp_fu_548_p2),
    .dout(grp_fu_548_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_484_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond3_fu_248_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (exitcond3_fu_248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_reg_237 <= 7'd0;
    end else if (((out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        i1_reg_237 <= i_reg_653;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i5_reg_225 <= i_8_3_reg_635;
    end else if ((~((exitcond3_fu_248_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (exitcond3_fu_248_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i5_reg_225 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_214 <= 10'd0;
    end else if (((exitcond2_fu_294_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_214 <= j_3_reg_559;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_8_3_reg_635 <= i_8_3_fu_436_p2;
        output_V_addr_12_reg_620[0] <= tmp_46_2_fu_392_p1[0];
output_V_addr_12_reg_620[6 : 2] <= tmp_46_2_fu_392_p1[6 : 2];
        output_V_addr_13_reg_630[6 : 2] <= tmp_46_3_fu_417_p1[6 : 2];
        tmp_19_reg_605 <= {{grp_fu_524_p3[27:12]}};
        tmp_51_1_reg_610 <= {{grp_fu_532_p3[27:12]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_653 <= i_fu_490_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond3_fu_248_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        j_3_reg_559 <= j_3_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        output_V_addr_10_reg_588 <= tmp_14_fu_300_p1;
        output_V_addr_11_reg_599[6 : 1] <= tmp_46_1_fu_325_p1[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond3_fu_248_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (exitcond3_fu_248_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_17_cast_reg_572 <= tmp_17_cast_fu_290_p1;
        tmp_21_reg_564[17 : 3] <= tmp_21_fu_284_p2[17 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_51_2_reg_640 <= {{grp_fu_540_p3[27:12]}};
        tmp_51_3_reg_645 <= {{grp_fu_548_p3[27:12]}};
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_484_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_484_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        fc_layer1_weights_V_address0 = tmp_27_cast_fu_406_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        fc_layer1_weights_V_address0 = tmp_25_cast_fu_314_p1;
    end else begin
        fc_layer1_weights_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        fc_layer1_weights_V_address1 = tmp_28_cast_fu_431_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        fc_layer1_weights_V_address1 = tmp_26_cast_fu_339_p1;
    end else begin
        fc_layer1_weights_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        fc_layer1_weights_V_ce0 = 1'b1;
    end else begin
        fc_layer1_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        fc_layer1_weights_V_ce1 = 1'b1;
    end else begin
        fc_layer1_weights_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_fu_248_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((exitcond3_fu_248_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (exitcond3_fu_248_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_V_address0 = output_V_addr_13_reg_630;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_address0 = output_V_addr_11_reg_599;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_address0 = tmp_46_3_fu_417_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_V_address0 = tmp_14_fu_300_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        output_V_address0 = 64'd0;
    end else begin
        output_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_V_address1 = tmp_s_fu_496_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_V_address1 = output_V_addr_12_reg_620;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_address1 = output_V_addr_10_reg_588;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_address1 = tmp_46_2_fu_392_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_V_address1 = tmp_46_1_fu_325_p1;
    end else begin
        output_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        output_V_ce1 = 1'b1;
    end else begin
        output_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_V_d0 = tmp_51_3_reg_645;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_d0 = tmp_51_1_reg_610;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        output_V_d0 = 16'd0;
    end else begin
        output_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_V_d1 = tmp_51_2_reg_640;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_d1 = tmp_19_reg_605;
    end else begin
        output_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        output_V_we1 = 1'b1;
    end else begin
        output_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((exitcond3_fu_248_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (exitcond3_fu_248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if ((~((exitcond3_fu_248_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (exitcond3_fu_248_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond2_fu_294_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_484_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((exitcond3_fu_248_p2 == 1'd0) & (in_V_V_empty_n == 1'b0));
end

assign exitcond2_fu_294_p2 = ((i5_reg_225 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond3_fu_248_p2 = ((j_reg_214 == 10'd576) ? 1'b1 : 1'b0);

assign exitcond_fu_484_p2 = ((i1_reg_237 == 7'd120) ? 1'b1 : 1'b0);

assign grp_fu_524_p0 = tmp_17_cast_reg_572;

assign grp_fu_524_p2 = {{output_V_q0}, {12'd0}};

assign grp_fu_532_p0 = tmp_17_cast_reg_572;

assign grp_fu_532_p2 = {{output_V_q1}, {12'd0}};

assign grp_fu_540_p0 = tmp_17_cast_reg_572;

assign grp_fu_540_p2 = {{output_V_q1}, {12'd0}};

assign grp_fu_548_p0 = tmp_17_cast_reg_572;

assign grp_fu_548_p2 = {{output_V_q0}, {12'd0}};

assign i_8_1_fu_386_p2 = (i5_reg_225 | 7'd2);

assign i_8_2_fu_411_p2 = (i5_reg_225 | 7'd3);

assign i_8_3_fu_436_p2 = (i5_reg_225 + 7'd4);

assign i_8_s_fu_319_p2 = (i5_reg_225 | 7'd1);

assign i_fu_490_p2 = (i1_reg_237 + 7'd1);

assign j_3_fu_254_p2 = (j_reg_214 + 10'd1);

assign out_V_V_din = tmp_V_fu_511_p3;

assign p_shl1_cast_fu_280_p1 = tmp_20_fu_272_p3;

assign p_shl_cast_fu_268_p1 = tmp_fu_260_p3;

assign tmp_14_cast_fu_305_p1 = i5_reg_225;

assign tmp_14_fu_300_p1 = i5_reg_225;

assign tmp_17_cast_fu_290_p1 = $signed(in_V_V_dout);

assign tmp_18_fu_501_p1 = output_V_q1[14:0];

assign tmp_20_fu_272_p3 = {{j_reg_214}, {3'd0}};

assign tmp_21_fu_284_p2 = (p_shl_cast_fu_268_p1 - p_shl1_cast_fu_280_p1);

assign tmp_22_fu_309_p2 = (tmp_14_cast_fu_305_p1 + tmp_21_reg_564);

assign tmp_23_fu_334_p2 = (tmp_46_1_cast_fu_330_p1 + tmp_21_reg_564);

assign tmp_24_fu_401_p2 = (tmp_46_2_cast_fu_397_p1 + tmp_21_reg_564);

assign tmp_25_cast_fu_314_p1 = $signed(tmp_22_fu_309_p2);

assign tmp_25_fu_426_p2 = (tmp_46_3_cast_fu_422_p1 + tmp_21_reg_564);

assign tmp_26_cast_fu_339_p1 = $signed(tmp_23_fu_334_p2);

assign tmp_27_cast_fu_406_p1 = $signed(tmp_24_fu_401_p2);

assign tmp_28_cast_fu_431_p1 = $signed(tmp_25_fu_426_p2);

assign tmp_46_1_cast_fu_330_p1 = i_8_s_fu_319_p2;

assign tmp_46_1_fu_325_p1 = i_8_s_fu_319_p2;

assign tmp_46_2_cast_fu_397_p1 = i_8_1_fu_386_p2;

assign tmp_46_2_fu_392_p1 = i_8_1_fu_386_p2;

assign tmp_46_3_cast_fu_422_p1 = i_8_2_fu_411_p2;

assign tmp_46_3_fu_417_p1 = i_8_2_fu_411_p2;

assign tmp_V_fu_511_p3 = ((tmp_i_fu_505_p2[0:0] === 1'b1) ? tmp_18_fu_501_p1 : 15'd0);

assign tmp_fu_260_p3 = {{j_reg_214}, {7'd0}};

assign tmp_i_fu_505_p2 = (($signed(output_V_q1) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign tmp_s_fu_496_p1 = i1_reg_237;

always @ (posedge ap_clk) begin
    tmp_21_reg_564[2:0] <= 3'b000;
    output_V_addr_11_reg_599[0] <= 1'b1;
    output_V_addr_12_reg_620[1] <= 1'b1;
    output_V_addr_13_reg_630[1:0] <= 2'b11;
end

endmodule //fc_layer1
