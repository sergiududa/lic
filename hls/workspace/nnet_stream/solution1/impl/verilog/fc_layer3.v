// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fc_layer3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [15:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;
input  [15:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_V_V_write;
reg in_V_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] fc_layer3_weights_V_address0;
reg    fc_layer3_weights_V_ce0;
wire   [11:0] fc_layer3_weights_V_q0;
reg   [9:0] fc_layer3_weights_V_address1;
reg    fc_layer3_weights_V_ce1;
wire   [11:0] fc_layer3_weights_V_q1;
reg    out_V_V_blk_n;
wire    ap_CS_fsm_state9;
reg    in_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond1_fu_258_p2;
reg  signed [11:0] reg_250;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state6;
reg  signed [11:0] reg_254;
wire   [6:0] j_1_fu_264_p2;
reg   [6:0] j_1_reg_574;
reg    ap_block_state2;
wire   [10:0] tmp_11_fu_294_p2;
reg   [10:0] tmp_11_reg_579;
wire  signed [27:0] tmp_2_fu_300_p1;
reg  signed [27:0] tmp_2_reg_587;
wire    ap_CS_fsm_state3;
wire   [3:0] i_4_s_fu_318_p2;
reg   [3:0] i_4_s_reg_600;
reg   [3:0] output_V_addr_2_reg_610;
reg   [3:0] output_V_addr_3_reg_616;
wire   [3:0] i_4_1_fu_391_p2;
reg   [3:0] i_4_1_reg_622;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond16_2_fu_397_p2;
wire   [2:0] i_4_2_fu_421_p2;
reg   [2:0] i_4_2_reg_635;
wire   [3:0] i_4_3_fu_441_p2;
reg   [3:0] i_4_3_reg_645;
reg   [3:0] output_V_addr_4_reg_650;
reg   [3:0] output_V_addr_5_reg_655;
wire   [3:0] i_fu_505_p2;
reg   [3:0] i_reg_663;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond_fu_499_p2;
reg   [3:0] output_V_address0;
reg    output_V_ce0;
reg    output_V_we0;
reg   [15:0] output_V_d0;
wire   [15:0] output_V_q0;
reg   [3:0] output_V_address1;
reg    output_V_ce1;
reg    output_V_we1;
reg   [15:0] output_V_d1;
wire   [15:0] output_V_q1;
reg   [6:0] j_reg_216;
reg    ap_block_state1;
reg   [3:0] i3_reg_227;
wire    ap_CS_fsm_state7;
reg   [3:0] i1_reg_239;
wire   [63:0] tmp_12_cast_fu_313_p1;
wire   [63:0] tmp_13_cast_fu_333_p1;
wire   [63:0] tmp_3_fu_338_p1;
wire   [63:0] tmp_28_1_fu_343_p1;
wire   [63:0] tmp_14_cast_fu_412_p1;
wire   [63:0] tmp_15_cast_fu_436_p1;
wire   [63:0] tmp_28_2_fu_447_p1;
wire   [63:0] tmp_28_3_fu_451_p1;
wire   [63:0] tmp_s_fu_511_p1;
wire   [9:0] tmp_fu_270_p3;
wire   [7:0] tmp_6_fu_282_p3;
wire   [10:0] p_shl1_cast_fu_290_p1;
wire   [10:0] p_shl_cast_fu_278_p1;
wire   [10:0] tmp_3_cast_fu_304_p1;
wire   [10:0] tmp_12_fu_308_p2;
wire   [10:0] tmp_28_1_cast_fu_324_p1;
wire   [10:0] tmp_13_fu_328_p2;
wire  signed [27:0] grp_fu_539_p3;
wire  signed [27:0] grp_fu_547_p3;
wire   [10:0] tmp_28_2_cast_fu_403_p1;
wire   [10:0] tmp_14_fu_407_p2;
wire   [2:0] tmp_17_fu_417_p1;
wire   [10:0] tmp_28_3_cast_fu_427_p1;
wire   [10:0] tmp_15_fu_431_p2;
wire  signed [27:0] grp_fu_555_p3;
wire  signed [27:0] grp_fu_563_p3;
wire   [0:0] tmp_i_fu_520_p2;
wire   [14:0] tmp_16_fu_516_p1;
wire   [14:0] tmp_V_fu_526_p3;
wire  signed [15:0] grp_fu_539_p0;
wire   [27:0] grp_fu_539_p2;
wire  signed [15:0] grp_fu_547_p0;
wire   [27:0] grp_fu_547_p2;
wire  signed [15:0] grp_fu_555_p1;
wire   [27:0] grp_fu_555_p2;
wire  signed [15:0] grp_fu_563_p1;
wire   [27:0] grp_fu_563_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
end

fc_layer3_fc_layeh8b #(
    .DataWidth( 12 ),
    .AddressRange( 840 ),
    .AddressWidth( 10 ))
fc_layer3_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc_layer3_weights_V_address0),
    .ce0(fc_layer3_weights_V_ce0),
    .q0(fc_layer3_weights_V_q0),
    .address1(fc_layer3_weights_V_address1),
    .ce1(fc_layer3_weights_V_ce1),
    .q1(fc_layer3_weights_V_q1)
);

fc_layer3_output_V #(
    .DataWidth( 16 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
output_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_V_address0),
    .ce0(output_V_ce0),
    .we0(output_V_we0),
    .d0(output_V_d0),
    .q0(output_V_q0),
    .address1(output_V_address1),
    .ce1(output_V_ce1),
    .we1(output_V_we1),
    .d1(output_V_d1),
    .q1(output_V_q1)
);

nnet_mac_muladd_1h9b #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
nnet_mac_muladd_1h9b_U228(
    .din0(grp_fu_539_p0),
    .din1(reg_250),
    .din2(grp_fu_539_p2),
    .dout(grp_fu_539_p3)
);

nnet_mac_muladd_1h9b #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
nnet_mac_muladd_1h9b_U229(
    .din0(grp_fu_547_p0),
    .din1(reg_254),
    .din2(grp_fu_547_p2),
    .dout(grp_fu_547_p3)
);

nnet_mac_muladd_1iab #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
nnet_mac_muladd_1iab_U230(
    .din0(reg_250),
    .din1(grp_fu_555_p1),
    .din2(grp_fu_555_p2),
    .dout(grp_fu_555_p3)
);

nnet_mac_muladd_1iab #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
nnet_mac_muladd_1iab_U231(
    .din0(reg_254),
    .din1(grp_fu_563_p1),
    .din2(grp_fu_563_p2),
    .dout(grp_fu_563_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond_fu_499_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond1_fu_258_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (exitcond1_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_reg_239 <= 4'd0;
    end else if (((out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        i1_reg_239 <= i_reg_663;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i3_reg_227 <= i_4_3_reg_645;
    end else if ((~((exitcond1_fu_258_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (exitcond1_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i3_reg_227 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_216 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond16_2_fu_397_p2 == 1'd1))) begin
        j_reg_216 <= j_1_reg_574;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_4_1_reg_622[0] <= i_4_1_fu_391_p2[0];
i_4_1_reg_622[3 : 2] <= i_4_1_fu_391_p2[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond16_2_fu_397_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_4_2_reg_635[2] <= i_4_2_fu_421_p2[2];
        i_4_3_reg_645 <= i_4_3_fu_441_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_4_s_reg_600[3 : 1] <= i_4_s_fu_318_p2[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_663 <= i_fu_505_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond1_fu_258_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        j_1_reg_574 <= j_1_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_addr_2_reg_610 <= tmp_3_fu_338_p1;
        output_V_addr_3_reg_616[3 : 1] <= tmp_28_1_fu_343_p1[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_V_addr_4_reg_650[0] <= tmp_28_2_fu_447_p1[0];
output_V_addr_4_reg_650[3 : 2] <= tmp_28_2_fu_447_p1[3 : 2];
        output_V_addr_5_reg_655[2] <= tmp_28_3_fu_451_p1[2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_250 <= fc_layer3_weights_V_q0;
        reg_254 <= fc_layer3_weights_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond1_fu_258_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (exitcond1_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_11_reg_579[10 : 1] <= tmp_11_fu_294_p2[10 : 1];
        tmp_2_reg_587 <= tmp_2_fu_300_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond_fu_499_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond_fu_499_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        fc_layer3_weights_V_address0 = tmp_14_cast_fu_412_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        fc_layer3_weights_V_address0 = tmp_12_cast_fu_313_p1;
    end else begin
        fc_layer3_weights_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        fc_layer3_weights_V_address1 = tmp_15_cast_fu_436_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        fc_layer3_weights_V_address1 = tmp_13_cast_fu_333_p1;
    end else begin
        fc_layer3_weights_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        fc_layer3_weights_V_ce0 = 1'b1;
    end else begin
        fc_layer3_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        fc_layer3_weights_V_ce1 = 1'b1;
    end else begin
        fc_layer3_weights_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((exitcond1_fu_258_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (exitcond1_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_V_address0 = output_V_addr_5_reg_655;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_V_address0 = tmp_28_3_fu_451_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_address0 = output_V_addr_3_reg_616;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_address0 = tmp_3_fu_338_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        output_V_address0 = 64'd0;
    end else begin
        output_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_V_address1 = tmp_s_fu_511_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_V_address1 = output_V_addr_4_reg_650;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_V_address1 = tmp_28_2_fu_447_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_address1 = output_V_addr_2_reg_610;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_address1 = tmp_28_1_fu_343_p1;
    end else begin
        output_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        output_V_ce1 = 1'b1;
    end else begin
        output_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_V_d0 = {{grp_fu_563_p3[27:12]}};
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_d0 = {{grp_fu_547_p3[27:12]}};
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        output_V_d0 = 16'd0;
    end else begin
        output_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_V_d1 = {{grp_fu_555_p3[27:12]}};
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_d1 = {{grp_fu_539_p3[27:12]}};
    end else begin
        output_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        output_V_we1 = 1'b1;
    end else begin
        output_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((exitcond1_fu_258_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (exitcond1_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if ((~((exitcond1_fu_258_p2 == 1'd0) & (in_V_V_empty_n == 1'b0)) & (exitcond1_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond16_2_fu_397_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond_fu_499_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((exitcond1_fu_258_p2 == 1'd0) & (in_V_V_empty_n == 1'b0));
end

assign exitcond16_2_fu_397_p2 = ((i_4_1_fu_391_p2 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond1_fu_258_p2 = ((j_reg_216 == 7'd84) ? 1'b1 : 1'b0);

assign exitcond_fu_499_p2 = ((i1_reg_239 == 4'd10) ? 1'b1 : 1'b0);

assign grp_fu_539_p0 = tmp_2_reg_587;

assign grp_fu_539_p2 = {{output_V_q0}, {12'd0}};

assign grp_fu_547_p0 = tmp_2_reg_587;

assign grp_fu_547_p2 = {{output_V_q1}, {12'd0}};

assign grp_fu_555_p1 = tmp_2_reg_587;

assign grp_fu_555_p2 = {{output_V_q1}, {12'd0}};

assign grp_fu_563_p1 = tmp_2_reg_587;

assign grp_fu_563_p2 = {{output_V_q0}, {12'd0}};

assign i_4_1_fu_391_p2 = (i3_reg_227 | 4'd2);

assign i_4_2_fu_421_p2 = (tmp_17_fu_417_p1 | 3'd3);

assign i_4_3_fu_441_p2 = (4'd4 + i3_reg_227);

assign i_4_s_fu_318_p2 = (i3_reg_227 | 4'd1);

assign i_fu_505_p2 = (i1_reg_239 + 4'd1);

assign j_1_fu_264_p2 = (j_reg_216 + 7'd1);

assign out_V_V_din = tmp_V_fu_526_p3;

assign p_shl1_cast_fu_290_p1 = tmp_6_fu_282_p3;

assign p_shl_cast_fu_278_p1 = tmp_fu_270_p3;

assign tmp_11_fu_294_p2 = (p_shl1_cast_fu_290_p1 + p_shl_cast_fu_278_p1);

assign tmp_12_cast_fu_313_p1 = tmp_12_fu_308_p2;

assign tmp_12_fu_308_p2 = (tmp_3_cast_fu_304_p1 + tmp_11_reg_579);

assign tmp_13_cast_fu_333_p1 = tmp_13_fu_328_p2;

assign tmp_13_fu_328_p2 = (tmp_28_1_cast_fu_324_p1 + tmp_11_reg_579);

assign tmp_14_cast_fu_412_p1 = tmp_14_fu_407_p2;

assign tmp_14_fu_407_p2 = (tmp_11_reg_579 + tmp_28_2_cast_fu_403_p1);

assign tmp_15_cast_fu_436_p1 = tmp_15_fu_431_p2;

assign tmp_15_fu_431_p2 = (tmp_11_reg_579 + tmp_28_3_cast_fu_427_p1);

assign tmp_16_fu_516_p1 = output_V_q1[14:0];

assign tmp_17_fu_417_p1 = i3_reg_227[2:0];

assign tmp_28_1_cast_fu_324_p1 = i_4_s_fu_318_p2;

assign tmp_28_1_fu_343_p1 = i_4_s_reg_600;

assign tmp_28_2_cast_fu_403_p1 = i_4_1_fu_391_p2;

assign tmp_28_2_fu_447_p1 = i_4_1_reg_622;

assign tmp_28_3_cast_fu_427_p1 = i_4_2_fu_421_p2;

assign tmp_28_3_fu_451_p1 = i_4_2_reg_635;

assign tmp_2_fu_300_p1 = $signed(in_V_V_dout);

assign tmp_3_cast_fu_304_p1 = i3_reg_227;

assign tmp_3_fu_338_p1 = i3_reg_227;

assign tmp_6_fu_282_p3 = {{j_reg_216}, {1'd0}};

assign tmp_V_fu_526_p3 = ((tmp_i_fu_520_p2[0:0] === 1'b1) ? tmp_16_fu_516_p1 : 15'd0);

assign tmp_fu_270_p3 = {{j_reg_216}, {3'd0}};

assign tmp_i_fu_520_p2 = (($signed(output_V_q1) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign tmp_s_fu_511_p1 = i1_reg_239;

always @ (posedge ap_clk) begin
    tmp_11_reg_579[0] <= 1'b0;
    i_4_s_reg_600[0] <= 1'b1;
    output_V_addr_3_reg_616[0] <= 1'b1;
    i_4_1_reg_622[1] <= 1'b1;
    i_4_2_reg_635[1:0] <= 2'b11;
    output_V_addr_4_reg_650[1] <= 1'b1;
    output_V_addr_5_reg_655[1:0] <= 2'b11;
    output_V_addr_5_reg_655[3] <= 1'b0;
end

endmodule //fc_layer3
