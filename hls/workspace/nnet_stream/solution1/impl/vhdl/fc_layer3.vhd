-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fc_layer3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC );
end;


architecture behav of fc_layer3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fc_layer3_weights_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal fc_layer3_weights_V_ce0 : STD_LOGIC;
    signal fc_layer3_weights_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal fc_layer3_weights_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal fc_layer3_weights_V_ce1 : STD_LOGIC;
    signal fc_layer3_weights_V_q1 : STD_LOGIC_VECTOR (11 downto 0);
    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_250 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal reg_254 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_1_fu_264_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_574 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_11_fu_294_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_reg_579 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_fu_300_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_2_reg_587 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_4_s_fu_318_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_s_reg_600 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_addr_2_reg_610 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_addr_3_reg_616 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_1_fu_391_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_1_reg_622 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond16_2_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_2_fu_421_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_2_reg_635 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_3_fu_441_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_3_reg_645 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_addr_4_reg_650 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_addr_5_reg_655 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_505_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_663 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_ce0 : STD_LOGIC;
    signal output_V_we0 : STD_LOGIC;
    signal output_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_ce1 : STD_LOGIC;
    signal output_V_we1 : STD_LOGIC;
    signal output_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_V_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_reg_216 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i3_reg_227 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i1_reg_239 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_cast_fu_313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_cast_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_1_fu_343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_cast_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_cast_fu_436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_2_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_3_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_270_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_282_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_cast_fu_290_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_278_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_cast_fu_304_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_12_fu_308_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_28_1_cast_fu_324_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_fu_328_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_539_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_547_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_28_2_cast_fu_403_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_14_fu_407_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_17_fu_417_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_28_3_cast_fu_427_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_15_fu_431_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_555_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_563_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_i_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_516_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_V_fu_526_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_539_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_539_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_547_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_547_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_555_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_555_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_563_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_563_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component nnet_mac_muladd_1h9b IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component nnet_mac_muladd_1iab IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component fc_layer3_fc_layeh8b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component fc_layer3_output_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    fc_layer3_weights_V_U : component fc_layer3_fc_layeh8b
    generic map (
        DataWidth => 12,
        AddressRange => 840,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer3_weights_V_address0,
        ce0 => fc_layer3_weights_V_ce0,
        q0 => fc_layer3_weights_V_q0,
        address1 => fc_layer3_weights_V_address1,
        ce1 => fc_layer3_weights_V_ce1,
        q1 => fc_layer3_weights_V_q1);

    output_V_U : component fc_layer3_output_V
    generic map (
        DataWidth => 16,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_V_address0,
        ce0 => output_V_ce0,
        we0 => output_V_we0,
        d0 => output_V_d0,
        q0 => output_V_q0,
        address1 => output_V_address1,
        ce1 => output_V_ce1,
        we1 => output_V_we1,
        d1 => output_V_d1,
        q1 => output_V_q1);

    nnet_mac_muladd_1h9b_U228 : component nnet_mac_muladd_1h9b
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        din0 => grp_fu_539_p0,
        din1 => reg_250,
        din2 => grp_fu_539_p2,
        dout => grp_fu_539_p3);

    nnet_mac_muladd_1h9b_U229 : component nnet_mac_muladd_1h9b
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        din0 => grp_fu_547_p0,
        din1 => reg_254,
        din2 => grp_fu_547_p2,
        dout => grp_fu_547_p3);

    nnet_mac_muladd_1iab_U230 : component nnet_mac_muladd_1iab
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        din0 => reg_250,
        din1 => grp_fu_555_p1,
        din2 => grp_fu_555_p2,
        dout => grp_fu_555_p3);

    nnet_mac_muladd_1iab_U231 : component nnet_mac_muladd_1iab
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        din0 => reg_254,
        din1 => grp_fu_563_p1,
        din2 => grp_fu_563_p2,
        dout => grp_fu_563_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_fu_499_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond1_fu_258_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond1_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_reg_239 <= ap_const_lv4_0;
            elsif (((out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i1_reg_239 <= i_reg_663;
            end if; 
        end if;
    end process;

    i3_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i3_reg_227 <= i_4_3_reg_645;
            elsif ((not(((exitcond1_fu_258_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond1_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i3_reg_227 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_reg_216 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond16_2_fu_397_p2 = ap_const_lv1_1))) then 
                j_reg_216 <= j_1_reg_574;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    i_4_1_reg_622(0) <= i_4_1_fu_391_p2(0);    i_4_1_reg_622(3 downto 2) <= i_4_1_fu_391_p2(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond16_2_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    i_4_2_reg_635(2) <= i_4_2_fu_421_p2(2);
                i_4_3_reg_645 <= i_4_3_fu_441_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    i_4_s_reg_600(3 downto 1) <= i_4_s_fu_318_p2(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_reg_663 <= i_fu_505_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond1_fu_258_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                j_1_reg_574 <= j_1_fu_264_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                output_V_addr_2_reg_610 <= tmp_3_fu_338_p1(4 - 1 downto 0);
                    output_V_addr_3_reg_616(3 downto 1) <= tmp_28_1_fu_343_p1(4 - 1 downto 0)(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    output_V_addr_4_reg_650(0) <= tmp_28_2_fu_447_p1(4 - 1 downto 0)(0);    output_V_addr_4_reg_650(3 downto 2) <= tmp_28_2_fu_447_p1(4 - 1 downto 0)(3 downto 2);
                    output_V_addr_5_reg_655(2) <= tmp_28_3_fu_451_p1(4 - 1 downto 0)(2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_250 <= fc_layer3_weights_V_q0;
                reg_254 <= fc_layer3_weights_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond1_fu_258_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond1_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_11_reg_579(10 downto 1) <= tmp_11_fu_294_p2(10 downto 1);
                tmp_2_reg_587 <= tmp_2_fu_300_p1;
            end if;
        end if;
    end process;
    tmp_11_reg_579(0) <= '0';
    i_4_s_reg_600(0) <= '1';
    output_V_addr_3_reg_616(0) <= '1';
    i_4_1_reg_622(1) <= '1';
    i_4_2_reg_635(1 downto 0) <= "11";
    output_V_addr_4_reg_650(1) <= '1';
    output_V_addr_5_reg_655(1 downto 0) <= "11";
    output_V_addr_5_reg_655(3) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, out_V_V_full_n, in_V_V_empty_n, ap_CS_fsm_state9, ap_CS_fsm_state2, exitcond1_fu_258_p2, ap_CS_fsm_state5, exitcond16_2_fu_397_p2, ap_CS_fsm_state8, exitcond_fu_499_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((exitcond1_fu_258_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond1_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif ((not(((exitcond1_fu_258_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond1_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond16_2_fu_397_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_fu_499_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(in_V_V_empty_n, exitcond1_fu_258_p2)
    begin
                ap_block_state2 <= ((exitcond1_fu_258_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state8, exitcond_fu_499_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_fu_499_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, exitcond_fu_499_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_fu_499_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond16_2_fu_397_p2 <= "1" when (i_4_1_fu_391_p2 = ap_const_lv4_A) else "0";
    exitcond1_fu_258_p2 <= "1" when (j_reg_216 = ap_const_lv7_54) else "0";
    exitcond_fu_499_p2 <= "1" when (i1_reg_239 = ap_const_lv4_A) else "0";

    fc_layer3_weights_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, tmp_12_cast_fu_313_p1, tmp_14_cast_fu_412_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fc_layer3_weights_V_address0 <= tmp_14_cast_fu_412_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_layer3_weights_V_address0 <= tmp_12_cast_fu_313_p1(10 - 1 downto 0);
        else 
            fc_layer3_weights_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    fc_layer3_weights_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, tmp_13_cast_fu_333_p1, tmp_15_cast_fu_436_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fc_layer3_weights_V_address1 <= tmp_15_cast_fu_436_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc_layer3_weights_V_address1 <= tmp_13_cast_fu_333_p1(10 - 1 downto 0);
        else 
            fc_layer3_weights_V_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    fc_layer3_weights_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            fc_layer3_weights_V_ce0 <= ap_const_logic_1;
        else 
            fc_layer3_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer3_weights_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            fc_layer3_weights_V_ce1 <= ap_const_logic_1;
        else 
            fc_layer3_weights_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_539_p0 <= tmp_2_reg_587(16 - 1 downto 0);
    grp_fu_539_p2 <= (output_V_q0 & ap_const_lv12_0);
    grp_fu_547_p0 <= tmp_2_reg_587(16 - 1 downto 0);
    grp_fu_547_p2 <= (output_V_q1 & ap_const_lv12_0);
    grp_fu_555_p1 <= tmp_2_reg_587(16 - 1 downto 0);
    grp_fu_555_p2 <= (output_V_q1 & ap_const_lv12_0);
    grp_fu_563_p1 <= tmp_2_reg_587(16 - 1 downto 0);
    grp_fu_563_p2 <= (output_V_q0 & ap_const_lv12_0);
    i_4_1_fu_391_p2 <= (i3_reg_227 or ap_const_lv4_2);
    i_4_2_fu_421_p2 <= (tmp_17_fu_417_p1 or ap_const_lv3_3);
    i_4_3_fu_441_p2 <= std_logic_vector(unsigned(ap_const_lv4_4) + unsigned(i3_reg_227));
    i_4_s_fu_318_p2 <= (i3_reg_227 or ap_const_lv4_1);
    i_fu_505_p2 <= std_logic_vector(unsigned(i1_reg_239) + unsigned(ap_const_lv4_1));

    in_V_V_blk_n_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_state2, exitcond1_fu_258_p2)
    begin
        if (((exitcond1_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_state2, exitcond1_fu_258_p2)
    begin
        if ((not(((exitcond1_fu_258_p2 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0))) and (exitcond1_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_264_p2 <= std_logic_vector(unsigned(j_reg_216) + unsigned(ap_const_lv7_1));

    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_526_p3),16));

    out_V_V_write_assign_proc : process(out_V_V_full_n, ap_CS_fsm_state9)
    begin
        if (((out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    output_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state6, output_V_addr_3_reg_616, ap_CS_fsm_state5, output_V_addr_5_reg_655, ap_CS_fsm_state7, tmp_3_fu_338_p1, tmp_28_3_fu_451_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_address0 <= output_V_addr_5_reg_655;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_V_address0 <= tmp_28_3_fu_451_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_V_address0 <= output_V_addr_3_reg_616;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_V_address0 <= tmp_3_fu_338_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            output_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            output_V_address0 <= "XXXX";
        end if; 
    end process;


    output_V_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, output_V_addr_2_reg_610, ap_CS_fsm_state5, output_V_addr_4_reg_650, ap_CS_fsm_state8, ap_CS_fsm_state7, tmp_28_1_fu_343_p1, tmp_28_2_fu_447_p1, tmp_s_fu_511_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_V_address1 <= tmp_s_fu_511_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_address1 <= output_V_addr_4_reg_650;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_V_address1 <= tmp_28_2_fu_447_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_V_address1 <= output_V_addr_2_reg_610;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_V_address1 <= tmp_28_1_fu_343_p1(4 - 1 downto 0);
        else 
            output_V_address1 <= "XXXX";
        end if; 
    end process;


    output_V_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_V_ce1 <= ap_const_logic_1;
        else 
            output_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state7, grp_fu_547_p3, grp_fu_563_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_d0 <= grp_fu_563_p3(27 downto 12);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_V_d0 <= grp_fu_547_p3(27 downto 12);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            output_V_d0 <= ap_const_lv16_0;
        else 
            output_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_V_d1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, grp_fu_539_p3, grp_fu_555_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_d1 <= grp_fu_555_p3(27 downto 12);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_V_d1 <= grp_fu_539_p3(27 downto 12);
        else 
            output_V_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_V_we0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_V_we1 <= ap_const_logic_1;
        else 
            output_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_282_p3),11));
    p_shl_cast_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_270_p3),11));
    tmp_11_fu_294_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_290_p1) + unsigned(p_shl_cast_fu_278_p1));
    tmp_12_cast_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_308_p2),64));
    tmp_12_fu_308_p2 <= std_logic_vector(unsigned(tmp_3_cast_fu_304_p1) + unsigned(tmp_11_reg_579));
    tmp_13_cast_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_328_p2),64));
    tmp_13_fu_328_p2 <= std_logic_vector(unsigned(tmp_28_1_cast_fu_324_p1) + unsigned(tmp_11_reg_579));
    tmp_14_cast_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_407_p2),64));
    tmp_14_fu_407_p2 <= std_logic_vector(unsigned(tmp_11_reg_579) + unsigned(tmp_28_2_cast_fu_403_p1));
    tmp_15_cast_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_431_p2),64));
    tmp_15_fu_431_p2 <= std_logic_vector(unsigned(tmp_11_reg_579) + unsigned(tmp_28_3_cast_fu_427_p1));
    tmp_16_fu_516_p1 <= output_V_q1(15 - 1 downto 0);
    tmp_17_fu_417_p1 <= i3_reg_227(3 - 1 downto 0);
    tmp_28_1_cast_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_s_fu_318_p2),11));
    tmp_28_1_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_s_reg_600),64));
    tmp_28_2_cast_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_1_fu_391_p2),11));
    tmp_28_2_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_1_reg_622),64));
    tmp_28_3_cast_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_2_fu_421_p2),11));
    tmp_28_3_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_2_reg_635),64));
        tmp_2_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in_V_V_dout),28));

    tmp_3_cast_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_reg_227),11));
    tmp_3_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_reg_227),64));
    tmp_6_fu_282_p3 <= (j_reg_216 & ap_const_lv1_0);
    tmp_V_fu_526_p3 <= 
        tmp_16_fu_516_p1 when (tmp_i_fu_520_p2(0) = '1') else 
        ap_const_lv15_0;
    tmp_fu_270_p3 <= (j_reg_216 & ap_const_lv3_0);
    tmp_i_fu_520_p2 <= "1" when (signed(output_V_q1) > signed(ap_const_lv16_0)) else "0";
    tmp_s_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_239),64));
end behav;
