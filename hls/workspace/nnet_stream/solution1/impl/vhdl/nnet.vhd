-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nnet is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fc3_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    fc3_out_V_full_n : IN STD_LOGIC;
    fc3_out_V_write : OUT STD_LOGIC );
end;


architecture behav of nnet is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "nnet,hls_ip_2017_4_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.159000,HLS_SYN_LAT=3317931,HLS_SYN_TPT=none,HLS_SYN_MEM=2088,HLS_SYN_DSP=25,HLS_SYN_FF=41747,HLS_SYN_LUT=50573}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal image_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal image_r_ce0 : STD_LOGIC;
    signal image_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_fu_207_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_3_reg_263 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_layer1_fu_144_ap_start : STD_LOGIC;
    signal grp_conv_layer1_fu_144_ap_done : STD_LOGIC;
    signal grp_conv_layer1_fu_144_ap_idle : STD_LOGIC;
    signal grp_conv_layer1_fu_144_ap_ready : STD_LOGIC;
    signal grp_conv_layer1_fu_144_out_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer1_fu_144_out_V_write : STD_LOGIC;
    signal grp_conv_layer1_fu_144_in_V_read : STD_LOGIC;
    signal grp_conv_layer2_fu_154_ap_start : STD_LOGIC;
    signal grp_conv_layer2_fu_154_ap_done : STD_LOGIC;
    signal grp_conv_layer2_fu_154_ap_idle : STD_LOGIC;
    signal grp_conv_layer2_fu_154_ap_ready : STD_LOGIC;
    signal grp_conv_layer2_fu_154_out_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_layer2_fu_154_out_V_write : STD_LOGIC;
    signal grp_conv_layer2_fu_154_in_V_read : STD_LOGIC;
    signal grp_pool_layer1_fu_164_ap_start : STD_LOGIC;
    signal grp_pool_layer1_fu_164_ap_done : STD_LOGIC;
    signal grp_pool_layer1_fu_164_ap_idle : STD_LOGIC;
    signal grp_pool_layer1_fu_164_ap_ready : STD_LOGIC;
    signal grp_pool_layer1_fu_164_out_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pool_layer1_fu_164_out_V_write : STD_LOGIC;
    signal grp_pool_layer1_fu_164_in_V_read : STD_LOGIC;
    signal grp_pool_layer2_fu_170_ap_start : STD_LOGIC;
    signal grp_pool_layer2_fu_170_ap_done : STD_LOGIC;
    signal grp_pool_layer2_fu_170_ap_idle : STD_LOGIC;
    signal grp_pool_layer2_fu_170_ap_ready : STD_LOGIC;
    signal grp_pool_layer2_fu_170_out_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pool_layer2_fu_170_out_V_write : STD_LOGIC;
    signal grp_pool_layer2_fu_170_in_V_read : STD_LOGIC;
    signal grp_fc_layer1_fu_176_ap_start : STD_LOGIC;
    signal grp_fc_layer1_fu_176_ap_done : STD_LOGIC;
    signal grp_fc_layer1_fu_176_ap_idle : STD_LOGIC;
    signal grp_fc_layer1_fu_176_ap_ready : STD_LOGIC;
    signal grp_fc_layer1_fu_176_out_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_layer1_fu_176_out_V_write : STD_LOGIC;
    signal grp_fc_layer1_fu_176_in_V_read : STD_LOGIC;
    signal grp_fc_layer2_fu_184_ap_start : STD_LOGIC;
    signal grp_fc_layer2_fu_184_ap_done : STD_LOGIC;
    signal grp_fc_layer2_fu_184_ap_idle : STD_LOGIC;
    signal grp_fc_layer2_fu_184_ap_ready : STD_LOGIC;
    signal grp_fc_layer2_fu_184_out_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_layer2_fu_184_out_V_write : STD_LOGIC;
    signal grp_fc_layer2_fu_184_in_V_read : STD_LOGIC;
    signal grp_fc_layer3_fu_192_ap_start : STD_LOGIC;
    signal grp_fc_layer3_fu_192_ap_done : STD_LOGIC;
    signal grp_fc_layer3_fu_192_ap_idle : STD_LOGIC;
    signal grp_fc_layer3_fu_192_ap_ready : STD_LOGIC;
    signal grp_fc_layer3_fu_192_out_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_layer3_fu_192_out_V_write : STD_LOGIC;
    signal grp_fc_layer3_fu_192_in_V_read : STD_LOGIC;
    signal i_reg_133 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal image_in_V_full_n : STD_LOGIC;
    signal image_in_V_write : STD_LOGIC;
    signal ap_reg_grp_conv_layer1_fu_144_ap_start : STD_LOGIC := '0';
    signal conv1_out_V_full_n : STD_LOGIC;
    signal conv1_out_V_write : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal image_in_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal image_in_V_empty_n : STD_LOGIC;
    signal image_in_V_read : STD_LOGIC;
    signal ap_reg_grp_conv_layer2_fu_154_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal conv2_out_V_full_n : STD_LOGIC;
    signal conv2_out_V_write : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal pool1_out_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal pool1_out_V_empty_n : STD_LOGIC;
    signal pool1_out_V_read : STD_LOGIC;
    signal ap_reg_grp_pool_layer1_fu_164_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal pool1_out_V_full_n : STD_LOGIC;
    signal pool1_out_V_write : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal conv1_out_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_out_V_empty_n : STD_LOGIC;
    signal conv1_out_V_read : STD_LOGIC;
    signal ap_reg_grp_pool_layer2_fu_170_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal pool2_out_V_full_n : STD_LOGIC;
    signal pool2_out_V_write : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal conv2_out_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_out_V_empty_n : STD_LOGIC;
    signal conv2_out_V_read : STD_LOGIC;
    signal ap_reg_grp_fc_layer1_fu_176_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal fc1_out_V_full_n : STD_LOGIC;
    signal fc1_out_V_write : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal pool2_out_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal pool2_out_V_empty_n : STD_LOGIC;
    signal pool2_out_V_read : STD_LOGIC;
    signal ap_reg_grp_fc_layer2_fu_184_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal fc2_out_V_full_n : STD_LOGIC;
    signal fc2_out_V_write : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal fc1_out_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fc1_out_V_empty_n : STD_LOGIC;
    signal fc1_out_V_read : STD_LOGIC;
    signal ap_reg_grp_fc_layer3_fu_192_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal fc2_out_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fc2_out_V_empty_n : STD_LOGIC;
    signal fc2_out_V_read : STD_LOGIC;
    signal tmp_fu_213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component conv_layer1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_V_full_n : IN STD_LOGIC;
        out_V_write : OUT STD_LOGIC;
        in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_V_empty_n : IN STD_LOGIC;
        in_V_read : OUT STD_LOGIC );
    end component;


    component conv_layer2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_V_full_n : IN STD_LOGIC;
        out_V_write : OUT STD_LOGIC;
        in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_V_empty_n : IN STD_LOGIC;
        in_V_read : OUT STD_LOGIC );
    end component;


    component pool_layer1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_V_full_n : IN STD_LOGIC;
        out_V_write : OUT STD_LOGIC;
        in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_V_empty_n : IN STD_LOGIC;
        in_V_read : OUT STD_LOGIC );
    end component;


    component pool_layer2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_V_full_n : IN STD_LOGIC;
        out_V_write : OUT STD_LOGIC;
        in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_V_empty_n : IN STD_LOGIC;
        in_V_read : OUT STD_LOGIC );
    end component;


    component fc_layer1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_V_full_n : IN STD_LOGIC;
        out_V_write : OUT STD_LOGIC;
        in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_V_empty_n : IN STD_LOGIC;
        in_V_read : OUT STD_LOGIC );
    end component;


    component fc_layer2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_V_full_n : IN STD_LOGIC;
        out_V_write : OUT STD_LOGIC;
        in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_V_empty_n : IN STD_LOGIC;
        in_V_read : OUT STD_LOGIC );
    end component;


    component fc_layer3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_V_full_n : IN STD_LOGIC;
        out_V_write : OUT STD_LOGIC;
        in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_V_empty_n : IN STD_LOGIC;
        in_V_read : OUT STD_LOGIC );
    end component;


    component nnet_image_r IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fifo_w32_d100000_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    image_r_U : component nnet_image_r
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => image_r_address0,
        ce0 => image_r_ce0,
        q0 => image_r_q0);

    grp_conv_layer1_fu_144 : component conv_layer1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv_layer1_fu_144_ap_start,
        ap_done => grp_conv_layer1_fu_144_ap_done,
        ap_idle => grp_conv_layer1_fu_144_ap_idle,
        ap_ready => grp_conv_layer1_fu_144_ap_ready,
        out_V_din => grp_conv_layer1_fu_144_out_V_din,
        out_V_full_n => conv1_out_V_full_n,
        out_V_write => grp_conv_layer1_fu_144_out_V_write,
        in_V_dout => image_in_V_dout,
        in_V_empty_n => image_in_V_empty_n,
        in_V_read => grp_conv_layer1_fu_144_in_V_read);

    grp_conv_layer2_fu_154 : component conv_layer2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv_layer2_fu_154_ap_start,
        ap_done => grp_conv_layer2_fu_154_ap_done,
        ap_idle => grp_conv_layer2_fu_154_ap_idle,
        ap_ready => grp_conv_layer2_fu_154_ap_ready,
        out_V_din => grp_conv_layer2_fu_154_out_V_din,
        out_V_full_n => conv2_out_V_full_n,
        out_V_write => grp_conv_layer2_fu_154_out_V_write,
        in_V_dout => pool1_out_V_dout,
        in_V_empty_n => pool1_out_V_empty_n,
        in_V_read => grp_conv_layer2_fu_154_in_V_read);

    grp_pool_layer1_fu_164 : component pool_layer1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pool_layer1_fu_164_ap_start,
        ap_done => grp_pool_layer1_fu_164_ap_done,
        ap_idle => grp_pool_layer1_fu_164_ap_idle,
        ap_ready => grp_pool_layer1_fu_164_ap_ready,
        out_V_din => grp_pool_layer1_fu_164_out_V_din,
        out_V_full_n => pool1_out_V_full_n,
        out_V_write => grp_pool_layer1_fu_164_out_V_write,
        in_V_dout => conv1_out_V_dout,
        in_V_empty_n => conv1_out_V_empty_n,
        in_V_read => grp_pool_layer1_fu_164_in_V_read);

    grp_pool_layer2_fu_170 : component pool_layer2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pool_layer2_fu_170_ap_start,
        ap_done => grp_pool_layer2_fu_170_ap_done,
        ap_idle => grp_pool_layer2_fu_170_ap_idle,
        ap_ready => grp_pool_layer2_fu_170_ap_ready,
        out_V_din => grp_pool_layer2_fu_170_out_V_din,
        out_V_full_n => pool2_out_V_full_n,
        out_V_write => grp_pool_layer2_fu_170_out_V_write,
        in_V_dout => conv2_out_V_dout,
        in_V_empty_n => conv2_out_V_empty_n,
        in_V_read => grp_pool_layer2_fu_170_in_V_read);

    grp_fc_layer1_fu_176 : component fc_layer1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fc_layer1_fu_176_ap_start,
        ap_done => grp_fc_layer1_fu_176_ap_done,
        ap_idle => grp_fc_layer1_fu_176_ap_idle,
        ap_ready => grp_fc_layer1_fu_176_ap_ready,
        out_V_din => grp_fc_layer1_fu_176_out_V_din,
        out_V_full_n => fc1_out_V_full_n,
        out_V_write => grp_fc_layer1_fu_176_out_V_write,
        in_V_dout => pool2_out_V_dout,
        in_V_empty_n => pool2_out_V_empty_n,
        in_V_read => grp_fc_layer1_fu_176_in_V_read);

    grp_fc_layer2_fu_184 : component fc_layer2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fc_layer2_fu_184_ap_start,
        ap_done => grp_fc_layer2_fu_184_ap_done,
        ap_idle => grp_fc_layer2_fu_184_ap_idle,
        ap_ready => grp_fc_layer2_fu_184_ap_ready,
        out_V_din => grp_fc_layer2_fu_184_out_V_din,
        out_V_full_n => fc2_out_V_full_n,
        out_V_write => grp_fc_layer2_fu_184_out_V_write,
        in_V_dout => fc1_out_V_dout,
        in_V_empty_n => fc1_out_V_empty_n,
        in_V_read => grp_fc_layer2_fu_184_in_V_read);

    grp_fc_layer3_fu_192 : component fc_layer3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fc_layer3_fu_192_ap_start,
        ap_done => grp_fc_layer3_fu_192_ap_done,
        ap_idle => grp_fc_layer3_fu_192_ap_idle,
        ap_ready => grp_fc_layer3_fu_192_ap_ready,
        out_V_din => grp_fc_layer3_fu_192_out_V_din,
        out_V_full_n => fc3_out_V_full_n,
        out_V_write => grp_fc_layer3_fu_192_out_V_write,
        in_V_dout => fc2_out_V_dout,
        in_V_empty_n => fc2_out_V_empty_n,
        in_V_read => grp_fc_layer3_fu_192_in_V_read);

    conv1_out_V_fifo_U : component fifo_w32_d100000_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_conv_layer1_fu_144_out_V_din,
        if_full_n => conv1_out_V_full_n,
        if_write => conv1_out_V_write,
        if_dout => conv1_out_V_dout,
        if_empty_n => conv1_out_V_empty_n,
        if_read => conv1_out_V_read);

    conv2_out_V_fifo_U : component fifo_w32_d100000_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_conv_layer2_fu_154_out_V_din,
        if_full_n => conv2_out_V_full_n,
        if_write => conv2_out_V_write,
        if_dout => conv2_out_V_dout,
        if_empty_n => conv2_out_V_empty_n,
        if_read => conv2_out_V_read);

    pool1_out_V_fifo_U : component fifo_w32_d100000_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_pool_layer1_fu_164_out_V_din,
        if_full_n => pool1_out_V_full_n,
        if_write => pool1_out_V_write,
        if_dout => pool1_out_V_dout,
        if_empty_n => pool1_out_V_empty_n,
        if_read => pool1_out_V_read);

    pool2_out_V_fifo_U : component fifo_w32_d100000_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_pool_layer2_fu_170_out_V_din,
        if_full_n => pool2_out_V_full_n,
        if_write => pool2_out_V_write,
        if_dout => pool2_out_V_dout,
        if_empty_n => pool2_out_V_empty_n,
        if_read => pool2_out_V_read);

    fc1_out_V_fifo_U : component fifo_w32_d100000_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_fc_layer1_fu_176_out_V_din,
        if_full_n => fc1_out_V_full_n,
        if_write => fc1_out_V_write,
        if_dout => fc1_out_V_dout,
        if_empty_n => fc1_out_V_empty_n,
        if_read => fc1_out_V_read);

    fc2_out_V_fifo_U : component fifo_w32_d100000_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_fc_layer2_fu_184_out_V_din,
        if_full_n => fc2_out_V_full_n,
        if_write => fc2_out_V_write,
        if_dout => fc2_out_V_dout,
        if_empty_n => fc2_out_V_empty_n,
        if_read => fc2_out_V_read);

    image_in_V_fifo_U : component fifo_w32_d100000_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => image_r_q0,
        if_full_n => image_in_V_full_n,
        if_write => image_in_V_write,
        if_dout => image_in_V_dout,
        if_empty_n => image_in_V_empty_n,
        if_read => image_in_V_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_conv_layer1_fu_144_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_conv_layer1_fu_144_ap_start <= ap_const_logic_0;
            else
                if (((exitcond_fu_201_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_reg_grp_conv_layer1_fu_144_ap_start <= ap_const_logic_1;
                elsif ((grp_conv_layer1_fu_144_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_conv_layer1_fu_144_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_conv_layer2_fu_154_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_conv_layer2_fu_154_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_reg_grp_conv_layer2_fu_154_ap_start <= ap_const_logic_1;
                elsif ((grp_conv_layer2_fu_154_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_conv_layer2_fu_154_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_fc_layer1_fu_176_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_fc_layer1_fu_176_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_reg_grp_fc_layer1_fu_176_ap_start <= ap_const_logic_1;
                elsif ((grp_fc_layer1_fu_176_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_fc_layer1_fu_176_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_fc_layer2_fu_184_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_fc_layer2_fu_184_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_reg_grp_fc_layer2_fu_184_ap_start <= ap_const_logic_1;
                elsif ((grp_fc_layer2_fu_184_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_fc_layer2_fu_184_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_fc_layer3_fu_192_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_fc_layer3_fu_192_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_reg_grp_fc_layer3_fu_192_ap_start <= ap_const_logic_1;
                elsif ((grp_fc_layer3_fu_192_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_fc_layer3_fu_192_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_pool_layer1_fu_164_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_pool_layer1_fu_164_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_reg_grp_pool_layer1_fu_164_ap_start <= ap_const_logic_1;
                elsif ((grp_pool_layer1_fu_164_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_pool_layer1_fu_164_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_pool_layer2_fu_170_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_pool_layer2_fu_170_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_reg_grp_pool_layer2_fu_170_ap_start <= ap_const_logic_1;
                elsif ((grp_pool_layer2_fu_170_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_pool_layer2_fu_170_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (image_in_V_full_n = ap_const_logic_1))) then 
                i_reg_133 <= i_3_reg_263;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_133 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_3_reg_263 <= i_3_fu_207_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_201_p2, grp_conv_layer1_fu_144_ap_done, grp_conv_layer2_fu_154_ap_done, grp_pool_layer1_fu_164_ap_done, grp_pool_layer2_fu_170_ap_done, grp_fc_layer1_fu_176_ap_done, grp_fc_layer2_fu_184_ap_done, grp_fc_layer3_fu_192_ap_done, ap_CS_fsm_state3, image_in_V_full_n, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_201_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (image_in_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_conv_layer1_fu_144_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_pool_layer1_fu_164_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_conv_layer2_fu_154_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_pool_layer2_fu_170_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_fc_layer1_fu_176_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_fc_layer2_fu_184_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_fc_layer3_fu_192_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(grp_fc_layer3_fu_192_ap_done, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_fc_layer3_fu_192_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_fc_layer3_fu_192_ap_done, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_fc_layer3_fu_192_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    conv1_out_V_read_assign_proc : process(grp_pool_layer1_fu_164_in_V_read, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv1_out_V_read <= grp_pool_layer1_fu_164_in_V_read;
        else 
            conv1_out_V_read <= ap_const_logic_0;
        end if; 
    end process;


    conv1_out_V_write_assign_proc : process(grp_conv_layer1_fu_144_out_V_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv1_out_V_write <= grp_conv_layer1_fu_144_out_V_write;
        else 
            conv1_out_V_write <= ap_const_logic_0;
        end if; 
    end process;


    conv2_out_V_read_assign_proc : process(grp_pool_layer2_fu_170_in_V_read, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv2_out_V_read <= grp_pool_layer2_fu_170_in_V_read;
        else 
            conv2_out_V_read <= ap_const_logic_0;
        end if; 
    end process;


    conv2_out_V_write_assign_proc : process(grp_conv_layer2_fu_154_out_V_write, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv2_out_V_write <= grp_conv_layer2_fu_154_out_V_write;
        else 
            conv2_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_201_p2 <= "1" when (i_reg_133 = ap_const_lv11_400) else "0";

    fc1_out_V_read_assign_proc : process(grp_fc_layer2_fu_184_in_V_read, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            fc1_out_V_read <= grp_fc_layer2_fu_184_in_V_read;
        else 
            fc1_out_V_read <= ap_const_logic_0;
        end if; 
    end process;


    fc1_out_V_write_assign_proc : process(grp_fc_layer1_fu_176_out_V_write, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fc1_out_V_write <= grp_fc_layer1_fu_176_out_V_write;
        else 
            fc1_out_V_write <= ap_const_logic_0;
        end if; 
    end process;


    fc2_out_V_read_assign_proc : process(grp_fc_layer3_fu_192_in_V_read, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            fc2_out_V_read <= grp_fc_layer3_fu_192_in_V_read;
        else 
            fc2_out_V_read <= ap_const_logic_0;
        end if; 
    end process;


    fc2_out_V_write_assign_proc : process(grp_fc_layer2_fu_184_out_V_write, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            fc2_out_V_write <= grp_fc_layer2_fu_184_out_V_write;
        else 
            fc2_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    fc3_out_V_din <= grp_fc_layer3_fu_192_out_V_din;

    fc3_out_V_write_assign_proc : process(grp_fc_layer3_fu_192_out_V_write, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            fc3_out_V_write <= grp_fc_layer3_fu_192_out_V_write;
        else 
            fc3_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_conv_layer1_fu_144_ap_start <= ap_reg_grp_conv_layer1_fu_144_ap_start;
    grp_conv_layer2_fu_154_ap_start <= ap_reg_grp_conv_layer2_fu_154_ap_start;
    grp_fc_layer1_fu_176_ap_start <= ap_reg_grp_fc_layer1_fu_176_ap_start;
    grp_fc_layer2_fu_184_ap_start <= ap_reg_grp_fc_layer2_fu_184_ap_start;
    grp_fc_layer3_fu_192_ap_start <= ap_reg_grp_fc_layer3_fu_192_ap_start;
    grp_pool_layer1_fu_164_ap_start <= ap_reg_grp_pool_layer1_fu_164_ap_start;
    grp_pool_layer2_fu_170_ap_start <= ap_reg_grp_pool_layer2_fu_170_ap_start;
    i_3_fu_207_p2 <= std_logic_vector(unsigned(i_reg_133) + unsigned(ap_const_lv11_1));

    image_in_V_read_assign_proc : process(grp_conv_layer1_fu_144_in_V_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            image_in_V_read <= grp_conv_layer1_fu_144_in_V_read;
        else 
            image_in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    image_in_V_write_assign_proc : process(ap_CS_fsm_state3, image_in_V_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (image_in_V_full_n = ap_const_logic_1))) then 
            image_in_V_write <= ap_const_logic_1;
        else 
            image_in_V_write <= ap_const_logic_0;
        end if; 
    end process;

    image_r_address0 <= tmp_fu_213_p1(10 - 1 downto 0);

    image_r_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            image_r_ce0 <= ap_const_logic_1;
        else 
            image_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pool1_out_V_read_assign_proc : process(grp_conv_layer2_fu_154_in_V_read, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pool1_out_V_read <= grp_conv_layer2_fu_154_in_V_read;
        else 
            pool1_out_V_read <= ap_const_logic_0;
        end if; 
    end process;


    pool1_out_V_write_assign_proc : process(grp_pool_layer1_fu_164_out_V_write, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pool1_out_V_write <= grp_pool_layer1_fu_164_out_V_write;
        else 
            pool1_out_V_write <= ap_const_logic_0;
        end if; 
    end process;


    pool2_out_V_read_assign_proc : process(grp_fc_layer1_fu_176_in_V_read, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            pool2_out_V_read <= grp_fc_layer1_fu_176_in_V_read;
        else 
            pool2_out_V_read <= ap_const_logic_0;
        end if; 
    end process;


    pool2_out_V_write_assign_proc : process(grp_pool_layer2_fu_170_out_V_write, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pool2_out_V_write <= grp_pool_layer2_fu_170_out_V_write;
        else 
            pool2_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_133),64));
end behav;
