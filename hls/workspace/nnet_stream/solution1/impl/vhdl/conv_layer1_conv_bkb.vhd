-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_layer1_conv_bkb_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_layer1_conv_bkb_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000000101011100011000111", 
    1 => "10111110001100000010110011010100", 
    2 => "00111110001000111011111000100011", 
    3 => "10111110000010100100010001000001", 
    4 => "10111110001101101010001101111011", 
    5 => "00111100100101111000100100011110", 
    6 => "00111010110001111001111101100110", 
    7 => "00111110001100011001100001101100", 
    8 => "00111101100011011100001100110111", 
    9 => "00111110001100101111100101000100", 
    10 => "10111110000111011101101110011000", 
    11 => "00111110000100111010100111110100", 
    12 => "00111110001010010011011011000110", 
    13 => "00111101101011111111000010001001", 
    14 => "10111101000110111101000111101110", 
    15 => "00111100111111001010110010001110", 
    16 => "00111110000101000100111100011010", 
    17 => "00111101001000001010010100100111", 
    18 => "00111101111001101110110110101011", 
    19 => "00111110010001011011110110010100", 
    20 => "10111110001101101110101011001000", 
    21 => "10111101100010010110111001011001", 
    22 => "10111101111010001011010111001100", 
    23 => "10111101100101100011001000111100", 
    24 => "10111110010000001001111000010011", 
    25 => "10111110001101001110101100010100", 
    26 => "10111101100100001000101010101101", 
    27 => "10111011011111001101011010000000", 
    28 => "10111110001000010010010011010001", 
    29 => "10111101100000100111010110101011", 
    30 => "00111100000101001101100101000000", 
    31 => "10111101101000100110100110011100", 
    32 => "00111110000111111001100000110001", 
    33 => "00111101111111000100001110110011", 
    34 => "00111110010100001011100101010110", 
    35 => "00111101100001010100100100110000", 
    36 => "10111110000110111101010000000110", 
    37 => "10111110000000010001101010010111", 
    38 => "00111101100001010011000000000110", 
    39 => "00111101110110101001110010011001", 
    40 => "00111101110101000000011001111101", 
    41 => "10111101000011000110100100101111", 
    42 => "00111110001110110111101011100101", 
    43 => "00111110001000110011100000101110", 
    44 => "00111110001011100111001011011010", 
    45 => "10111101110000101100010111100011", 
    46 => "10111110000010000010101101100011", 
    47 => "10111110001111011101111110000111", 
    48 => "00111110010010111111111101000111", 
    49 => "10111110010000001100101111110011", 
    50 => "10111101111000101101011100110000", 
    51 => "10111110010011111000010000000010", 
    52 => "00111101001010000100101011011000", 
    53 => "10111101110011111001110000100000", 
    54 => "10111100100100010111111110000100", 
    55 => "10111101111100100011001111011111", 
    56 => "10111110000110010001001001010101", 
    57 => "00111101001110000011000001011110", 
    58 => "00111101101010001011011111100101", 
    59 => "00111100111010000101000100100010", 
    60 => "10111101110010100100111111001010", 
    61 => "10111110001010010100111100100111", 
    62 => "00111110010000011110000010000011", 
    63 => "10111101111100001101001110001101", 
    64 => "00111110001110011100100111010110", 
    65 => "10111110001111000110111101111010", 
    66 => "00111110001000100011110100001100", 
    67 => "10111101110111101110011110000010", 
    68 => "10111100101110111001000001100100", 
    69 => "10111110000110100001000000010111", 
    70 => "00111110001100011111111010101000", 
    71 => "10111101100000011110001111101011", 
    72 => "00111110010011000101000101010101", 
    73 => "00111110000100000110011100000110", 
    74 => "00111101111000001100011100111011", 
    75 => "10111101101100101100101011011110", 
    76 => "10111100010010000111100110000001", 
    77 => "00111110000011011010000010011101", 
    78 => "00111101111010000010101101100011", 
    79 => "10111101011100000100100110101010", 
    80 => "00111101110100011010000000000110", 
    81 => "10111101001110100000111110010001", 
    82 => "10111101011010011000001101010001", 
    83 => "10111110010011110000100001000110", 
    84 => "10111110000001111111111010001111", 
    85 => "00111110010011011111000100010111", 
    86 => "10111101110011001101001100010111", 
    87 => "10111101100011010110110010110101", 
    88 => "00111101100100111011011001000110", 
    89 => "10111110001100101100100000111111", 
    90 => "10111110001110010011010011110000", 
    91 => "00111110010000001111011111111101", 
    92 => "10111100010101010100010101000001", 
    93 => "00111101011101010011000011001111", 
    94 => "00111110010000000010111101110011", 
    95 => "00111110000101001010011000100010", 
    96 => "10111110000100001000011111001010", 
    97 => "10111100100010001101011011010100", 
    98 => "00111101110101111110111111100001", 
    99 => "10111101110011001100011110001111", 
    100 => "00111110000001010010111011111001", 
    101 => "10111101101101101101110110101101", 
    102 => "00111110001010101101110110011100", 
    103 => "00111101100101100101101110100111", 
    104 => "00111101000011010011111000001100", 
    105 => "00111110000001010011111010110100", 
    106 => "00111101111100111100000101001000", 
    107 => "10111100100111110000001111010001", 
    108 => "10111110000011110011110000101110", 
    109 => "10111101110001100010001101001011", 
    110 => "00111101101011011101101001001001", 
    111 => "10111101101111010101110111000100", 
    112 => "10111101101100100111000000101010", 
    113 => "00111110000010001010000110011101", 
    114 => "00111101100001011111000001101111", 
    115 => "10111101111001001011011011101001", 
    116 => "10111100011110010001101000110011", 
    117 => "00111101110100111111110010000111", 
    118 => "10111100111111100001000100010010", 
    119 => "10111101110011001011001010010110", 
    120 => "00111110001110100010011100101000", 
    121 => "10111101110100100110011111000111", 
    122 => "00111101100000010110110001100001", 
    123 => "00111101101110110110001001000001", 
    124 => "00111101111111011010011110110001", 
    125 => "00111101100100010110011011100000", 
    126 => "10111100000001000011100000001001", 
    127 => "00111110000110110110100101010101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_layer1_conv_bkb is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_layer1_conv_bkb is
    component conv_layer1_conv_bkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_layer1_conv_bkb_rom_U :  component conv_layer1_conv_bkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


