-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    image_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    image_r_ce0 : OUT STD_LOGIC;
    image_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv,hls_ip_2017_4_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.159000,HLS_SYN_LAT=1305713,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=787,HLS_SYN_LUT=1480}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_1D : STD_LOGIC_VECTOR (9 downto 0) := "0000011101";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal filter_1_fu_229_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal filter_1_reg_455 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_cast1_fu_240_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast1_reg_460 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond5_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast_fu_244_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_cast_reg_465 : STD_LOGIC_VECTOR (13 downto 0);
    signal bias_addr_reg_470 : STD_LOGIC_VECTOR (2 downto 0);
    signal next_mul_fu_248_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul_reg_475 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_1_fu_260_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_483 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_fu_272_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_491 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal row_offset_1_fu_288_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_offset_1_reg_499 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_9_fu_294_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_reg_504 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_cast_fu_308_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_cast_reg_509 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_10_fu_334_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_10_reg_514 : STD_LOGIC_VECTOR (13 downto 0);
    signal col_offset_1_fu_349_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_offset_1_reg_522 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond1_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal image_load_reg_537 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal weight_load_reg_542 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_547 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal bias_load_reg_557 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal a_assign_reg_562 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal a_assign_1_fu_441_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_1_reg_569 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal filter_reg_115 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond4_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_126 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond3_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_138 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_150 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal sum_reg_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_offset_reg_174 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_1_reg_185 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_offset_reg_197 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_cast_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_cast_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_208_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal row_offset_cast4_fu_278_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_fu_300_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_cast_fu_312_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_316_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_322_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_14_cast_fu_330_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal col_offset_cast2_fu_339_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_355_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_fu_361_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_cast_fu_373_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_fu_377_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_22_cast_fu_382_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_fu_390_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal a_assign_to_int_fu_400_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_403_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_413_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);

    component conv_fadd_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fmul_32ns_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fcmp_32ns_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    conv_fadd_32ns_32bkb_U1 : component conv_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_208_p0,
        din1 => grp_fu_208_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_208_p2);

    conv_fmul_32ns_32cud_U2 : component conv_fmul_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => image_load_reg_537,
        din1 => weight_load_reg_542,
        ce => ap_const_logic_1,
        dout => grp_fu_214_p2);

    conv_fcmp_32ns_32dEe_U3 : component conv_fcmp_32ns_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => a_assign_reg_562,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_s_fu_218_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    col_offset_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_282_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                col_offset_reg_197 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                col_offset_reg_197 <= col_offset_1_reg_522;
            end if; 
        end if;
    end process;

    filter_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_254_p2 = ap_const_lv1_1))) then 
                filter_reg_115 <= filter_1_reg_455;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                filter_reg_115 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_266_p2 = ap_const_lv1_1))) then 
                i_reg_126 <= i_1_reg_483;
            elsif (((exitcond5_fu_223_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_126 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_254_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_150 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                j_reg_150 <= j_1_reg_491;
            end if; 
        end if;
    end process;

    phi_mul_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_266_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_138 <= next_mul_reg_475;
            elsif (((exitcond5_fu_223_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_138 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    row_offset_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                row_offset_reg_174 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_fu_343_p2 = ap_const_lv1_1))) then 
                row_offset_reg_174 <= row_offset_1_reg_499;
            end if; 
        end if;
    end process;

    sum_1_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_282_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                sum_1_reg_185 <= sum_reg_162;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                sum_1_reg_185 <= grp_fu_208_p2;
            end if; 
        end if;
    end process;

    sum_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                sum_reg_162 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_fu_343_p2 = ap_const_lv1_1))) then 
                sum_reg_162 <= sum_1_reg_185;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                a_assign_1_reg_569 <= a_assign_1_fu_441_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                a_assign_reg_562 <= grp_fu_208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_223_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                bias_addr_reg_470 <= tmp_fu_235_p1(3 - 1 downto 0);
                    tmp_cast1_reg_460(3 downto 0) <= tmp_cast1_fu_240_p1(3 downto 0);
                    tmp_cast_reg_465(3 downto 0) <= tmp_cast_fu_244_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                bias_load_reg_557 <= bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                col_offset_1_reg_522 <= col_offset_1_fu_349_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                filter_1_reg_455 <= filter_1_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_1_reg_483 <= i_1_fu_260_p2;
                next_mul_reg_475 <= next_mul_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                image_load_reg_537 <= image_r_q0;
                weight_load_reg_542 <= weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_1_reg_491 <= j_1_fu_272_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                row_offset_1_reg_499 <= row_offset_1_fu_288_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_282_p2 = ap_const_lv1_1))) then
                tmp_10_reg_514 <= tmp_10_fu_334_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_282_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    tmp_17_cast_reg_509(4 downto 2) <= tmp_17_cast_fu_308_p1(4 downto 2);
                tmp_9_reg_504 <= tmp_9_fu_294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_5_reg_547 <= grp_fu_214_p2;
            end if;
        end if;
    end process;
    tmp_cast1_reg_460(8 downto 4) <= "00000";
    tmp_cast_reg_465(13 downto 4) <= "0000000000";
    tmp_17_cast_reg_509(1 downto 0) <= "00";
    tmp_17_cast_reg_509(5) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_223_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, exitcond2_fu_282_p2, ap_CS_fsm_state6, exitcond1_fu_343_p2, exitcond4_fu_254_p2, exitcond3_fu_266_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond5_fu_223_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_254_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_266_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond2_fu_282_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_fu_343_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_assign_1_fu_441_p3 <= 
        a_assign_reg_562 when (tmp_3_fu_435_p2(0) = '1') else 
        ap_const_lv32_0;
    a_assign_to_int_fu_400_p1 <= a_assign_reg_562;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_223_p2)
    begin
        if (((exitcond5_fu_223_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_223_p2)
    begin
        if (((exitcond5_fu_223_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_470;

    bias_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_offset_1_fu_349_p2 <= std_logic_vector(unsigned(col_offset_reg_197) + unsigned(ap_const_lv3_1));
    col_offset_cast2_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_reg_197),5));
    exitcond1_fu_343_p2 <= "1" when (col_offset_reg_197 = ap_const_lv3_4) else "0";
    exitcond2_fu_282_p2 <= "1" when (row_offset_reg_174 = ap_const_lv3_4) else "0";
    exitcond3_fu_266_p2 <= "1" when (j_reg_150 = ap_const_lv5_1D) else "0";
    exitcond4_fu_254_p2 <= "1" when (i_reg_126 = ap_const_lv5_1D) else "0";
    exitcond5_fu_223_p2 <= "1" when (filter_reg_115 = ap_const_lv4_8) else "0";
    filter_1_fu_229_p2 <= std_logic_vector(unsigned(filter_reg_115) + unsigned(ap_const_lv4_1));

    grp_fu_208_p0_assign_proc : process(sum_reg_162, sum_1_reg_185, ap_CS_fsm_state12, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_208_p0 <= sum_reg_162;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_208_p0 <= sum_1_reg_185;
        else 
            grp_fu_208_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_208_p1_assign_proc : process(tmp_5_reg_547, bias_load_reg_557, ap_CS_fsm_state12, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_208_p1 <= bias_load_reg_557;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_208_p1 <= tmp_5_reg_547;
        else 
            grp_fu_208_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_260_p2 <= std_logic_vector(unsigned(i_reg_126) + unsigned(ap_const_lv5_1));
    image_r_address0 <= tmp_13_fu_368_p1(10 - 1 downto 0);

    image_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            image_r_ce0 <= ap_const_logic_1;
        else 
            image_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_272_p2 <= std_logic_vector(unsigned(j_reg_150) + unsigned(ap_const_lv5_1));
    next_mul_fu_248_p2 <= std_logic_vector(unsigned(phi_mul_reg_138) + unsigned(ap_const_lv10_1D));
    notlhs_fu_417_p2 <= "0" when (tmp_6_fu_403_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_423_p2 <= "1" when (tmp_1_fu_413_p1 = ap_const_lv23_0) else "0";
    output_r_address0 <= tmp_15_cast_fu_448_p1(13 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= a_assign_1_reg_569;

    output_r_we0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    row_offset_1_fu_288_p2 <= std_logic_vector(unsigned(row_offset_reg_174) + unsigned(ap_const_lv3_1));
    row_offset_cast4_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_offset_reg_174),5));
    tmp_10_fu_334_p2 <= std_logic_vector(unsigned(tmp_cast_reg_465) + unsigned(tmp_14_cast_fu_330_p1));
    tmp_11_fu_300_p3 <= (row_offset_reg_174 & ap_const_lv2_0);
    tmp_12_fu_361_p3 <= (tmp_9_reg_504 & tmp_2_fu_355_p2);
    tmp_13_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_361_p3),64));
    tmp_14_cast_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_322_p3),14));
    tmp_14_fu_377_p2 <= std_logic_vector(unsigned(tmp_17_cast_reg_509) + unsigned(tmp_8_cast_fu_373_p1));
    tmp_15_cast_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_reg_514),64));
    tmp_15_fu_390_p2 <= std_logic_vector(unsigned(tmp_22_cast_fu_382_p3) + unsigned(tmp_cast1_reg_460));
    tmp_17_cast_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_300_p3),6));
    tmp_1_fu_413_p1 <= a_assign_to_int_fu_400_p1(23 - 1 downto 0);
    tmp_22_cast_fu_382_p3 <= (tmp_14_fu_377_p2 & ap_const_lv3_0);
    tmp_23_cast_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_390_p2),64));
    tmp_2_fu_355_p2 <= std_logic_vector(unsigned(col_offset_cast2_fu_339_p1) + unsigned(j_reg_150));
    tmp_3_fu_435_p2 <= (tmp_s_fu_218_p2 and tmp_4_fu_429_p2);
    tmp_4_fu_429_p2 <= (notrhs_fu_423_p2 or notlhs_fu_417_p2);
    tmp_6_fu_403_p4 <= a_assign_to_int_fu_400_p1(30 downto 23);
    tmp_7_cast_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_150),10));
    tmp_7_fu_316_p2 <= std_logic_vector(unsigned(tmp_7_cast_fu_312_p1) + unsigned(phi_mul_reg_138));
    tmp_8_cast_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_reg_197),6));
    tmp_8_fu_322_p3 <= (tmp_7_fu_316_p2 & ap_const_lv3_0);
    tmp_9_fu_294_p2 <= std_logic_vector(unsigned(i_reg_126) + unsigned(row_offset_cast4_fu_278_p1));
    tmp_cast1_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(filter_reg_115),9));
    tmp_cast_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(filter_reg_115),14));
    tmp_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(filter_reg_115),64));
    weight_address0 <= tmp_23_cast_fu_395_p1(7 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
