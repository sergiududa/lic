// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "conv.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic conv::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic conv::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<24> conv::ap_ST_fsm_state1 = "1";
const sc_lv<24> conv::ap_ST_fsm_state2 = "10";
const sc_lv<24> conv::ap_ST_fsm_state3 = "100";
const sc_lv<24> conv::ap_ST_fsm_state4 = "1000";
const sc_lv<24> conv::ap_ST_fsm_state5 = "10000";
const sc_lv<24> conv::ap_ST_fsm_state6 = "100000";
const sc_lv<24> conv::ap_ST_fsm_state7 = "1000000";
const sc_lv<24> conv::ap_ST_fsm_state8 = "10000000";
const sc_lv<24> conv::ap_ST_fsm_state9 = "100000000";
const sc_lv<24> conv::ap_ST_fsm_state10 = "1000000000";
const sc_lv<24> conv::ap_ST_fsm_state11 = "10000000000";
const sc_lv<24> conv::ap_ST_fsm_state12 = "100000000000";
const sc_lv<24> conv::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<24> conv::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<24> conv::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<24> conv::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<24> conv::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<24> conv::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<24> conv::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<24> conv::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<24> conv::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<24> conv::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<24> conv::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<24> conv::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<32> conv::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> conv::ap_const_lv32_1 = "1";
const sc_lv<1> conv::ap_const_lv1_0 = "0";
const sc_lv<32> conv::ap_const_lv32_2 = "10";
const sc_lv<32> conv::ap_const_lv32_3 = "11";
const sc_lv<32> conv::ap_const_lv32_4 = "100";
const sc_lv<1> conv::ap_const_lv1_1 = "1";
const sc_lv<32> conv::ap_const_lv32_5 = "101";
const sc_lv<32> conv::ap_const_lv32_6 = "110";
const sc_lv<32> conv::ap_const_lv32_A = "1010";
const sc_lv<32> conv::ap_const_lv32_F = "1111";
const sc_lv<32> conv::ap_const_lv32_10 = "10000";
const sc_lv<32> conv::ap_const_lv32_15 = "10101";
const sc_lv<32> conv::ap_const_lv32_16 = "10110";
const sc_lv<4> conv::ap_const_lv4_0 = "0000";
const sc_lv<5> conv::ap_const_lv5_0 = "00000";
const sc_lv<10> conv::ap_const_lv10_0 = "0000000000";
const sc_lv<32> conv::ap_const_lv32_17 = "10111";
const sc_lv<3> conv::ap_const_lv3_0 = "000";
const sc_lv<32> conv::ap_const_lv32_B = "1011";
const sc_lv<32> conv::ap_const_lv32_11 = "10001";
const sc_lv<32> conv::ap_const_lv32_7 = "111";
const sc_lv<4> conv::ap_const_lv4_8 = "1000";
const sc_lv<4> conv::ap_const_lv4_1 = "1";
const sc_lv<10> conv::ap_const_lv10_1D = "11101";
const sc_lv<5> conv::ap_const_lv5_1D = "11101";
const sc_lv<5> conv::ap_const_lv5_1 = "1";
const sc_lv<3> conv::ap_const_lv3_4 = "100";
const sc_lv<3> conv::ap_const_lv3_1 = "1";
const sc_lv<2> conv::ap_const_lv2_0 = "00";
const sc_lv<32> conv::ap_const_lv32_1E = "11110";
const sc_lv<8> conv::ap_const_lv8_FF = "11111111";
const sc_lv<23> conv::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<5> conv::ap_const_lv5_2 = "10";
const bool conv::ap_const_boolean_1 = true;

conv::conv(sc_module_name name) : sc_module(name), mVcdFile(0) {
    conv_fadd_32ns_32bkb_U1 = new conv_fadd_32ns_32bkb<1,5,32,32,32>("conv_fadd_32ns_32bkb_U1");
    conv_fadd_32ns_32bkb_U1->clk(ap_clk);
    conv_fadd_32ns_32bkb_U1->reset(ap_rst);
    conv_fadd_32ns_32bkb_U1->din0(grp_fu_208_p0);
    conv_fadd_32ns_32bkb_U1->din1(grp_fu_208_p1);
    conv_fadd_32ns_32bkb_U1->ce(ap_var_for_const0);
    conv_fadd_32ns_32bkb_U1->dout(grp_fu_208_p2);
    conv_fmul_32ns_32cud_U2 = new conv_fmul_32ns_32cud<1,4,32,32,32>("conv_fmul_32ns_32cud_U2");
    conv_fmul_32ns_32cud_U2->clk(ap_clk);
    conv_fmul_32ns_32cud_U2->reset(ap_rst);
    conv_fmul_32ns_32cud_U2->din0(image_load_reg_537);
    conv_fmul_32ns_32cud_U2->din1(weight_load_reg_542);
    conv_fmul_32ns_32cud_U2->ce(ap_var_for_const0);
    conv_fmul_32ns_32cud_U2->dout(grp_fu_214_p2);
    conv_fcmp_32ns_32dEe_U3 = new conv_fcmp_32ns_32dEe<1,1,32,32,1>("conv_fcmp_32ns_32dEe_U3");
    conv_fcmp_32ns_32dEe_U3->din0(a_assign_reg_562);
    conv_fcmp_32ns_32dEe_U3->din1(ap_var_for_const1);
    conv_fcmp_32ns_32dEe_U3->opcode(ap_var_for_const2);
    conv_fcmp_32ns_32dEe_U3->dout(tmp_s_fu_218_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_assign_1_fu_441_p3);
    sensitive << ( a_assign_reg_562 );
    sensitive << ( tmp_3_fu_435_p2 );

    SC_METHOD(thread_a_assign_to_int_fu_400_p1);
    sensitive << ( a_assign_reg_562 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond5_fu_223_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond5_fu_223_p2 );

    SC_METHOD(thread_bias_address0);
    sensitive << ( bias_addr_reg_470 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_bias_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_col_offset_1_fu_349_p2);
    sensitive << ( col_offset_reg_197 );

    SC_METHOD(thread_col_offset_cast2_fu_339_p1);
    sensitive << ( col_offset_reg_197 );

    SC_METHOD(thread_exitcond1_fu_343_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( col_offset_reg_197 );

    SC_METHOD(thread_exitcond2_fu_282_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( row_offset_reg_174 );

    SC_METHOD(thread_exitcond3_fu_266_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( j_reg_150 );

    SC_METHOD(thread_exitcond4_fu_254_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_reg_126 );

    SC_METHOD(thread_exitcond5_fu_223_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( filter_reg_115 );

    SC_METHOD(thread_filter_1_fu_229_p2);
    sensitive << ( filter_reg_115 );

    SC_METHOD(thread_grp_fu_208_p0);
    sensitive << ( sum_reg_162 );
    sensitive << ( sum_1_reg_185 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_grp_fu_208_p1);
    sensitive << ( tmp_5_reg_547 );
    sensitive << ( bias_load_reg_557 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_i_1_fu_260_p2);
    sensitive << ( i_reg_126 );

    SC_METHOD(thread_image_r_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_13_fu_368_p1 );

    SC_METHOD(thread_image_r_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_j_1_fu_272_p2);
    sensitive << ( j_reg_150 );

    SC_METHOD(thread_next_mul_fu_248_p2);
    sensitive << ( phi_mul_reg_138 );

    SC_METHOD(thread_notlhs_fu_417_p2);
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( tmp_6_fu_403_p4 );

    SC_METHOD(thread_notrhs_fu_423_p2);
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( tmp_1_fu_413_p1 );

    SC_METHOD(thread_output_r_address0);
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( tmp_15_cast_fu_448_p1 );

    SC_METHOD(thread_output_r_ce0);
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_output_r_d0);
    sensitive << ( a_assign_1_reg_569 );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_output_r_we0);
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_row_offset_1_fu_288_p2);
    sensitive << ( row_offset_reg_174 );

    SC_METHOD(thread_row_offset_cast4_fu_278_p1);
    sensitive << ( row_offset_reg_174 );

    SC_METHOD(thread_tmp_10_fu_334_p2);
    sensitive << ( tmp_cast_reg_465 );
    sensitive << ( tmp_14_cast_fu_330_p1 );

    SC_METHOD(thread_tmp_11_fu_300_p3);
    sensitive << ( row_offset_reg_174 );

    SC_METHOD(thread_tmp_12_fu_361_p3);
    sensitive << ( tmp_9_reg_504 );
    sensitive << ( tmp_2_fu_355_p2 );

    SC_METHOD(thread_tmp_13_fu_368_p1);
    sensitive << ( tmp_12_fu_361_p3 );

    SC_METHOD(thread_tmp_14_cast_fu_330_p1);
    sensitive << ( tmp_8_fu_322_p3 );

    SC_METHOD(thread_tmp_14_fu_377_p2);
    sensitive << ( tmp_17_cast_reg_509 );
    sensitive << ( tmp_8_cast_fu_373_p1 );

    SC_METHOD(thread_tmp_15_cast_fu_448_p1);
    sensitive << ( tmp_10_reg_514 );

    SC_METHOD(thread_tmp_15_fu_390_p2);
    sensitive << ( tmp_cast1_reg_460 );
    sensitive << ( tmp_22_cast_fu_382_p3 );

    SC_METHOD(thread_tmp_17_cast_fu_308_p1);
    sensitive << ( tmp_11_fu_300_p3 );

    SC_METHOD(thread_tmp_1_fu_413_p1);
    sensitive << ( a_assign_to_int_fu_400_p1 );

    SC_METHOD(thread_tmp_22_cast_fu_382_p3);
    sensitive << ( tmp_14_fu_377_p2 );

    SC_METHOD(thread_tmp_23_cast_fu_395_p1);
    sensitive << ( tmp_15_fu_390_p2 );

    SC_METHOD(thread_tmp_2_fu_355_p2);
    sensitive << ( j_reg_150 );
    sensitive << ( col_offset_cast2_fu_339_p1 );

    SC_METHOD(thread_tmp_3_fu_435_p2);
    sensitive << ( tmp_4_fu_429_p2 );
    sensitive << ( tmp_s_fu_218_p2 );

    SC_METHOD(thread_tmp_4_fu_429_p2);
    sensitive << ( notrhs_fu_423_p2 );
    sensitive << ( notlhs_fu_417_p2 );

    SC_METHOD(thread_tmp_6_fu_403_p4);
    sensitive << ( a_assign_to_int_fu_400_p1 );

    SC_METHOD(thread_tmp_7_cast_fu_312_p1);
    sensitive << ( j_reg_150 );

    SC_METHOD(thread_tmp_7_fu_316_p2);
    sensitive << ( phi_mul_reg_138 );
    sensitive << ( tmp_7_cast_fu_312_p1 );

    SC_METHOD(thread_tmp_8_cast_fu_373_p1);
    sensitive << ( col_offset_reg_197 );

    SC_METHOD(thread_tmp_8_fu_322_p3);
    sensitive << ( tmp_7_fu_316_p2 );

    SC_METHOD(thread_tmp_9_fu_294_p2);
    sensitive << ( i_reg_126 );
    sensitive << ( row_offset_cast4_fu_278_p1 );

    SC_METHOD(thread_tmp_cast1_fu_240_p1);
    sensitive << ( filter_reg_115 );

    SC_METHOD(thread_tmp_cast_fu_244_p1);
    sensitive << ( filter_reg_115 );

    SC_METHOD(thread_tmp_fu_235_p1);
    sensitive << ( filter_reg_115 );

    SC_METHOD(thread_weight_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_23_cast_fu_395_p1 );

    SC_METHOD(thread_weight_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond5_fu_223_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond2_fu_282_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond1_fu_343_p2 );
    sensitive << ( exitcond4_fu_254_p2 );
    sensitive << ( exitcond3_fu_266_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    ap_CS_fsm = "000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "conv_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, output_r_address0, "(port)output_r_address0");
    sc_trace(mVcdFile, output_r_ce0, "(port)output_r_ce0");
    sc_trace(mVcdFile, output_r_we0, "(port)output_r_we0");
    sc_trace(mVcdFile, output_r_d0, "(port)output_r_d0");
    sc_trace(mVcdFile, image_r_address0, "(port)image_r_address0");
    sc_trace(mVcdFile, image_r_ce0, "(port)image_r_ce0");
    sc_trace(mVcdFile, image_r_q0, "(port)image_r_q0");
    sc_trace(mVcdFile, weight_address0, "(port)weight_address0");
    sc_trace(mVcdFile, weight_ce0, "(port)weight_ce0");
    sc_trace(mVcdFile, weight_q0, "(port)weight_q0");
    sc_trace(mVcdFile, bias_address0, "(port)bias_address0");
    sc_trace(mVcdFile, bias_ce0, "(port)bias_ce0");
    sc_trace(mVcdFile, bias_q0, "(port)bias_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, filter_1_fu_229_p2, "filter_1_fu_229_p2");
    sc_trace(mVcdFile, filter_1_reg_455, "filter_1_reg_455");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_cast1_fu_240_p1, "tmp_cast1_fu_240_p1");
    sc_trace(mVcdFile, tmp_cast1_reg_460, "tmp_cast1_reg_460");
    sc_trace(mVcdFile, exitcond5_fu_223_p2, "exitcond5_fu_223_p2");
    sc_trace(mVcdFile, tmp_cast_fu_244_p1, "tmp_cast_fu_244_p1");
    sc_trace(mVcdFile, tmp_cast_reg_465, "tmp_cast_reg_465");
    sc_trace(mVcdFile, bias_addr_reg_470, "bias_addr_reg_470");
    sc_trace(mVcdFile, next_mul_fu_248_p2, "next_mul_fu_248_p2");
    sc_trace(mVcdFile, next_mul_reg_475, "next_mul_reg_475");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_1_fu_260_p2, "i_1_fu_260_p2");
    sc_trace(mVcdFile, i_1_reg_483, "i_1_reg_483");
    sc_trace(mVcdFile, j_1_fu_272_p2, "j_1_fu_272_p2");
    sc_trace(mVcdFile, j_1_reg_491, "j_1_reg_491");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, row_offset_1_fu_288_p2, "row_offset_1_fu_288_p2");
    sc_trace(mVcdFile, row_offset_1_reg_499, "row_offset_1_reg_499");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_9_fu_294_p2, "tmp_9_fu_294_p2");
    sc_trace(mVcdFile, tmp_9_reg_504, "tmp_9_reg_504");
    sc_trace(mVcdFile, exitcond2_fu_282_p2, "exitcond2_fu_282_p2");
    sc_trace(mVcdFile, tmp_17_cast_fu_308_p1, "tmp_17_cast_fu_308_p1");
    sc_trace(mVcdFile, tmp_17_cast_reg_509, "tmp_17_cast_reg_509");
    sc_trace(mVcdFile, tmp_10_fu_334_p2, "tmp_10_fu_334_p2");
    sc_trace(mVcdFile, tmp_10_reg_514, "tmp_10_reg_514");
    sc_trace(mVcdFile, col_offset_1_fu_349_p2, "col_offset_1_fu_349_p2");
    sc_trace(mVcdFile, col_offset_1_reg_522, "col_offset_1_reg_522");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, exitcond1_fu_343_p2, "exitcond1_fu_343_p2");
    sc_trace(mVcdFile, image_load_reg_537, "image_load_reg_537");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, weight_load_reg_542, "weight_load_reg_542");
    sc_trace(mVcdFile, grp_fu_214_p2, "grp_fu_214_p2");
    sc_trace(mVcdFile, tmp_5_reg_547, "tmp_5_reg_547");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, grp_fu_208_p2, "grp_fu_208_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, bias_load_reg_557, "bias_load_reg_557");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, a_assign_reg_562, "a_assign_reg_562");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, a_assign_1_fu_441_p3, "a_assign_1_fu_441_p3");
    sc_trace(mVcdFile, a_assign_1_reg_569, "a_assign_1_reg_569");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, filter_reg_115, "filter_reg_115");
    sc_trace(mVcdFile, exitcond4_fu_254_p2, "exitcond4_fu_254_p2");
    sc_trace(mVcdFile, i_reg_126, "i_reg_126");
    sc_trace(mVcdFile, exitcond3_fu_266_p2, "exitcond3_fu_266_p2");
    sc_trace(mVcdFile, phi_mul_reg_138, "phi_mul_reg_138");
    sc_trace(mVcdFile, j_reg_150, "j_reg_150");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, sum_reg_162, "sum_reg_162");
    sc_trace(mVcdFile, row_offset_reg_174, "row_offset_reg_174");
    sc_trace(mVcdFile, sum_1_reg_185, "sum_1_reg_185");
    sc_trace(mVcdFile, col_offset_reg_197, "col_offset_reg_197");
    sc_trace(mVcdFile, tmp_fu_235_p1, "tmp_fu_235_p1");
    sc_trace(mVcdFile, tmp_13_fu_368_p1, "tmp_13_fu_368_p1");
    sc_trace(mVcdFile, tmp_23_cast_fu_395_p1, "tmp_23_cast_fu_395_p1");
    sc_trace(mVcdFile, tmp_15_cast_fu_448_p1, "tmp_15_cast_fu_448_p1");
    sc_trace(mVcdFile, grp_fu_208_p0, "grp_fu_208_p0");
    sc_trace(mVcdFile, grp_fu_208_p1, "grp_fu_208_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, row_offset_cast4_fu_278_p1, "row_offset_cast4_fu_278_p1");
    sc_trace(mVcdFile, tmp_11_fu_300_p3, "tmp_11_fu_300_p3");
    sc_trace(mVcdFile, tmp_7_cast_fu_312_p1, "tmp_7_cast_fu_312_p1");
    sc_trace(mVcdFile, tmp_7_fu_316_p2, "tmp_7_fu_316_p2");
    sc_trace(mVcdFile, tmp_8_fu_322_p3, "tmp_8_fu_322_p3");
    sc_trace(mVcdFile, tmp_14_cast_fu_330_p1, "tmp_14_cast_fu_330_p1");
    sc_trace(mVcdFile, col_offset_cast2_fu_339_p1, "col_offset_cast2_fu_339_p1");
    sc_trace(mVcdFile, tmp_2_fu_355_p2, "tmp_2_fu_355_p2");
    sc_trace(mVcdFile, tmp_12_fu_361_p3, "tmp_12_fu_361_p3");
    sc_trace(mVcdFile, tmp_8_cast_fu_373_p1, "tmp_8_cast_fu_373_p1");
    sc_trace(mVcdFile, tmp_14_fu_377_p2, "tmp_14_fu_377_p2");
    sc_trace(mVcdFile, tmp_22_cast_fu_382_p3, "tmp_22_cast_fu_382_p3");
    sc_trace(mVcdFile, tmp_15_fu_390_p2, "tmp_15_fu_390_p2");
    sc_trace(mVcdFile, a_assign_to_int_fu_400_p1, "a_assign_to_int_fu_400_p1");
    sc_trace(mVcdFile, tmp_6_fu_403_p4, "tmp_6_fu_403_p4");
    sc_trace(mVcdFile, tmp_1_fu_413_p1, "tmp_1_fu_413_p1");
    sc_trace(mVcdFile, notrhs_fu_423_p2, "notrhs_fu_423_p2");
    sc_trace(mVcdFile, notlhs_fu_417_p2, "notlhs_fu_417_p2");
    sc_trace(mVcdFile, tmp_4_fu_429_p2, "tmp_4_fu_429_p2");
    sc_trace(mVcdFile, tmp_s_fu_218_p2, "tmp_s_fu_218_p2");
    sc_trace(mVcdFile, tmp_3_fu_435_p2, "tmp_3_fu_435_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("conv.hdltvin.dat");
    mHdltvoutHandle.open("conv.hdltvout.dat");
}

conv::~conv() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete conv_fadd_32ns_32bkb_U1;
    delete conv_fmul_32ns_32cud_U2;
    delete conv_fcmp_32ns_32dEe_U3;
}

void conv::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void conv::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void conv::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv5_2;
}

void conv::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_282_p2.read()))) {
        col_offset_reg_197 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        col_offset_reg_197 = col_offset_1_reg_522.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond4_fu_254_p2.read()))) {
        filter_reg_115 = filter_1_reg_455.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        filter_reg_115 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond3_fu_266_p2.read()))) {
        i_reg_126 = i_1_reg_483.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond5_fu_223_p2.read(), ap_const_lv1_0))) {
        i_reg_126 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_254_p2.read()))) {
        j_reg_150 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        j_reg_150 = j_1_reg_491.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond3_fu_266_p2.read()))) {
        phi_mul_reg_138 = next_mul_reg_475.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond5_fu_223_p2.read(), ap_const_lv1_0))) {
        phi_mul_reg_138 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_266_p2.read()))) {
        row_offset_reg_174 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_343_p2.read()))) {
        row_offset_reg_174 = row_offset_1_reg_499.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_282_p2.read()))) {
        sum_1_reg_185 = sum_reg_162.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        sum_1_reg_185 = grp_fu_208_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_266_p2.read()))) {
        sum_reg_162 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_343_p2.read()))) {
        sum_reg_162 = sum_1_reg_185.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        a_assign_1_reg_569 = a_assign_1_fu_441_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        a_assign_reg_562 = grp_fu_208_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond5_fu_223_p2.read(), ap_const_lv1_0))) {
        bias_addr_reg_470 =  (sc_lv<3>) (tmp_fu_235_p1.read());
        tmp_cast1_reg_460 = tmp_cast1_fu_240_p1.read();
        tmp_cast_reg_465 = tmp_cast_fu_244_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        bias_load_reg_557 = bias_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        col_offset_1_reg_522 = col_offset_1_fu_349_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        filter_1_reg_455 = filter_1_fu_229_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_1_reg_483 = i_1_fu_260_p2.read();
        next_mul_reg_475 = next_mul_fu_248_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        image_load_reg_537 = image_r_q0.read();
        weight_load_reg_542 = weight_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        j_1_reg_491 = j_1_fu_272_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        row_offset_1_reg_499 = row_offset_1_fu_288_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(exitcond2_fu_282_p2.read(), ap_const_lv1_1))) {
        tmp_10_reg_514 = tmp_10_fu_334_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_282_p2.read()))) {
        tmp_17_cast_reg_509 = tmp_17_cast_fu_308_p1.read();
        tmp_9_reg_504 = tmp_9_fu_294_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        tmp_5_reg_547 = grp_fu_214_p2.read();
    }
}

void conv::thread_a_assign_1_fu_441_p3() {
    a_assign_1_fu_441_p3 = (!tmp_3_fu_435_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_3_fu_435_p2.read()[0].to_bool())? a_assign_reg_562.read(): ap_const_lv32_0);
}

void conv::thread_a_assign_to_int_fu_400_p1() {
    a_assign_to_int_fu_400_p1 = a_assign_reg_562.read();
}

void conv::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void conv::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void conv::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void conv::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void conv::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void conv::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void conv::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void conv::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void conv::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void conv::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void conv::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void conv::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void conv::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void conv::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void conv::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void conv::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void conv::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond5_fu_223_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void conv::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void conv::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond5_fu_223_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void conv::thread_bias_address0() {
    bias_address0 = bias_addr_reg_470.read();
}

void conv::thread_bias_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        bias_ce0 = ap_const_logic_1;
    } else {
        bias_ce0 = ap_const_logic_0;
    }
}

void conv::thread_col_offset_1_fu_349_p2() {
    col_offset_1_fu_349_p2 = (!col_offset_reg_197.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(col_offset_reg_197.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void conv::thread_col_offset_cast2_fu_339_p1() {
    col_offset_cast2_fu_339_p1 = esl_zext<5,3>(col_offset_reg_197.read());
}

void conv::thread_exitcond1_fu_343_p2() {
    exitcond1_fu_343_p2 = (!col_offset_reg_197.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(col_offset_reg_197.read() == ap_const_lv3_4);
}

void conv::thread_exitcond2_fu_282_p2() {
    exitcond2_fu_282_p2 = (!row_offset_reg_174.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(row_offset_reg_174.read() == ap_const_lv3_4);
}

void conv::thread_exitcond3_fu_266_p2() {
    exitcond3_fu_266_p2 = (!j_reg_150.read().is_01() || !ap_const_lv5_1D.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_150.read() == ap_const_lv5_1D);
}

void conv::thread_exitcond4_fu_254_p2() {
    exitcond4_fu_254_p2 = (!i_reg_126.read().is_01() || !ap_const_lv5_1D.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_126.read() == ap_const_lv5_1D);
}

void conv::thread_exitcond5_fu_223_p2() {
    exitcond5_fu_223_p2 = (!filter_reg_115.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(filter_reg_115.read() == ap_const_lv4_8);
}

void conv::thread_filter_1_fu_229_p2() {
    filter_1_fu_229_p2 = (!filter_reg_115.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(filter_reg_115.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void conv::thread_grp_fu_208_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_fu_208_p0 = sum_reg_162.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_208_p0 = sum_1_reg_185.read();
    } else {
        grp_fu_208_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void conv::thread_grp_fu_208_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_fu_208_p1 = bias_load_reg_557.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_208_p1 = tmp_5_reg_547.read();
    } else {
        grp_fu_208_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void conv::thread_i_1_fu_260_p2() {
    i_1_fu_260_p2 = (!i_reg_126.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_126.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void conv::thread_image_r_address0() {
    image_r_address0 =  (sc_lv<10>) (tmp_13_fu_368_p1.read());
}

void conv::thread_image_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        image_r_ce0 = ap_const_logic_1;
    } else {
        image_r_ce0 = ap_const_logic_0;
    }
}

void conv::thread_j_1_fu_272_p2() {
    j_1_fu_272_p2 = (!j_reg_150.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(j_reg_150.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void conv::thread_next_mul_fu_248_p2() {
    next_mul_fu_248_p2 = (!phi_mul_reg_138.read().is_01() || !ap_const_lv10_1D.is_01())? sc_lv<10>(): (sc_biguint<10>(phi_mul_reg_138.read()) + sc_biguint<10>(ap_const_lv10_1D));
}

void conv::thread_notlhs_fu_417_p2() {
    notlhs_fu_417_p2 = (!tmp_6_fu_403_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_6_fu_403_p4.read() != ap_const_lv8_FF);
}

void conv::thread_notrhs_fu_423_p2() {
    notrhs_fu_423_p2 = (!tmp_1_fu_413_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_1_fu_413_p1.read() == ap_const_lv23_0);
}

void conv::thread_output_r_address0() {
    output_r_address0 =  (sc_lv<13>) (tmp_15_cast_fu_448_p1.read());
}

void conv::thread_output_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        output_r_ce0 = ap_const_logic_1;
    } else {
        output_r_ce0 = ap_const_logic_0;
    }
}

void conv::thread_output_r_d0() {
    output_r_d0 = a_assign_1_reg_569.read();
}

void conv::thread_output_r_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        output_r_we0 = ap_const_logic_1;
    } else {
        output_r_we0 = ap_const_logic_0;
    }
}

void conv::thread_row_offset_1_fu_288_p2() {
    row_offset_1_fu_288_p2 = (!row_offset_reg_174.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(row_offset_reg_174.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void conv::thread_row_offset_cast4_fu_278_p1() {
    row_offset_cast4_fu_278_p1 = esl_zext<5,3>(row_offset_reg_174.read());
}

void conv::thread_tmp_10_fu_334_p2() {
    tmp_10_fu_334_p2 = (!tmp_cast_reg_465.read().is_01() || !tmp_14_cast_fu_330_p1.read().is_01())? sc_lv<14>(): (sc_biguint<14>(tmp_cast_reg_465.read()) + sc_biguint<14>(tmp_14_cast_fu_330_p1.read()));
}

void conv::thread_tmp_11_fu_300_p3() {
    tmp_11_fu_300_p3 = esl_concat<3,2>(row_offset_reg_174.read(), ap_const_lv2_0);
}

void conv::thread_tmp_12_fu_361_p3() {
    tmp_12_fu_361_p3 = esl_concat<5,5>(tmp_9_reg_504.read(), tmp_2_fu_355_p2.read());
}

void conv::thread_tmp_13_fu_368_p1() {
    tmp_13_fu_368_p1 = esl_zext<64,10>(tmp_12_fu_361_p3.read());
}

void conv::thread_tmp_14_cast_fu_330_p1() {
    tmp_14_cast_fu_330_p1 = esl_zext<14,13>(tmp_8_fu_322_p3.read());
}

void conv::thread_tmp_14_fu_377_p2() {
    tmp_14_fu_377_p2 = (!tmp_17_cast_reg_509.read().is_01() || !tmp_8_cast_fu_373_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(tmp_17_cast_reg_509.read()) + sc_biguint<6>(tmp_8_cast_fu_373_p1.read()));
}

void conv::thread_tmp_15_cast_fu_448_p1() {
    tmp_15_cast_fu_448_p1 = esl_zext<64,14>(tmp_10_reg_514.read());
}

void conv::thread_tmp_15_fu_390_p2() {
    tmp_15_fu_390_p2 = (!tmp_22_cast_fu_382_p3.read().is_01() || !tmp_cast1_reg_460.read().is_01())? sc_lv<9>(): (sc_biguint<9>(tmp_22_cast_fu_382_p3.read()) + sc_biguint<9>(tmp_cast1_reg_460.read()));
}

void conv::thread_tmp_17_cast_fu_308_p1() {
    tmp_17_cast_fu_308_p1 = esl_zext<6,5>(tmp_11_fu_300_p3.read());
}

void conv::thread_tmp_1_fu_413_p1() {
    tmp_1_fu_413_p1 = a_assign_to_int_fu_400_p1.read().range(23-1, 0);
}

void conv::thread_tmp_22_cast_fu_382_p3() {
    tmp_22_cast_fu_382_p3 = esl_concat<6,3>(tmp_14_fu_377_p2.read(), ap_const_lv3_0);
}

void conv::thread_tmp_23_cast_fu_395_p1() {
    tmp_23_cast_fu_395_p1 = esl_zext<64,9>(tmp_15_fu_390_p2.read());
}

void conv::thread_tmp_2_fu_355_p2() {
    tmp_2_fu_355_p2 = (!col_offset_cast2_fu_339_p1.read().is_01() || !j_reg_150.read().is_01())? sc_lv<5>(): (sc_biguint<5>(col_offset_cast2_fu_339_p1.read()) + sc_biguint<5>(j_reg_150.read()));
}

void conv::thread_tmp_3_fu_435_p2() {
    tmp_3_fu_435_p2 = (tmp_4_fu_429_p2.read() & tmp_s_fu_218_p2.read());
}

void conv::thread_tmp_4_fu_429_p2() {
    tmp_4_fu_429_p2 = (notrhs_fu_423_p2.read() | notlhs_fu_417_p2.read());
}

void conv::thread_tmp_6_fu_403_p4() {
    tmp_6_fu_403_p4 = a_assign_to_int_fu_400_p1.read().range(30, 23);
}

void conv::thread_tmp_7_cast_fu_312_p1() {
    tmp_7_cast_fu_312_p1 = esl_zext<10,5>(j_reg_150.read());
}

void conv::thread_tmp_7_fu_316_p2() {
    tmp_7_fu_316_p2 = (!tmp_7_cast_fu_312_p1.read().is_01() || !phi_mul_reg_138.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp_7_cast_fu_312_p1.read()) + sc_biguint<10>(phi_mul_reg_138.read()));
}

void conv::thread_tmp_8_cast_fu_373_p1() {
    tmp_8_cast_fu_373_p1 = esl_zext<6,3>(col_offset_reg_197.read());
}

void conv::thread_tmp_8_fu_322_p3() {
    tmp_8_fu_322_p3 = esl_concat<10,3>(tmp_7_fu_316_p2.read(), ap_const_lv3_0);
}

void conv::thread_tmp_9_fu_294_p2() {
    tmp_9_fu_294_p2 = (!i_reg_126.read().is_01() || !row_offset_cast4_fu_278_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_126.read()) + sc_biguint<5>(row_offset_cast4_fu_278_p1.read()));
}

void conv::thread_tmp_cast1_fu_240_p1() {
    tmp_cast1_fu_240_p1 = esl_zext<9,4>(filter_reg_115.read());
}

void conv::thread_tmp_cast_fu_244_p1() {
    tmp_cast_fu_244_p1 = esl_zext<14,4>(filter_reg_115.read());
}

void conv::thread_tmp_fu_235_p1() {
    tmp_fu_235_p1 = esl_zext<64,4>(filter_reg_115.read());
}

void conv::thread_weight_address0() {
    weight_address0 =  (sc_lv<7>) (tmp_23_cast_fu_395_p1.read());
}

void conv::thread_weight_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        weight_ce0 = ap_const_logic_1;
    } else {
        weight_ce0 = ap_const_logic_0;
    }
}

void conv::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond5_fu_223_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond4_fu_254_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond3_fu_266_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_282_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state17;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_343_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<24>) ("XXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void conv::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_address0\" :  \"" << output_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_ce0\" :  \"" << output_r_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_we0\" :  \"" << output_r_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_d0\" :  \"" << output_r_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"image_r_address0\" :  \"" << image_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"image_r_ce0\" :  \"" << image_r_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"image_r_q0\" :  \"" << image_r_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weight_address0\" :  \"" << weight_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weight_ce0\" :  \"" << weight_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"weight_q0\" :  \"" << weight_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bias_address0\" :  \"" << bias_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bias_ce0\" :  \"" << bias_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"bias_q0\" :  \"" << bias_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

