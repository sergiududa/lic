// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fc,hls_ip_2017_4_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.159000,HLS_SYN_LAT=761521,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=714,HLS_SYN_LUT=1266}" *)

module fc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weight_address0,
        weight_ce0,
        weight_q0,
        bias_address0,
        bias_ce0,
        bias_q0
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_state11 = 21'd1024;
parameter    ap_ST_fsm_state12 = 21'd2048;
parameter    ap_ST_fsm_state13 = 21'd4096;
parameter    ap_ST_fsm_state14 = 21'd8192;
parameter    ap_ST_fsm_state15 = 21'd16384;
parameter    ap_ST_fsm_state16 = 21'd32768;
parameter    ap_ST_fsm_state17 = 21'd65536;
parameter    ap_ST_fsm_state18 = 21'd131072;
parameter    ap_ST_fsm_state19 = 21'd262144;
parameter    ap_ST_fsm_state20 = 21'd524288;
parameter    ap_ST_fsm_state21 = 21'd1048576;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [16:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;
output  [6:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_r_ce0;
reg output_r_we0;
reg input_r_ce0;
reg weight_ce0;
reg bias_ce0;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] i_1_fu_153_p2;
reg   [6:0] i_1_reg_276;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_fu_159_p1;
reg   [63:0] tmp_reg_281;
wire   [0:0] exitcond1_fu_147_p2;
wire   [17:0] tmp_cast_fu_164_p1;
reg   [17:0] tmp_cast_reg_286;
reg   [6:0] output_addr_reg_291;
wire   [9:0] j_1_fu_174_p2;
reg   [9:0] j_1_reg_299;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_168_p2;
reg   [31:0] weight_load_reg_319;
wire    ap_CS_fsm_state4;
reg   [31:0] input_load_reg_324;
wire   [31:0] grp_fu_138_p2;
reg   [31:0] tmp_7_reg_329;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_133_p2;
wire    ap_CS_fsm_state13;
reg   [31:0] bias_load_reg_339;
wire    ap_CS_fsm_state14;
reg   [31:0] a_assign_reg_344;
wire    ap_CS_fsm_state19;
wire   [31:0] a_assign_1_fu_266_p3;
reg   [31:0] a_assign_1_reg_351;
wire    ap_CS_fsm_state20;
reg   [6:0] i_reg_99;
wire    ap_CS_fsm_state21;
reg   [31:0] tmp_2_reg_110;
reg   [9:0] j_reg_122;
wire  signed [63:0] tmp_13_cast_fu_220_p1;
wire   [63:0] tmp_6_fu_180_p1;
reg   [31:0] grp_fu_133_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state5;
wire   [16:0] tmp_s_fu_185_p3;
wire   [12:0] tmp_10_fu_197_p3;
wire   [17:0] p_shl_cast_fu_193_p1;
wire   [17:0] p_shl1_cast_fu_205_p1;
wire   [17:0] tmp_11_fu_209_p2;
wire   [17:0] tmp_12_fu_215_p2;
wire   [31:0] a_assign_to_int_fu_225_p1;
wire   [7:0] tmp_1_fu_228_p4;
wire   [22:0] tmp_3_fu_238_p1;
wire   [0:0] notrhs_fu_248_p2;
wire   [0:0] notlhs_fu_242_p2;
wire   [0:0] tmp_4_fu_254_p2;
wire   [0:0] tmp_5_fu_142_p2;
wire   [0:0] tmp_9_fu_260_p2;
reg   [20:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
end

fc_fadd_32ns_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fc_fadd_32ns_32nsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_2_reg_110),
    .din1(grp_fu_133_p1),
    .ce(1'b1),
    .dout(grp_fu_133_p2)
);

fc_fmul_32ns_32nscud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fc_fmul_32ns_32nscud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_load_reg_319),
    .din1(input_load_reg_324),
    .ce(1'b1),
    .dout(grp_fu_138_p2)
);

fc_fcmp_32ns_32nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fc_fcmp_32ns_32nsdEe_U3(
    .din0(a_assign_reg_344),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_5_fu_142_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        i_reg_99 <= i_1_reg_276;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_99 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_reg_122 <= j_1_reg_299;
    end else if (((exitcond1_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_122 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_2_reg_110 <= grp_fu_133_p2;
    end else if (((exitcond1_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_2_reg_110 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        a_assign_1_reg_351 <= a_assign_1_fu_266_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        a_assign_reg_344 <= grp_fu_133_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        bias_load_reg_339 <= bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_276 <= i_1_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_load_reg_324 <= input_r_q0;
        weight_load_reg_319 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_299 <= j_1_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        output_addr_reg_291 <= tmp_fu_159_p1;
        tmp_cast_reg_286[6 : 0] <= tmp_cast_fu_164_p1[6 : 0];
        tmp_reg_281[6 : 0] <= tmp_fu_159_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_7_reg_329 <= grp_fu_138_p2;
    end
end

always @ (*) begin
    if (((exitcond1_fu_147_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_147_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_133_p1 = bias_load_reg_339;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_133_p1 = tmp_7_reg_329;
    end else begin
        grp_fu_133_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_147_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_assign_1_fu_266_p3 = ((tmp_9_fu_260_p2[0:0] === 1'b1) ? a_assign_reg_344 : 32'd0);

assign a_assign_to_int_fu_225_p1 = a_assign_reg_344;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_address0 = tmp_reg_281;

assign exitcond1_fu_147_p2 = ((i_reg_99 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond_fu_168_p2 = ((j_reg_122 == 10'd576) ? 1'b1 : 1'b0);

assign i_1_fu_153_p2 = (i_reg_99 + 7'd1);

assign input_r_address0 = tmp_6_fu_180_p1;

assign j_1_fu_174_p2 = (j_reg_122 + 10'd1);

assign notlhs_fu_242_p2 = ((tmp_1_fu_228_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_248_p2 = ((tmp_3_fu_238_p1 == 23'd0) ? 1'b1 : 1'b0);

assign output_r_address0 = output_addr_reg_291;

assign output_r_d0 = a_assign_1_reg_351;

assign p_shl1_cast_fu_205_p1 = tmp_10_fu_197_p3;

assign p_shl_cast_fu_193_p1 = tmp_s_fu_185_p3;

assign tmp_10_fu_197_p3 = {{j_reg_122}, {3'd0}};

assign tmp_11_fu_209_p2 = (p_shl_cast_fu_193_p1 - p_shl1_cast_fu_205_p1);

assign tmp_12_fu_215_p2 = (tmp_11_fu_209_p2 + tmp_cast_reg_286);

assign tmp_13_cast_fu_220_p1 = $signed(tmp_12_fu_215_p2);

assign tmp_1_fu_228_p4 = {{a_assign_to_int_fu_225_p1[30:23]}};

assign tmp_3_fu_238_p1 = a_assign_to_int_fu_225_p1[22:0];

assign tmp_4_fu_254_p2 = (notrhs_fu_248_p2 | notlhs_fu_242_p2);

assign tmp_6_fu_180_p1 = j_reg_122;

assign tmp_9_fu_260_p2 = (tmp_5_fu_142_p2 & tmp_4_fu_254_p2);

assign tmp_cast_fu_164_p1 = i_reg_99;

assign tmp_fu_159_p1 = i_reg_99;

assign tmp_s_fu_185_p3 = {{j_reg_122}, {7'd0}};

assign weight_address0 = tmp_13_cast_fu_220_p1;

always @ (posedge ap_clk) begin
    tmp_reg_281[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    tmp_cast_reg_286[17:7] <= 11'b00000000000;
end

endmodule //fc
