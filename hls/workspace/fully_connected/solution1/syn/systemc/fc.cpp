// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<21> fc::ap_ST_fsm_state1 = "1";
const sc_lv<21> fc::ap_ST_fsm_state2 = "10";
const sc_lv<21> fc::ap_ST_fsm_state3 = "100";
const sc_lv<21> fc::ap_ST_fsm_state4 = "1000";
const sc_lv<21> fc::ap_ST_fsm_state5 = "10000";
const sc_lv<21> fc::ap_ST_fsm_state6 = "100000";
const sc_lv<21> fc::ap_ST_fsm_state7 = "1000000";
const sc_lv<21> fc::ap_ST_fsm_state8 = "10000000";
const sc_lv<21> fc::ap_ST_fsm_state9 = "100000000";
const sc_lv<21> fc::ap_ST_fsm_state10 = "1000000000";
const sc_lv<21> fc::ap_ST_fsm_state11 = "10000000000";
const sc_lv<21> fc::ap_ST_fsm_state12 = "100000000000";
const sc_lv<21> fc::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<21> fc::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<21> fc::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<21> fc::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<21> fc::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<21> fc::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<21> fc::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<21> fc::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<21> fc::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<32> fc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> fc::ap_const_lv32_1 = "1";
const sc_lv<1> fc::ap_const_lv1_0 = "0";
const sc_lv<32> fc::ap_const_lv32_2 = "10";
const sc_lv<1> fc::ap_const_lv1_1 = "1";
const sc_lv<32> fc::ap_const_lv32_3 = "11";
const sc_lv<32> fc::ap_const_lv32_7 = "111";
const sc_lv<32> fc::ap_const_lv32_C = "1100";
const sc_lv<32> fc::ap_const_lv32_D = "1101";
const sc_lv<32> fc::ap_const_lv32_12 = "10010";
const sc_lv<32> fc::ap_const_lv32_13 = "10011";
const sc_lv<7> fc::ap_const_lv7_0 = "0000000";
const sc_lv<32> fc::ap_const_lv32_14 = "10100";
const sc_lv<10> fc::ap_const_lv10_0 = "0000000000";
const sc_lv<32> fc::ap_const_lv32_8 = "1000";
const sc_lv<32> fc::ap_const_lv32_E = "1110";
const sc_lv<32> fc::ap_const_lv32_4 = "100";
const sc_lv<7> fc::ap_const_lv7_78 = "1111000";
const sc_lv<7> fc::ap_const_lv7_1 = "1";
const sc_lv<10> fc::ap_const_lv10_240 = "1001000000";
const sc_lv<10> fc::ap_const_lv10_1 = "1";
const sc_lv<3> fc::ap_const_lv3_0 = "000";
const sc_lv<32> fc::ap_const_lv32_17 = "10111";
const sc_lv<32> fc::ap_const_lv32_1E = "11110";
const sc_lv<8> fc::ap_const_lv8_FF = "11111111";
const sc_lv<23> fc::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<5> fc::ap_const_lv5_2 = "10";
const bool fc::ap_const_boolean_1 = true;

fc::fc(sc_module_name name) : sc_module(name), mVcdFile(0) {
    fc_fadd_32ns_32nsbkb_U1 = new fc_fadd_32ns_32nsbkb<1,5,32,32,32>("fc_fadd_32ns_32nsbkb_U1");
    fc_fadd_32ns_32nsbkb_U1->clk(ap_clk);
    fc_fadd_32ns_32nsbkb_U1->reset(ap_rst);
    fc_fadd_32ns_32nsbkb_U1->din0(tmp_2_reg_110);
    fc_fadd_32ns_32nsbkb_U1->din1(grp_fu_133_p1);
    fc_fadd_32ns_32nsbkb_U1->ce(ap_var_for_const0);
    fc_fadd_32ns_32nsbkb_U1->dout(grp_fu_133_p2);
    fc_fmul_32ns_32nscud_U2 = new fc_fmul_32ns_32nscud<1,4,32,32,32>("fc_fmul_32ns_32nscud_U2");
    fc_fmul_32ns_32nscud_U2->clk(ap_clk);
    fc_fmul_32ns_32nscud_U2->reset(ap_rst);
    fc_fmul_32ns_32nscud_U2->din0(weight_load_reg_319);
    fc_fmul_32ns_32nscud_U2->din1(input_load_reg_324);
    fc_fmul_32ns_32nscud_U2->ce(ap_var_for_const0);
    fc_fmul_32ns_32nscud_U2->dout(grp_fu_138_p2);
    fc_fcmp_32ns_32nsdEe_U3 = new fc_fcmp_32ns_32nsdEe<1,1,32,32,1>("fc_fcmp_32ns_32nsdEe_U3");
    fc_fcmp_32ns_32nsdEe_U3->din0(a_assign_reg_344);
    fc_fcmp_32ns_32nsdEe_U3->din1(ap_var_for_const1);
    fc_fcmp_32ns_32nsdEe_U3->opcode(ap_var_for_const2);
    fc_fcmp_32ns_32nsdEe_U3->dout(tmp_5_fu_142_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_assign_1_fu_266_p3);
    sensitive << ( a_assign_reg_344 );
    sensitive << ( tmp_9_fu_260_p2 );

    SC_METHOD(thread_a_assign_to_int_fu_225_p1);
    sensitive << ( a_assign_reg_344 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_147_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_147_p2 );

    SC_METHOD(thread_bias_address0);
    sensitive << ( tmp_reg_281 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_bias_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_exitcond1_fu_147_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_99 );

    SC_METHOD(thread_exitcond_fu_168_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_reg_122 );

    SC_METHOD(thread_grp_fu_133_p1);
    sensitive << ( tmp_7_reg_329 );
    sensitive << ( bias_load_reg_339 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_i_1_fu_153_p2);
    sensitive << ( i_reg_99 );

    SC_METHOD(thread_input_r_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_6_fu_180_p1 );

    SC_METHOD(thread_input_r_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_j_1_fu_174_p2);
    sensitive << ( j_reg_122 );

    SC_METHOD(thread_notlhs_fu_242_p2);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( tmp_1_fu_228_p4 );

    SC_METHOD(thread_notrhs_fu_248_p2);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( tmp_3_fu_238_p1 );

    SC_METHOD(thread_output_r_address0);
    sensitive << ( output_addr_reg_291 );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_output_r_ce0);
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_output_r_d0);
    sensitive << ( a_assign_1_reg_351 );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_output_r_we0);
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_p_shl1_cast_fu_205_p1);
    sensitive << ( tmp_10_fu_197_p3 );

    SC_METHOD(thread_p_shl_cast_fu_193_p1);
    sensitive << ( tmp_s_fu_185_p3 );

    SC_METHOD(thread_tmp_10_fu_197_p3);
    sensitive << ( j_reg_122 );

    SC_METHOD(thread_tmp_11_fu_209_p2);
    sensitive << ( p_shl_cast_fu_193_p1 );
    sensitive << ( p_shl1_cast_fu_205_p1 );

    SC_METHOD(thread_tmp_12_fu_215_p2);
    sensitive << ( tmp_cast_reg_286 );
    sensitive << ( tmp_11_fu_209_p2 );

    SC_METHOD(thread_tmp_13_cast_fu_220_p1);
    sensitive << ( tmp_12_fu_215_p2 );

    SC_METHOD(thread_tmp_1_fu_228_p4);
    sensitive << ( a_assign_to_int_fu_225_p1 );

    SC_METHOD(thread_tmp_3_fu_238_p1);
    sensitive << ( a_assign_to_int_fu_225_p1 );

    SC_METHOD(thread_tmp_4_fu_254_p2);
    sensitive << ( notrhs_fu_248_p2 );
    sensitive << ( notlhs_fu_242_p2 );

    SC_METHOD(thread_tmp_6_fu_180_p1);
    sensitive << ( j_reg_122 );

    SC_METHOD(thread_tmp_9_fu_260_p2);
    sensitive << ( tmp_4_fu_254_p2 );
    sensitive << ( tmp_5_fu_142_p2 );

    SC_METHOD(thread_tmp_cast_fu_164_p1);
    sensitive << ( i_reg_99 );

    SC_METHOD(thread_tmp_fu_159_p1);
    sensitive << ( i_reg_99 );

    SC_METHOD(thread_tmp_s_fu_185_p3);
    sensitive << ( j_reg_122 );

    SC_METHOD(thread_weight_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_13_cast_fu_220_p1 );

    SC_METHOD(thread_weight_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_147_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_168_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    ap_CS_fsm = "000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, output_r_address0, "(port)output_r_address0");
    sc_trace(mVcdFile, output_r_ce0, "(port)output_r_ce0");
    sc_trace(mVcdFile, output_r_we0, "(port)output_r_we0");
    sc_trace(mVcdFile, output_r_d0, "(port)output_r_d0");
    sc_trace(mVcdFile, input_r_address0, "(port)input_r_address0");
    sc_trace(mVcdFile, input_r_ce0, "(port)input_r_ce0");
    sc_trace(mVcdFile, input_r_q0, "(port)input_r_q0");
    sc_trace(mVcdFile, weight_address0, "(port)weight_address0");
    sc_trace(mVcdFile, weight_ce0, "(port)weight_ce0");
    sc_trace(mVcdFile, weight_q0, "(port)weight_q0");
    sc_trace(mVcdFile, bias_address0, "(port)bias_address0");
    sc_trace(mVcdFile, bias_ce0, "(port)bias_ce0");
    sc_trace(mVcdFile, bias_q0, "(port)bias_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_1_fu_153_p2, "i_1_fu_153_p2");
    sc_trace(mVcdFile, i_1_reg_276, "i_1_reg_276");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_159_p1, "tmp_fu_159_p1");
    sc_trace(mVcdFile, tmp_reg_281, "tmp_reg_281");
    sc_trace(mVcdFile, exitcond1_fu_147_p2, "exitcond1_fu_147_p2");
    sc_trace(mVcdFile, tmp_cast_fu_164_p1, "tmp_cast_fu_164_p1");
    sc_trace(mVcdFile, tmp_cast_reg_286, "tmp_cast_reg_286");
    sc_trace(mVcdFile, output_addr_reg_291, "output_addr_reg_291");
    sc_trace(mVcdFile, j_1_fu_174_p2, "j_1_fu_174_p2");
    sc_trace(mVcdFile, j_1_reg_299, "j_1_reg_299");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond_fu_168_p2, "exitcond_fu_168_p2");
    sc_trace(mVcdFile, weight_load_reg_319, "weight_load_reg_319");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, input_load_reg_324, "input_load_reg_324");
    sc_trace(mVcdFile, grp_fu_138_p2, "grp_fu_138_p2");
    sc_trace(mVcdFile, tmp_7_reg_329, "tmp_7_reg_329");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_fu_133_p2, "grp_fu_133_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, bias_load_reg_339, "bias_load_reg_339");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, a_assign_reg_344, "a_assign_reg_344");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, a_assign_1_fu_266_p3, "a_assign_1_fu_266_p3");
    sc_trace(mVcdFile, a_assign_1_reg_351, "a_assign_1_reg_351");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, i_reg_99, "i_reg_99");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, tmp_2_reg_110, "tmp_2_reg_110");
    sc_trace(mVcdFile, j_reg_122, "j_reg_122");
    sc_trace(mVcdFile, tmp_13_cast_fu_220_p1, "tmp_13_cast_fu_220_p1");
    sc_trace(mVcdFile, tmp_6_fu_180_p1, "tmp_6_fu_180_p1");
    sc_trace(mVcdFile, grp_fu_133_p1, "grp_fu_133_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_s_fu_185_p3, "tmp_s_fu_185_p3");
    sc_trace(mVcdFile, tmp_10_fu_197_p3, "tmp_10_fu_197_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_193_p1, "p_shl_cast_fu_193_p1");
    sc_trace(mVcdFile, p_shl1_cast_fu_205_p1, "p_shl1_cast_fu_205_p1");
    sc_trace(mVcdFile, tmp_11_fu_209_p2, "tmp_11_fu_209_p2");
    sc_trace(mVcdFile, tmp_12_fu_215_p2, "tmp_12_fu_215_p2");
    sc_trace(mVcdFile, a_assign_to_int_fu_225_p1, "a_assign_to_int_fu_225_p1");
    sc_trace(mVcdFile, tmp_1_fu_228_p4, "tmp_1_fu_228_p4");
    sc_trace(mVcdFile, tmp_3_fu_238_p1, "tmp_3_fu_238_p1");
    sc_trace(mVcdFile, notrhs_fu_248_p2, "notrhs_fu_248_p2");
    sc_trace(mVcdFile, notlhs_fu_242_p2, "notlhs_fu_242_p2");
    sc_trace(mVcdFile, tmp_4_fu_254_p2, "tmp_4_fu_254_p2");
    sc_trace(mVcdFile, tmp_5_fu_142_p2, "tmp_5_fu_142_p2");
    sc_trace(mVcdFile, tmp_9_fu_260_p2, "tmp_9_fu_260_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("fc.hdltvin.dat");
    mHdltvoutHandle.open("fc.hdltvout.dat");
}

fc::~fc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete fc_fadd_32ns_32nsbkb_U1;
    delete fc_fmul_32ns_32nscud_U2;
    delete fc_fcmp_32ns_32nsdEe_U3;
}

void fc::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void fc::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void fc::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv5_2;
}

void fc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        i_reg_99 = i_1_reg_276.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_99 = ap_const_lv7_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        j_reg_122 = j_1_reg_299.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_147_p2.read(), ap_const_lv1_0))) {
        j_reg_122 = ap_const_lv10_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        tmp_2_reg_110 = grp_fu_133_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_147_p2.read(), ap_const_lv1_0))) {
        tmp_2_reg_110 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        a_assign_1_reg_351 = a_assign_1_fu_266_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        a_assign_reg_344 = grp_fu_133_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        bias_load_reg_339 = bias_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_276 = i_1_fu_153_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        input_load_reg_324 = input_r_q0.read();
        weight_load_reg_319 = weight_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_1_reg_299 = j_1_fu_174_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_147_p2.read(), ap_const_lv1_0))) {
        output_addr_reg_291 =  (sc_lv<7>) (tmp_fu_159_p1.read());
        tmp_cast_reg_286 = tmp_cast_fu_164_p1.read();
        tmp_reg_281 = tmp_fu_159_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        tmp_7_reg_329 = grp_fu_138_p2.read();
    }
}

void fc::thread_a_assign_1_fu_266_p3() {
    a_assign_1_fu_266_p3 = (!tmp_9_fu_260_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_9_fu_260_p2.read()[0].to_bool())? a_assign_reg_344.read(): ap_const_lv32_0);
}

void fc::thread_a_assign_to_int_fu_225_p1() {
    a_assign_to_int_fu_225_p1 = a_assign_reg_344.read();
}

void fc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fc::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void fc::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void fc::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void fc::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void fc::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fc::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void fc::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void fc::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void fc::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void fc::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void fc::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void fc::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void fc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_147_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_147_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fc::thread_bias_address0() {
    bias_address0 =  (sc_lv<7>) (tmp_reg_281.read());
}

void fc::thread_bias_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        bias_ce0 = ap_const_logic_1;
    } else {
        bias_ce0 = ap_const_logic_0;
    }
}

void fc::thread_exitcond1_fu_147_p2() {
    exitcond1_fu_147_p2 = (!i_reg_99.read().is_01() || !ap_const_lv7_78.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_99.read() == ap_const_lv7_78);
}

void fc::thread_exitcond_fu_168_p2() {
    exitcond_fu_168_p2 = (!j_reg_122.read().is_01() || !ap_const_lv10_240.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_122.read() == ap_const_lv10_240);
}

void fc::thread_grp_fu_133_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        grp_fu_133_p1 = bias_load_reg_339.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_133_p1 = tmp_7_reg_329.read();
    } else {
        grp_fu_133_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void fc::thread_i_1_fu_153_p2() {
    i_1_fu_153_p2 = (!i_reg_99.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_reg_99.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void fc::thread_input_r_address0() {
    input_r_address0 =  (sc_lv<10>) (tmp_6_fu_180_p1.read());
}

void fc::thread_input_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        input_r_ce0 = ap_const_logic_1;
    } else {
        input_r_ce0 = ap_const_logic_0;
    }
}

void fc::thread_j_1_fu_174_p2() {
    j_1_fu_174_p2 = (!j_reg_122.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(j_reg_122.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void fc::thread_notlhs_fu_242_p2() {
    notlhs_fu_242_p2 = (!tmp_1_fu_228_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_1_fu_228_p4.read() != ap_const_lv8_FF);
}

void fc::thread_notrhs_fu_248_p2() {
    notrhs_fu_248_p2 = (!tmp_3_fu_238_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_3_fu_238_p1.read() == ap_const_lv23_0);
}

void fc::thread_output_r_address0() {
    output_r_address0 = output_addr_reg_291.read();
}

void fc::thread_output_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        output_r_ce0 = ap_const_logic_1;
    } else {
        output_r_ce0 = ap_const_logic_0;
    }
}

void fc::thread_output_r_d0() {
    output_r_d0 = a_assign_1_reg_351.read();
}

void fc::thread_output_r_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        output_r_we0 = ap_const_logic_1;
    } else {
        output_r_we0 = ap_const_logic_0;
    }
}

void fc::thread_p_shl1_cast_fu_205_p1() {
    p_shl1_cast_fu_205_p1 = esl_zext<18,13>(tmp_10_fu_197_p3.read());
}

void fc::thread_p_shl_cast_fu_193_p1() {
    p_shl_cast_fu_193_p1 = esl_zext<18,17>(tmp_s_fu_185_p3.read());
}

void fc::thread_tmp_10_fu_197_p3() {
    tmp_10_fu_197_p3 = esl_concat<10,3>(j_reg_122.read(), ap_const_lv3_0);
}

void fc::thread_tmp_11_fu_209_p2() {
    tmp_11_fu_209_p2 = (!p_shl_cast_fu_193_p1.read().is_01() || !p_shl1_cast_fu_205_p1.read().is_01())? sc_lv<18>(): (sc_biguint<18>(p_shl_cast_fu_193_p1.read()) - sc_biguint<18>(p_shl1_cast_fu_205_p1.read()));
}

void fc::thread_tmp_12_fu_215_p2() {
    tmp_12_fu_215_p2 = (!tmp_11_fu_209_p2.read().is_01() || !tmp_cast_reg_286.read().is_01())? sc_lv<18>(): (sc_biguint<18>(tmp_11_fu_209_p2.read()) + sc_biguint<18>(tmp_cast_reg_286.read()));
}

void fc::thread_tmp_13_cast_fu_220_p1() {
    tmp_13_cast_fu_220_p1 = esl_sext<64,18>(tmp_12_fu_215_p2.read());
}

void fc::thread_tmp_1_fu_228_p4() {
    tmp_1_fu_228_p4 = a_assign_to_int_fu_225_p1.read().range(30, 23);
}

void fc::thread_tmp_3_fu_238_p1() {
    tmp_3_fu_238_p1 = a_assign_to_int_fu_225_p1.read().range(23-1, 0);
}

void fc::thread_tmp_4_fu_254_p2() {
    tmp_4_fu_254_p2 = (notrhs_fu_248_p2.read() | notlhs_fu_242_p2.read());
}

void fc::thread_tmp_6_fu_180_p1() {
    tmp_6_fu_180_p1 = esl_zext<64,10>(j_reg_122.read());
}

void fc::thread_tmp_9_fu_260_p2() {
    tmp_9_fu_260_p2 = (tmp_4_fu_254_p2.read() & tmp_5_fu_142_p2.read());
}

void fc::thread_tmp_cast_fu_164_p1() {
    tmp_cast_fu_164_p1 = esl_zext<18,7>(i_reg_99.read());
}

void fc::thread_tmp_fu_159_p1() {
    tmp_fu_159_p1 = esl_zext<64,7>(i_reg_99.read());
}

void fc::thread_tmp_s_fu_185_p3() {
    tmp_s_fu_185_p3 = esl_concat<10,7>(j_reg_122.read(), ap_const_lv7_0);
}

void fc::thread_weight_address0() {
    weight_address0 =  (sc_lv<17>) (tmp_13_cast_fu_220_p1.read());
}

void fc::thread_weight_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        weight_ce0 = ap_const_logic_1;
    } else {
        weight_ce0 = ap_const_logic_0;
    }
}

void fc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_147_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond_fu_168_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<21>) ("XXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void fc::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_address0\" :  \"" << output_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_ce0\" :  \"" << output_r_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_we0\" :  \"" << output_r_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_d0\" :  \"" << output_r_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_r_address0\" :  \"" << input_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_r_ce0\" :  \"" << input_r_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_r_q0\" :  \"" << input_r_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weight_address0\" :  \"" << weight_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weight_ce0\" :  \"" << weight_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"weight_q0\" :  \"" << weight_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bias_address0\" :  \"" << bias_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bias_ce0\" :  \"" << bias_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"bias_q0\" :  \"" << bias_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

