// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _fc_HH_
#define _fc_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "fc_fadd_32ns_32nsbkb.h"
#include "fc_fmul_32ns_32nscud.h"
#include "fc_fcmp_32ns_32nsdEe.h"

namespace ap_rtl {

struct fc : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<7> > output_r_address0;
    sc_out< sc_logic > output_r_ce0;
    sc_out< sc_logic > output_r_we0;
    sc_out< sc_lv<32> > output_r_d0;
    sc_out< sc_lv<10> > input_r_address0;
    sc_out< sc_logic > input_r_ce0;
    sc_in< sc_lv<32> > input_r_q0;
    sc_out< sc_lv<17> > weight_address0;
    sc_out< sc_logic > weight_ce0;
    sc_in< sc_lv<32> > weight_q0;
    sc_out< sc_lv<7> > bias_address0;
    sc_out< sc_logic > bias_ce0;
    sc_in< sc_lv<32> > bias_q0;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<32> > ap_var_for_const1;
    sc_signal< sc_lv<5> > ap_var_for_const2;


    // Module declarations
    fc(sc_module_name name);
    SC_HAS_PROCESS(fc);

    ~fc();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    fc_fadd_32ns_32nsbkb<1,5,32,32,32>* fc_fadd_32ns_32nsbkb_U1;
    fc_fmul_32ns_32nscud<1,4,32,32,32>* fc_fmul_32ns_32nscud_U2;
    fc_fcmp_32ns_32nsdEe<1,1,32,32,1>* fc_fcmp_32ns_32nsdEe_U3;
    sc_signal< sc_lv<21> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<7> > i_1_fu_153_p2;
    sc_signal< sc_lv<7> > i_1_reg_276;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > tmp_fu_159_p1;
    sc_signal< sc_lv<64> > tmp_reg_281;
    sc_signal< sc_lv<1> > exitcond1_fu_147_p2;
    sc_signal< sc_lv<18> > tmp_cast_fu_164_p1;
    sc_signal< sc_lv<18> > tmp_cast_reg_286;
    sc_signal< sc_lv<7> > output_addr_reg_291;
    sc_signal< sc_lv<10> > j_1_fu_174_p2;
    sc_signal< sc_lv<10> > j_1_reg_299;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > exitcond_fu_168_p2;
    sc_signal< sc_lv<32> > weight_load_reg_319;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > input_load_reg_324;
    sc_signal< sc_lv<32> > grp_fu_138_p2;
    sc_signal< sc_lv<32> > tmp_7_reg_329;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<32> > grp_fu_133_p2;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_lv<32> > bias_load_reg_339;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_lv<32> > a_assign_reg_344;
    sc_signal< sc_logic > ap_CS_fsm_state19;
    sc_signal< sc_lv<32> > a_assign_1_fu_266_p3;
    sc_signal< sc_lv<32> > a_assign_1_reg_351;
    sc_signal< sc_logic > ap_CS_fsm_state20;
    sc_signal< sc_lv<7> > i_reg_99;
    sc_signal< sc_logic > ap_CS_fsm_state21;
    sc_signal< sc_lv<32> > tmp_2_reg_110;
    sc_signal< sc_lv<10> > j_reg_122;
    sc_signal< sc_lv<64> > tmp_13_cast_fu_220_p1;
    sc_signal< sc_lv<64> > tmp_6_fu_180_p1;
    sc_signal< sc_lv<32> > grp_fu_133_p1;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<17> > tmp_s_fu_185_p3;
    sc_signal< sc_lv<13> > tmp_10_fu_197_p3;
    sc_signal< sc_lv<18> > p_shl_cast_fu_193_p1;
    sc_signal< sc_lv<18> > p_shl1_cast_fu_205_p1;
    sc_signal< sc_lv<18> > tmp_11_fu_209_p2;
    sc_signal< sc_lv<18> > tmp_12_fu_215_p2;
    sc_signal< sc_lv<32> > a_assign_to_int_fu_225_p1;
    sc_signal< sc_lv<8> > tmp_1_fu_228_p4;
    sc_signal< sc_lv<23> > tmp_3_fu_238_p1;
    sc_signal< sc_lv<1> > notrhs_fu_248_p2;
    sc_signal< sc_lv<1> > notlhs_fu_242_p2;
    sc_signal< sc_lv<1> > tmp_4_fu_254_p2;
    sc_signal< sc_lv<1> > tmp_5_fu_142_p2;
    sc_signal< sc_lv<1> > tmp_9_fu_260_p2;
    sc_signal< sc_lv<21> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<21> ap_ST_fsm_state1;
    static const sc_lv<21> ap_ST_fsm_state2;
    static const sc_lv<21> ap_ST_fsm_state3;
    static const sc_lv<21> ap_ST_fsm_state4;
    static const sc_lv<21> ap_ST_fsm_state5;
    static const sc_lv<21> ap_ST_fsm_state6;
    static const sc_lv<21> ap_ST_fsm_state7;
    static const sc_lv<21> ap_ST_fsm_state8;
    static const sc_lv<21> ap_ST_fsm_state9;
    static const sc_lv<21> ap_ST_fsm_state10;
    static const sc_lv<21> ap_ST_fsm_state11;
    static const sc_lv<21> ap_ST_fsm_state12;
    static const sc_lv<21> ap_ST_fsm_state13;
    static const sc_lv<21> ap_ST_fsm_state14;
    static const sc_lv<21> ap_ST_fsm_state15;
    static const sc_lv<21> ap_ST_fsm_state16;
    static const sc_lv<21> ap_ST_fsm_state17;
    static const sc_lv<21> ap_ST_fsm_state18;
    static const sc_lv<21> ap_ST_fsm_state19;
    static const sc_lv<21> ap_ST_fsm_state20;
    static const sc_lv<21> ap_ST_fsm_state21;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<32> ap_const_lv32_13;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<32> ap_const_lv32_14;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<7> ap_const_lv7_78;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<10> ap_const_lv10_240;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<5> ap_const_lv5_2;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_clk_no_reset_();
    void thread_a_assign_1_fu_266_p3();
    void thread_a_assign_to_int_fu_225_p1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state19();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state20();
    void thread_ap_CS_fsm_state21();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_bias_address0();
    void thread_bias_ce0();
    void thread_exitcond1_fu_147_p2();
    void thread_exitcond_fu_168_p2();
    void thread_grp_fu_133_p1();
    void thread_i_1_fu_153_p2();
    void thread_input_r_address0();
    void thread_input_r_ce0();
    void thread_j_1_fu_174_p2();
    void thread_notlhs_fu_242_p2();
    void thread_notrhs_fu_248_p2();
    void thread_output_r_address0();
    void thread_output_r_ce0();
    void thread_output_r_d0();
    void thread_output_r_we0();
    void thread_p_shl1_cast_fu_205_p1();
    void thread_p_shl_cast_fu_193_p1();
    void thread_tmp_10_fu_197_p3();
    void thread_tmp_11_fu_209_p2();
    void thread_tmp_12_fu_215_p2();
    void thread_tmp_13_cast_fu_220_p1();
    void thread_tmp_1_fu_228_p4();
    void thread_tmp_3_fu_238_p1();
    void thread_tmp_4_fu_254_p2();
    void thread_tmp_6_fu_180_p1();
    void thread_tmp_9_fu_260_p2();
    void thread_tmp_cast_fu_164_p1();
    void thread_tmp_fu_159_p1();
    void thread_tmp_s_fu_185_p3();
    void thread_weight_address0();
    void thread_weight_ce0();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
