-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nnet is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_layer1_out_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv_layer1_out_V_ce0 : OUT STD_LOGIC;
    conv_layer1_out_V_we0 : OUT STD_LOGIC;
    conv_layer1_out_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    conv_layer1_out_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    conv_layer1_out_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv_layer1_out_V_ce1 : OUT STD_LOGIC;
    conv_layer1_out_V_q1 : IN STD_LOGIC_VECTOR (23 downto 0);
    conv_layer2_out_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_layer2_out_V_ce0 : OUT STD_LOGIC;
    conv_layer2_out_V_we0 : OUT STD_LOGIC;
    conv_layer2_out_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    conv_layer2_out_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    conv_layer2_out_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_layer2_out_V_ce1 : OUT STD_LOGIC;
    conv_layer2_out_V_q1 : IN STD_LOGIC_VECTOR (23 downto 0);
    pool_layer1_out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pool_layer1_out_V_ce0 : OUT STD_LOGIC;
    pool_layer1_out_V_we0 : OUT STD_LOGIC;
    pool_layer1_out_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    pool_layer1_out_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    pool_layer1_out_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pool_layer1_out_V_ce1 : OUT STD_LOGIC;
    pool_layer1_out_V_we1 : OUT STD_LOGIC;
    pool_layer1_out_V_d1 : OUT STD_LOGIC_VECTOR (23 downto 0);
    pool_layer1_out_V_q1 : IN STD_LOGIC_VECTOR (23 downto 0);
    pool_layer2_out_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    pool_layer2_out_V_ce0 : OUT STD_LOGIC;
    pool_layer2_out_V_we0 : OUT STD_LOGIC;
    pool_layer2_out_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    pool_layer2_out_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    pool_layer2_out_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    pool_layer2_out_V_ce1 : OUT STD_LOGIC;
    pool_layer2_out_V_we1 : OUT STD_LOGIC;
    pool_layer2_out_V_d1 : OUT STD_LOGIC_VECTOR (23 downto 0);
    fc_layer1_out_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    fc_layer1_out_V_ce0 : OUT STD_LOGIC;
    fc_layer1_out_V_we0 : OUT STD_LOGIC;
    fc_layer1_out_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    fc_layer1_out_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    fc_layer2_out_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    fc_layer2_out_V_ce0 : OUT STD_LOGIC;
    fc_layer2_out_V_we0 : OUT STD_LOGIC;
    fc_layer2_out_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    fc_layer2_out_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    fc_layer3_out_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    fc_layer3_out_V_ce0 : OUT STD_LOGIC;
    fc_layer3_out_V_we0 : OUT STD_LOGIC;
    fc_layer3_out_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of nnet is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "nnet,hls_ip_2017_4_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.446750,HLS_SYN_LAT=381295,HLS_SYN_TPT=none,HLS_SYN_MEM=181,HLS_SYN_DSP=51,HLS_SYN_FF=10034,HLS_SYN_LUT=16069}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv10_240 : STD_LOGIC_VECTOR (9 downto 0) := "1001000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv14_54 : STD_LOGIC_VECTOR (13 downto 0) := "00000001010100";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fc_layer1_weights_V_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal fc_layer1_weights_V_ce0 : STD_LOGIC;
    signal fc_layer1_weights_V_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal fc_layer2_weights_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal fc_layer2_weights_V_ce0 : STD_LOGIC;
    signal fc_layer2_weights_V_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal fc_layer3_weights_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal fc_layer3_weights_V_ce0 : STD_LOGIC;
    signal fc_layer3_weights_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal i_fu_567_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_960 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_i_cast_fu_578_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_i_cast_reg_965 : STD_LOGIC_VECTOR (17 downto 0);
    signal exitcond7_i_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_layer1_out_V_addr_reg_970 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_fu_588_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_978 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond_i_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_layer1_weights_V_1_reg_993 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal pool_layer2_out_V_lo_reg_998 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_1_fu_945_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal p_Val2_1_reg_1003 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_3_fu_701_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_reg_1016 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_i9_cast_fu_712_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_i9_cast_reg_1021 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond6_i_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_layer2_out_V_addr_reg_1026 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_3_fu_722_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_3_reg_1034 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal next_mul_fu_733_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul_reg_1039 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond_i1_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_layer2_weights_V_1_reg_1054 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal fc_layer1_out_V_load_reg_1059 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_4_fu_951_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal p_Val2_4_reg_1064 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal i_4_fu_811_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_1077 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_i1_cast_fu_822_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i1_cast_reg_1082 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond5_i_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_layer3_out_V_addr_reg_1087 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_4_fu_832_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_4_reg_1095 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal exitcond_i2_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_layer3_weights_V_1_reg_1110 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal fc_layer2_out_V_load_reg_1115 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_7_fu_889_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_7_reg_1120 : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_pool_layer2_fu_429_ap_start : STD_LOGIC;
    signal grp_pool_layer2_fu_429_ap_done : STD_LOGIC;
    signal grp_pool_layer2_fu_429_ap_idle : STD_LOGIC;
    signal grp_pool_layer2_fu_429_ap_ready : STD_LOGIC;
    signal grp_pool_layer2_fu_429_output_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pool_layer2_fu_429_output_V_ce0 : STD_LOGIC;
    signal grp_pool_layer2_fu_429_output_V_we0 : STD_LOGIC;
    signal grp_pool_layer2_fu_429_output_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_pool_layer2_fu_429_output_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pool_layer2_fu_429_output_V_ce1 : STD_LOGIC;
    signal grp_pool_layer2_fu_429_output_V_we1 : STD_LOGIC;
    signal grp_pool_layer2_fu_429_output_V_d1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_pool_layer2_fu_429_image_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_pool_layer2_fu_429_image_V_ce0 : STD_LOGIC;
    signal grp_pool_layer2_fu_429_image_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_pool_layer2_fu_429_image_V_ce1 : STD_LOGIC;
    signal grp_conv_layer2_fu_437_ap_start : STD_LOGIC;
    signal grp_conv_layer2_fu_437_ap_done : STD_LOGIC;
    signal grp_conv_layer2_fu_437_ap_idle : STD_LOGIC;
    signal grp_conv_layer2_fu_437_ap_ready : STD_LOGIC;
    signal grp_conv_layer2_fu_437_output_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_conv_layer2_fu_437_output_V_ce0 : STD_LOGIC;
    signal grp_conv_layer2_fu_437_output_V_we0 : STD_LOGIC;
    signal grp_conv_layer2_fu_437_output_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_conv_layer2_fu_437_image_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_conv_layer2_fu_437_image_V_ce0 : STD_LOGIC;
    signal grp_conv_layer2_fu_437_image_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_conv_layer2_fu_437_image_V_ce1 : STD_LOGIC;
    signal grp_pool_layer1_fu_511_ap_start : STD_LOGIC;
    signal grp_pool_layer1_fu_511_ap_done : STD_LOGIC;
    signal grp_pool_layer1_fu_511_ap_idle : STD_LOGIC;
    signal grp_pool_layer1_fu_511_ap_ready : STD_LOGIC;
    signal grp_pool_layer1_fu_511_output_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pool_layer1_fu_511_output_V_ce0 : STD_LOGIC;
    signal grp_pool_layer1_fu_511_output_V_we0 : STD_LOGIC;
    signal grp_pool_layer1_fu_511_output_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_pool_layer1_fu_511_output_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pool_layer1_fu_511_output_V_ce1 : STD_LOGIC;
    signal grp_pool_layer1_fu_511_output_V_we1 : STD_LOGIC;
    signal grp_pool_layer1_fu_511_output_V_d1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_pool_layer1_fu_511_image_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_pool_layer1_fu_511_image_V_ce0 : STD_LOGIC;
    signal grp_pool_layer1_fu_511_image_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_pool_layer1_fu_511_image_V_ce1 : STD_LOGIC;
    signal grp_conv_layer1_fu_519_ap_start : STD_LOGIC;
    signal grp_conv_layer1_fu_519_ap_done : STD_LOGIC;
    signal grp_conv_layer1_fu_519_ap_idle : STD_LOGIC;
    signal grp_conv_layer1_fu_519_ap_ready : STD_LOGIC;
    signal grp_conv_layer1_fu_519_output_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_conv_layer1_fu_519_output_V_ce0 : STD_LOGIC;
    signal grp_conv_layer1_fu_519_output_V_we0 : STD_LOGIC;
    signal grp_conv_layer1_fu_519_output_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_i_reg_313 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal p_Val2_s_reg_324 : STD_LOGIC_VECTOR (23 downto 0);
    signal j_i_reg_337 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_i7_reg_348 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal p_Val2_3_reg_359 : STD_LOGIC_VECTOR (23 downto 0);
    signal j_i1_reg_372 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul_reg_383 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_i1_reg_394 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal p_Val2_6_reg_405 : STD_LOGIC_VECTOR (23 downto 0);
    signal j_i2_reg_418 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_grp_pool_layer2_fu_429_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_reg_grp_conv_layer2_fu_437_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_reg_grp_pool_layer1_fu_511_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_reg_grp_conv_layer1_fu_519_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_i_fu_573_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_cast_fu_634_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_21_fu_594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i9_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_cast_fu_744_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_fu_728_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_27_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_cast_fu_878_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i2_fu_838_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_V_i_i_cast_fu_690_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal a_V_i_i1_cast_fu_800_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal a_V_i_i2_cast_fu_940_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_fu_599_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_fu_611_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl_cast_fu_607_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl1_cast_fu_619_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_2_fu_623_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_3_fu_629_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_18_i_cast_fu_653_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_17_i_fu_645_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_2_fu_656_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_i_i_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_672_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal a_V_i_i_fu_682_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_5_fu_739_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_13_i_cast_fu_763_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_12_i_fu_755_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_5_fu_766_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_i_i1_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_782_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal a_V_i_i1_fu_792_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_6_fu_843_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_855_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast_fu_863_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_851_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_fu_867_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_fu_873_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_7_fu_889_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_7_fu_889_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_8_i_cast_fu_903_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_7_i_fu_895_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_8_fu_906_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_i_i2_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_922_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal a_V_i_i2_fu_932_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);

    component pool_layer2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_we0 : OUT STD_LOGIC;
        output_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        output_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_V_ce1 : OUT STD_LOGIC;
        output_V_we1 : OUT STD_LOGIC;
        output_V_d1 : OUT STD_LOGIC_VECTOR (23 downto 0);
        image_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        image_V_ce0 : OUT STD_LOGIC;
        image_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        image_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        image_V_ce1 : OUT STD_LOGIC;
        image_V_q1 : IN STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component conv_layer2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_we0 : OUT STD_LOGIC;
        output_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        image_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        image_V_ce0 : OUT STD_LOGIC;
        image_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        image_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        image_V_ce1 : OUT STD_LOGIC;
        image_V_q1 : IN STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component pool_layer1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_we0 : OUT STD_LOGIC;
        output_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        output_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_V_ce1 : OUT STD_LOGIC;
        output_V_we1 : OUT STD_LOGIC;
        output_V_d1 : OUT STD_LOGIC_VECTOR (23 downto 0);
        image_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        image_V_ce0 : OUT STD_LOGIC;
        image_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        image_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        image_V_ce1 : OUT STD_LOGIC;
        image_V_q1 : IN STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component conv_layer1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_we0 : OUT STD_LOGIC;
        output_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component nnet_mul_mul_24s_4jc IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (40 downto 0) );
    end component;


    component nnet_mul_mul_24s_5jm IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (41 downto 0) );
    end component;


    component nnet_fc_layer1_we1iI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component nnet_fc_layer2_we2iS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component nnet_fc_layer3_we3i2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    fc_layer1_weights_V_U : component nnet_fc_layer1_we1iI
    generic map (
        DataWidth => 18,
        AddressRange => 69120,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer1_weights_V_address0,
        ce0 => fc_layer1_weights_V_ce0,
        q0 => fc_layer1_weights_V_q0);

    fc_layer2_weights_V_U : component nnet_fc_layer2_we2iS
    generic map (
        DataWidth => 19,
        AddressRange => 10080,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer2_weights_V_address0,
        ce0 => fc_layer2_weights_V_ce0,
        q0 => fc_layer2_weights_V_q0);

    fc_layer3_weights_V_U : component nnet_fc_layer3_we3i2
    generic map (
        DataWidth => 20,
        AddressRange => 840,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer3_weights_V_address0,
        ce0 => fc_layer3_weights_V_ce0,
        q0 => fc_layer3_weights_V_q0);

    grp_pool_layer2_fu_429 : component pool_layer2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pool_layer2_fu_429_ap_start,
        ap_done => grp_pool_layer2_fu_429_ap_done,
        ap_idle => grp_pool_layer2_fu_429_ap_idle,
        ap_ready => grp_pool_layer2_fu_429_ap_ready,
        output_V_address0 => grp_pool_layer2_fu_429_output_V_address0,
        output_V_ce0 => grp_pool_layer2_fu_429_output_V_ce0,
        output_V_we0 => grp_pool_layer2_fu_429_output_V_we0,
        output_V_d0 => grp_pool_layer2_fu_429_output_V_d0,
        output_V_address1 => grp_pool_layer2_fu_429_output_V_address1,
        output_V_ce1 => grp_pool_layer2_fu_429_output_V_ce1,
        output_V_we1 => grp_pool_layer2_fu_429_output_V_we1,
        output_V_d1 => grp_pool_layer2_fu_429_output_V_d1,
        image_V_address0 => grp_pool_layer2_fu_429_image_V_address0,
        image_V_ce0 => grp_pool_layer2_fu_429_image_V_ce0,
        image_V_q0 => conv_layer2_out_V_q0,
        image_V_address1 => grp_pool_layer2_fu_429_image_V_address1,
        image_V_ce1 => grp_pool_layer2_fu_429_image_V_ce1,
        image_V_q1 => conv_layer2_out_V_q1);

    grp_conv_layer2_fu_437 : component conv_layer2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv_layer2_fu_437_ap_start,
        ap_done => grp_conv_layer2_fu_437_ap_done,
        ap_idle => grp_conv_layer2_fu_437_ap_idle,
        ap_ready => grp_conv_layer2_fu_437_ap_ready,
        output_V_address0 => grp_conv_layer2_fu_437_output_V_address0,
        output_V_ce0 => grp_conv_layer2_fu_437_output_V_ce0,
        output_V_we0 => grp_conv_layer2_fu_437_output_V_we0,
        output_V_d0 => grp_conv_layer2_fu_437_output_V_d0,
        image_V_address0 => grp_conv_layer2_fu_437_image_V_address0,
        image_V_ce0 => grp_conv_layer2_fu_437_image_V_ce0,
        image_V_q0 => pool_layer1_out_V_q0,
        image_V_address1 => grp_conv_layer2_fu_437_image_V_address1,
        image_V_ce1 => grp_conv_layer2_fu_437_image_V_ce1,
        image_V_q1 => pool_layer1_out_V_q1);

    grp_pool_layer1_fu_511 : component pool_layer1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pool_layer1_fu_511_ap_start,
        ap_done => grp_pool_layer1_fu_511_ap_done,
        ap_idle => grp_pool_layer1_fu_511_ap_idle,
        ap_ready => grp_pool_layer1_fu_511_ap_ready,
        output_V_address0 => grp_pool_layer1_fu_511_output_V_address0,
        output_V_ce0 => grp_pool_layer1_fu_511_output_V_ce0,
        output_V_we0 => grp_pool_layer1_fu_511_output_V_we0,
        output_V_d0 => grp_pool_layer1_fu_511_output_V_d0,
        output_V_address1 => grp_pool_layer1_fu_511_output_V_address1,
        output_V_ce1 => grp_pool_layer1_fu_511_output_V_ce1,
        output_V_we1 => grp_pool_layer1_fu_511_output_V_we1,
        output_V_d1 => grp_pool_layer1_fu_511_output_V_d1,
        image_V_address0 => grp_pool_layer1_fu_511_image_V_address0,
        image_V_ce0 => grp_pool_layer1_fu_511_image_V_ce0,
        image_V_q0 => conv_layer1_out_V_q0,
        image_V_address1 => grp_pool_layer1_fu_511_image_V_address1,
        image_V_ce1 => grp_pool_layer1_fu_511_image_V_ce1,
        image_V_q1 => conv_layer1_out_V_q1);

    grp_conv_layer1_fu_519 : component conv_layer1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv_layer1_fu_519_ap_start,
        ap_done => grp_conv_layer1_fu_519_ap_done,
        ap_idle => grp_conv_layer1_fu_519_ap_idle,
        ap_ready => grp_conv_layer1_fu_519_ap_ready,
        output_V_address0 => grp_conv_layer1_fu_519_output_V_address0,
        output_V_ce0 => grp_conv_layer1_fu_519_output_V_ce0,
        output_V_we0 => grp_conv_layer1_fu_519_output_V_we0,
        output_V_d0 => grp_conv_layer1_fu_519_output_V_d0);

    nnet_mul_mul_24s_4jc_U109 : component nnet_mul_mul_24s_4jc
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 41)
    port map (
        din0 => pool_layer2_out_V_lo_reg_998,
        din1 => fc_layer1_weights_V_1_reg_993,
        dout => p_Val2_1_fu_945_p2);

    nnet_mul_mul_24s_5jm_U110 : component nnet_mul_mul_24s_5jm
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 19,
        dout_WIDTH => 42)
    port map (
        din0 => fc_layer1_out_V_load_reg_1059,
        din1 => fc_layer2_weights_V_1_reg_1054,
        dout => p_Val2_4_fu_951_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_conv_layer1_fu_519_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_conv_layer1_fu_519_ap_start <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_reg_grp_conv_layer1_fu_519_ap_start <= ap_const_logic_1;
                elsif ((grp_conv_layer1_fu_519_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_conv_layer1_fu_519_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_conv_layer2_fu_437_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_conv_layer2_fu_437_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_reg_grp_conv_layer2_fu_437_ap_start <= ap_const_logic_1;
                elsif ((grp_conv_layer2_fu_437_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_conv_layer2_fu_437_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_pool_layer1_fu_511_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_pool_layer1_fu_511_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_reg_grp_pool_layer1_fu_511_ap_start <= ap_const_logic_1;
                elsif ((grp_pool_layer1_fu_511_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_pool_layer1_fu_511_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_pool_layer2_fu_429_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_pool_layer2_fu_429_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_reg_grp_pool_layer2_fu_429_ap_start <= ap_const_logic_1;
                elsif ((grp_pool_layer2_fu_429_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_pool_layer2_fu_429_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i1_reg_394_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond6_i_fu_695_p2 = ap_const_lv1_1))) then 
                i_i1_reg_394 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                i_i1_reg_394 <= i_4_reg_1077;
            end if; 
        end if;
    end process;

    i_i7_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond7_i_fu_561_p2 = ap_const_lv1_1))) then 
                i_i7_reg_348 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_i7_reg_348 <= i_3_reg_1016;
            end if; 
        end if;
    end process;

    i_i_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_i_reg_313 <= i_reg_960;
            elsif (((grp_pool_layer2_fu_429_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_i_reg_313 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_i1_reg_372_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                j_i1_reg_372 <= j_3_reg_1034;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond6_i_fu_695_p2 = ap_const_lv1_0))) then 
                j_i1_reg_372 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_i2_reg_418_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                j_i2_reg_418 <= j_4_reg_1095;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond5_i_fu_805_p2 = ap_const_lv1_0))) then 
                j_i2_reg_418 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_i_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                j_i_reg_337 <= j_reg_978;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond7_i_fu_561_p2 = ap_const_lv1_0))) then 
                j_i_reg_337 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    p_Val2_3_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                p_Val2_3_reg_359 <= p_Val2_5_fu_766_p2(43 downto 20);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond6_i_fu_695_p2 = ap_const_lv1_0))) then 
                p_Val2_3_reg_359 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    p_Val2_6_reg_405_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                p_Val2_6_reg_405 <= p_Val2_8_fu_906_p2(43 downto 20);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond5_i_fu_805_p2 = ap_const_lv1_0))) then 
                p_Val2_6_reg_405 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                p_Val2_s_reg_324 <= p_Val2_2_fu_656_p2(43 downto 20);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond7_i_fu_561_p2 = ap_const_lv1_0))) then 
                p_Val2_s_reg_324 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_383_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                phi_mul_reg_383 <= next_mul_reg_1039;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond6_i_fu_695_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_383 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond7_i_fu_561_p2 = ap_const_lv1_0))) then
                fc_layer1_out_V_addr_reg_970 <= tmp_i_fu_573_p1(7 - 1 downto 0);
                    tmp_i_cast_reg_965(6 downto 0) <= tmp_i_cast_fu_578_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                fc_layer1_out_V_load_reg_1059 <= fc_layer1_out_V_q0;
                fc_layer2_weights_V_1_reg_1054 <= fc_layer2_weights_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                fc_layer1_weights_V_1_reg_993 <= fc_layer1_weights_V_q0;
                pool_layer2_out_V_lo_reg_998 <= pool_layer2_out_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond6_i_fu_695_p2 = ap_const_lv1_0))) then
                fc_layer2_out_V_addr_reg_1026 <= tmp_i9_fu_707_p1(7 - 1 downto 0);
                    tmp_i9_cast_reg_1021(6 downto 0) <= tmp_i9_cast_fu_712_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                fc_layer2_out_V_load_reg_1115 <= fc_layer2_out_V_q0;
                fc_layer3_weights_V_1_reg_1110 <= fc_layer3_weights_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond5_i_fu_805_p2 = ap_const_lv1_0))) then
                fc_layer3_out_V_addr_reg_1087 <= tmp_i1_27_fu_817_p1(4 - 1 downto 0);
                    tmp_i1_cast_reg_1082(3 downto 0) <= tmp_i1_cast_fu_822_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                i_3_reg_1016 <= i_3_fu_701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                i_4_reg_1077 <= i_4_fu_811_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_reg_960 <= i_fu_567_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                j_3_reg_1034 <= j_3_fu_722_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                j_4_reg_1095 <= j_4_fu_832_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                j_reg_978 <= j_fu_588_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_i1_fu_716_p2 = ap_const_lv1_0))) then
                next_mul_reg_1039 <= next_mul_fu_733_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                p_Val2_1_reg_1003 <= p_Val2_1_fu_945_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                p_Val2_4_reg_1064 <= p_Val2_4_fu_951_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                p_Val2_7_reg_1120 <= p_Val2_7_fu_889_p2;
            end if;
        end if;
    end process;
    tmp_i_cast_reg_965(17 downto 7) <= "00000000000";
    tmp_i9_cast_reg_1021(13 downto 7) <= "0000000";
    tmp_i1_cast_reg_1082(10 downto 4) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state9, exitcond7_i_fu_561_p2, ap_CS_fsm_state10, exitcond_i_fu_582_p2, ap_CS_fsm_state15, exitcond6_i_fu_695_p2, ap_CS_fsm_state16, exitcond_i1_fu_716_p2, ap_CS_fsm_state21, exitcond5_i_fu_805_p2, ap_CS_fsm_state22, exitcond_i2_fu_826_p2, grp_pool_layer2_fu_429_ap_done, grp_conv_layer2_fu_437_ap_done, grp_pool_layer1_fu_511_ap_done, grp_conv_layer1_fu_519_ap_done, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_conv_layer1_fu_519_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_pool_layer1_fu_511_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_conv_layer2_fu_437_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_pool_layer2_fu_429_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond7_i_fu_561_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond_i_fu_582_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond6_i_fu_695_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((exitcond_i1_fu_716_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state21 => 
                if (((exitcond5_i_fu_805_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if (((exitcond_i2_fu_826_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_V_i_i1_cast_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_V_i_i1_fu_792_p3),24));
    a_V_i_i1_fu_792_p3 <= 
        tmp_10_fu_782_p1 when (tmp_i_i1_fu_786_p2(0) = '1') else 
        ap_const_lv23_0;
    a_V_i_i2_cast_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_V_i_i2_fu_932_p3),24));
    a_V_i_i2_fu_932_p3 <= 
        tmp_11_fu_922_p1 when (tmp_i_i2_fu_926_p2(0) = '1') else 
        ap_const_lv23_0;
    a_V_i_i_cast_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_V_i_i_fu_682_p3),24));
    a_V_i_i_fu_682_p3 <= 
        tmp_4_fu_672_p1 when (tmp_i_i_fu_676_p2(0) = '1') else 
        ap_const_lv23_0;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state21, exitcond5_i_fu_805_p2)
    begin
        if (((exitcond5_i_fu_805_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state21, exitcond5_i_fu_805_p2)
    begin
        if (((exitcond5_i_fu_805_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    conv_layer1_out_V_address0_assign_proc : process(grp_pool_layer1_fu_511_image_V_address0, grp_conv_layer1_fu_519_output_V_address0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_layer1_out_V_address0 <= grp_conv_layer1_fu_519_output_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_layer1_out_V_address0 <= grp_pool_layer1_fu_511_image_V_address0;
        else 
            conv_layer1_out_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;

    conv_layer1_out_V_address1 <= grp_pool_layer1_fu_511_image_V_address1;

    conv_layer1_out_V_ce0_assign_proc : process(grp_pool_layer1_fu_511_image_V_ce0, grp_conv_layer1_fu_519_output_V_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_layer1_out_V_ce0 <= grp_conv_layer1_fu_519_output_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_layer1_out_V_ce0 <= grp_pool_layer1_fu_511_image_V_ce0;
        else 
            conv_layer1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_layer1_out_V_ce1_assign_proc : process(grp_pool_layer1_fu_511_image_V_ce1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_layer1_out_V_ce1 <= grp_pool_layer1_fu_511_image_V_ce1;
        else 
            conv_layer1_out_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer1_out_V_d0 <= grp_conv_layer1_fu_519_output_V_d0;

    conv_layer1_out_V_we0_assign_proc : process(grp_conv_layer1_fu_519_output_V_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_layer1_out_V_we0 <= grp_conv_layer1_fu_519_output_V_we0;
        else 
            conv_layer1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_layer2_out_V_address0_assign_proc : process(grp_pool_layer2_fu_429_image_V_address0, grp_conv_layer2_fu_437_output_V_address0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_layer2_out_V_address0 <= grp_conv_layer2_fu_437_output_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_layer2_out_V_address0 <= grp_pool_layer2_fu_429_image_V_address0;
        else 
            conv_layer2_out_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    conv_layer2_out_V_address1 <= grp_pool_layer2_fu_429_image_V_address1;

    conv_layer2_out_V_ce0_assign_proc : process(grp_pool_layer2_fu_429_image_V_ce0, grp_conv_layer2_fu_437_output_V_ce0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_layer2_out_V_ce0 <= grp_conv_layer2_fu_437_output_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_layer2_out_V_ce0 <= grp_pool_layer2_fu_429_image_V_ce0;
        else 
            conv_layer2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_layer2_out_V_ce1_assign_proc : process(grp_pool_layer2_fu_429_image_V_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_layer2_out_V_ce1 <= grp_pool_layer2_fu_429_image_V_ce1;
        else 
            conv_layer2_out_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer2_out_V_d0 <= grp_conv_layer2_fu_437_output_V_d0;

    conv_layer2_out_V_we0_assign_proc : process(grp_conv_layer2_fu_437_output_V_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_layer2_out_V_we0 <= grp_conv_layer2_fu_437_output_V_we0;
        else 
            conv_layer2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond5_i_fu_805_p2 <= "1" when (i_i1_reg_394 = ap_const_lv4_A) else "0";
    exitcond6_i_fu_695_p2 <= "1" when (i_i7_reg_348 = ap_const_lv7_54) else "0";
    exitcond7_i_fu_561_p2 <= "1" when (i_i_reg_313 = ap_const_lv7_78) else "0";
    exitcond_i1_fu_716_p2 <= "1" when (j_i1_reg_372 = ap_const_lv7_78) else "0";
    exitcond_i2_fu_826_p2 <= "1" when (j_i2_reg_418 = ap_const_lv7_54) else "0";
    exitcond_i_fu_582_p2 <= "1" when (j_i_reg_337 = ap_const_lv10_240) else "0";

    fc_layer1_out_V_address0_assign_proc : process(fc_layer1_out_V_addr_reg_970, ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_state14, tmp_i1_fu_728_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            fc_layer1_out_V_address0 <= tmp_i1_fu_728_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            fc_layer1_out_V_address0 <= fc_layer1_out_V_addr_reg_970;
        else 
            fc_layer1_out_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    fc_layer1_out_V_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            fc_layer1_out_V_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer1_out_V_d0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state14, p_Val2_s_reg_324, a_V_i_i_cast_fu_690_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            fc_layer1_out_V_d0 <= a_V_i_i_cast_fu_690_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fc_layer1_out_V_d0 <= p_Val2_s_reg_324;
        else 
            fc_layer1_out_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fc_layer1_out_V_we0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            fc_layer1_out_V_we0 <= ap_const_logic_1;
        else 
            fc_layer1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_layer1_weights_V_address0 <= tmp_3_cast_fu_634_p1(17 - 1 downto 0);

    fc_layer1_weights_V_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fc_layer1_weights_V_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer2_out_V_address0_assign_proc : process(fc_layer2_out_V_addr_reg_1026, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state20, tmp_i2_fu_838_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            fc_layer2_out_V_address0 <= tmp_i2_fu_838_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            fc_layer2_out_V_address0 <= fc_layer2_out_V_addr_reg_1026;
        else 
            fc_layer2_out_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    fc_layer2_out_V_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            fc_layer2_out_V_ce0 <= ap_const_logic_1;
        else 
            fc_layer2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer2_out_V_d0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state20, p_Val2_3_reg_359, a_V_i_i1_cast_fu_800_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            fc_layer2_out_V_d0 <= a_V_i_i1_cast_fu_800_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            fc_layer2_out_V_d0 <= p_Val2_3_reg_359;
        else 
            fc_layer2_out_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fc_layer2_out_V_we0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            fc_layer2_out_V_we0 <= ap_const_logic_1;
        else 
            fc_layer2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_layer2_weights_V_address0 <= tmp_5_cast_fu_744_p1(14 - 1 downto 0);

    fc_layer2_weights_V_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            fc_layer2_weights_V_ce0 <= ap_const_logic_1;
        else 
            fc_layer2_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_layer3_out_V_address0 <= fc_layer3_out_V_addr_reg_1087;

    fc_layer3_out_V_ce0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            fc_layer3_out_V_ce0 <= ap_const_logic_1;
        else 
            fc_layer3_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer3_out_V_d0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state26, p_Val2_6_reg_405, a_V_i_i2_cast_fu_940_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            fc_layer3_out_V_d0 <= a_V_i_i2_cast_fu_940_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            fc_layer3_out_V_d0 <= p_Val2_6_reg_405;
        else 
            fc_layer3_out_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fc_layer3_out_V_we0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            fc_layer3_out_V_we0 <= ap_const_logic_1;
        else 
            fc_layer3_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_layer3_weights_V_address0 <= tmp_9_cast_fu_878_p1(10 - 1 downto 0);

    fc_layer3_weights_V_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            fc_layer3_weights_V_ce0 <= ap_const_logic_1;
        else 
            fc_layer3_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_conv_layer1_fu_519_ap_start <= ap_reg_grp_conv_layer1_fu_519_ap_start;
    grp_conv_layer2_fu_437_ap_start <= ap_reg_grp_conv_layer2_fu_437_ap_start;
    grp_pool_layer1_fu_511_ap_start <= ap_reg_grp_pool_layer1_fu_511_ap_start;
    grp_pool_layer2_fu_429_ap_start <= ap_reg_grp_pool_layer2_fu_429_ap_start;
    i_3_fu_701_p2 <= std_logic_vector(unsigned(i_i7_reg_348) + unsigned(ap_const_lv7_1));
    i_4_fu_811_p2 <= std_logic_vector(unsigned(i_i1_reg_394) + unsigned(ap_const_lv4_1));
    i_fu_567_p2 <= std_logic_vector(unsigned(i_i_reg_313) + unsigned(ap_const_lv7_1));
    j_3_fu_722_p2 <= std_logic_vector(unsigned(j_i1_reg_372) + unsigned(ap_const_lv7_1));
    j_4_fu_832_p2 <= std_logic_vector(unsigned(j_i2_reg_418) + unsigned(ap_const_lv7_1));
    j_fu_588_p2 <= std_logic_vector(unsigned(j_i_reg_337) + unsigned(ap_const_lv10_1));
    next_mul_fu_733_p2 <= std_logic_vector(unsigned(phi_mul_reg_383) + unsigned(ap_const_lv14_54));
    p_Val2_2_fu_656_p2 <= std_logic_vector(signed(tmp_18_i_cast_fu_653_p1) + signed(tmp_17_i_fu_645_p3));
    p_Val2_5_fu_766_p2 <= std_logic_vector(signed(tmp_13_i_cast_fu_763_p1) + signed(tmp_12_i_fu_755_p3));
    p_Val2_7_fu_889_p0 <= fc_layer2_out_V_load_reg_1115;
    p_Val2_7_fu_889_p1 <= fc_layer3_weights_V_1_reg_1110;
    p_Val2_7_fu_889_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_7_fu_889_p0) * signed(p_Val2_7_fu_889_p1))), 43));
    p_Val2_8_fu_906_p2 <= std_logic_vector(signed(tmp_8_i_cast_fu_903_p1) + signed(tmp_7_i_fu_895_p3));
    p_shl1_cast_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_611_p3),18));
    p_shl2_cast_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_843_p3),11));
    p_shl3_cast_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_855_p3),11));
    p_shl_cast_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_599_p3),18));

    pool_layer1_out_V_address0_assign_proc : process(grp_conv_layer2_fu_437_image_V_address0, grp_pool_layer1_fu_511_output_V_address0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pool_layer1_out_V_address0 <= grp_pool_layer1_fu_511_output_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pool_layer1_out_V_address0 <= grp_conv_layer2_fu_437_image_V_address0;
        else 
            pool_layer1_out_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    pool_layer1_out_V_address1_assign_proc : process(grp_conv_layer2_fu_437_image_V_address1, grp_pool_layer1_fu_511_output_V_address1, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pool_layer1_out_V_address1 <= grp_pool_layer1_fu_511_output_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pool_layer1_out_V_address1 <= grp_conv_layer2_fu_437_image_V_address1;
        else 
            pool_layer1_out_V_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    pool_layer1_out_V_ce0_assign_proc : process(grp_conv_layer2_fu_437_image_V_ce0, grp_pool_layer1_fu_511_output_V_ce0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pool_layer1_out_V_ce0 <= grp_pool_layer1_fu_511_output_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pool_layer1_out_V_ce0 <= grp_conv_layer2_fu_437_image_V_ce0;
        else 
            pool_layer1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pool_layer1_out_V_ce1_assign_proc : process(grp_conv_layer2_fu_437_image_V_ce1, grp_pool_layer1_fu_511_output_V_ce1, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pool_layer1_out_V_ce1 <= grp_pool_layer1_fu_511_output_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pool_layer1_out_V_ce1 <= grp_conv_layer2_fu_437_image_V_ce1;
        else 
            pool_layer1_out_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    pool_layer1_out_V_d0 <= grp_pool_layer1_fu_511_output_V_d0;
    pool_layer1_out_V_d1 <= grp_pool_layer1_fu_511_output_V_d1;

    pool_layer1_out_V_we0_assign_proc : process(grp_pool_layer1_fu_511_output_V_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pool_layer1_out_V_we0 <= grp_pool_layer1_fu_511_output_V_we0;
        else 
            pool_layer1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pool_layer1_out_V_we1_assign_proc : process(grp_pool_layer1_fu_511_output_V_we1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pool_layer1_out_V_we1 <= grp_pool_layer1_fu_511_output_V_we1;
        else 
            pool_layer1_out_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    pool_layer2_out_V_address0_assign_proc : process(ap_CS_fsm_state10, grp_pool_layer2_fu_429_output_V_address0, ap_CS_fsm_state8, tmp_i_21_fu_594_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pool_layer2_out_V_address0 <= tmp_i_21_fu_594_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pool_layer2_out_V_address0 <= grp_pool_layer2_fu_429_output_V_address0;
        else 
            pool_layer2_out_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    pool_layer2_out_V_address1 <= grp_pool_layer2_fu_429_output_V_address1;

    pool_layer2_out_V_ce0_assign_proc : process(ap_CS_fsm_state10, grp_pool_layer2_fu_429_output_V_ce0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pool_layer2_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pool_layer2_out_V_ce0 <= grp_pool_layer2_fu_429_output_V_ce0;
        else 
            pool_layer2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pool_layer2_out_V_ce1_assign_proc : process(grp_pool_layer2_fu_429_output_V_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pool_layer2_out_V_ce1 <= grp_pool_layer2_fu_429_output_V_ce1;
        else 
            pool_layer2_out_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    pool_layer2_out_V_d0 <= grp_pool_layer2_fu_429_output_V_d0;
    pool_layer2_out_V_d1 <= grp_pool_layer2_fu_429_output_V_d1;

    pool_layer2_out_V_we0_assign_proc : process(grp_pool_layer2_fu_429_output_V_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pool_layer2_out_V_we0 <= grp_pool_layer2_fu_429_output_V_we0;
        else 
            pool_layer2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pool_layer2_out_V_we1_assign_proc : process(grp_pool_layer2_fu_429_output_V_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pool_layer2_out_V_we1 <= grp_pool_layer2_fu_429_output_V_we1;
        else 
            pool_layer2_out_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_782_p1 <= p_Val2_3_reg_359(23 - 1 downto 0);
    tmp_11_fu_922_p1 <= p_Val2_6_reg_405(23 - 1 downto 0);
    tmp_12_i_fu_755_p3 <= (p_Val2_3_reg_359 & ap_const_lv20_0);
        tmp_13_i_cast_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_4_reg_1064),44));

    tmp_17_i_fu_645_p3 <= (p_Val2_s_reg_324 & ap_const_lv20_0);
        tmp_18_i_cast_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_reg_1003),44));

    tmp_1_fu_611_p3 <= (j_i_reg_337 & ap_const_lv3_0);
    tmp_2_fu_623_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_607_p1) - unsigned(p_shl1_cast_fu_619_p1));
        tmp_3_cast_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_629_p2),64));

    tmp_3_fu_629_p2 <= std_logic_vector(unsigned(tmp_2_fu_623_p2) + unsigned(tmp_i_cast_reg_965));
    tmp_4_fu_672_p1 <= p_Val2_s_reg_324(23 - 1 downto 0);
    tmp_5_cast_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_739_p2),64));
    tmp_5_fu_739_p2 <= std_logic_vector(unsigned(phi_mul_reg_383) + unsigned(tmp_i9_cast_reg_1021));
    tmp_6_fu_843_p3 <= (j_i2_reg_418 & ap_const_lv3_0);
    tmp_7_fu_855_p3 <= (j_i2_reg_418 & ap_const_lv1_0);
    tmp_7_i_fu_895_p3 <= (p_Val2_6_reg_405 & ap_const_lv20_0);
    tmp_8_fu_867_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_863_p1) + unsigned(p_shl2_cast_fu_851_p1));
        tmp_8_i_cast_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_7_reg_1120),44));

    tmp_9_cast_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_873_p2),64));
    tmp_9_fu_873_p2 <= std_logic_vector(unsigned(tmp_8_fu_867_p2) + unsigned(tmp_i1_cast_reg_1082));
    tmp_fu_599_p3 <= (j_i_reg_337 & ap_const_lv7_0);
    tmp_i1_27_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_394),64));
    tmp_i1_cast_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_394),11));
    tmp_i1_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i1_reg_372),64));
    tmp_i2_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i2_reg_418),64));
    tmp_i9_cast_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i7_reg_348),14));
    tmp_i9_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i7_reg_348),64));
    tmp_i_21_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_337),64));
    tmp_i_cast_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_313),18));
    tmp_i_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_313),64));
    tmp_i_i1_fu_786_p2 <= "1" when (signed(p_Val2_3_reg_359) > signed(ap_const_lv24_0)) else "0";
    tmp_i_i2_fu_926_p2 <= "1" when (signed(p_Val2_6_reg_405) > signed(ap_const_lv24_0)) else "0";
    tmp_i_i_fu_676_p2 <= "1" when (signed(p_Val2_s_reg_324) > signed(ap_const_lv24_0)) else "0";
end behav;
