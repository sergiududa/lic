-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pool_layer2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    image_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    image_r_ce0 : OUT STD_LOGIC;
    image_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of pool_layer2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv6_D : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv7_D : STD_LOGIC_VECTOR (6 downto 0) := "0001101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal channel_1_fu_192_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal channel_1_reg_530 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_cast2_fu_198_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_cast2_reg_535 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond2_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast_fu_202_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_cast_reg_540 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_fu_216_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_reg_548 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_2_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_cast_fu_262_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_cast_reg_553 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_7_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_304_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal k_1_fu_320_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_1_reg_579 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_22_fu_336_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_22_reg_584 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond1_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_379_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal l_1_fu_395_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal l_1_reg_597 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal image_load_reg_607 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_17_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_614 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal max_2_fu_520_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal channel_reg_100 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_112 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_124 : STD_LOGIC_VECTOR (2 downto 0);
    signal max1_reg_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_147 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_1_reg_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_reg_170 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_13_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_cast_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_cast_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_216_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_222_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_232_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_244_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl_cast_fu_240_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_cast_fu_252_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_256_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_cast_fu_272_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_276_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_281_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_fu_291_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_cast_fu_310_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_326_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_22_fu_336_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_19_fu_342_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_cast_fu_352_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_fu_356_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_32_cast_fu_361_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_21_fu_369_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal l_cast_fu_385_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_401_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_cast_fu_407_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_fu_411_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_24_fu_416_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_37_cast_fu_424_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_25_fu_428_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal image_load_to_int_fu_438_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_1_to_int_fu_455_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_441_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_451_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_459_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_fu_469_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs6_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_22_fu_336_p00 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_fu_216_p00 : STD_LOGIC_VECTOR (5 downto 0);

    component nnet_fcmp_32ns_32fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    nnet_fcmp_32ns_32fYi_U21 : component nnet_fcmp_32ns_32fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => image_load_reg_607,
        din1 => max_1_reg_158,
        opcode => ap_const_lv5_2,
        dout => tmp_17_fu_181_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    channel_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                channel_reg_100 <= channel_1_reg_530;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                channel_reg_100 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_186_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_112 <= ap_const_lv3_0;
            elsif (((tmp_7_fu_266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_reg_112 <= i_1_fu_304_p2;
            end if; 
        end if;
    end process;

    j_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_206_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_124 <= ap_const_lv3_0;
            elsif (((exitcond1_fu_314_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j_reg_124 <= j_1_fu_379_p2;
            end if; 
        end if;
    end process;

    k_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_389_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                k_reg_147 <= k_1_reg_579;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k_reg_147 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    l_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_314_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                l_reg_170 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                l_reg_170 <= l_1_reg_597;
            end if; 
        end if;
    end process;

    max1_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_389_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                max1_reg_136 <= max_1_reg_158;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                max1_reg_136 <= image_r_q0;
            end if; 
        end if;
    end process;

    max_1_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_314_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                max_1_reg_158 <= max1_reg_136;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                max_1_reg_158 <= max_2_fu_520_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                channel_1_reg_530 <= channel_1_fu_192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                image_load_reg_607 <= image_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                k_1_reg_579 <= k_1_fu_320_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                l_1_reg_597 <= l_1_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_17_reg_614 <= tmp_17_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_314_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_22_reg_584 <= tmp_22_fu_336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_206_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_23_cast_reg_553(6 downto 1) <= tmp_23_cast_fu_262_p1(6 downto 1);
                tmp_5_reg_548 <= tmp_5_fu_216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_186_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_cast2_reg_535(4 downto 0) <= tmp_cast2_fu_198_p1(4 downto 0);
                    tmp_cast_reg_540(4 downto 0) <= tmp_cast_fu_202_p1(4 downto 0);
            end if;
        end if;
    end process;
    tmp_cast2_reg_535(12 downto 5) <= "00000000";
    tmp_cast_reg_540(10 downto 5) <= "000000";
    tmp_23_cast_reg_553(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_186_p2, ap_CS_fsm_state3, tmp_2_fu_206_p2, ap_CS_fsm_state4, tmp_7_fu_266_p2, ap_CS_fsm_state6, exitcond1_fu_314_p2, ap_CS_fsm_state7, exitcond_fu_389_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond2_fu_186_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_2_fu_206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((tmp_7_fu_266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((exitcond1_fu_314_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((exitcond_fu_389_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_186_p2)
    begin
        if ((((exitcond2_fu_186_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_186_p2)
    begin
        if (((exitcond2_fu_186_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    channel_1_fu_192_p2 <= std_logic_vector(unsigned(channel_reg_100) + unsigned(ap_const_lv5_1));
    exitcond1_fu_314_p2 <= "1" when (k_reg_147 = ap_const_lv2_2) else "0";
    exitcond2_fu_186_p2 <= "1" when (channel_reg_100 = ap_const_lv5_10) else "0";
    exitcond_fu_389_p2 <= "1" when (l_reg_170 = ap_const_lv2_2) else "0";
    i_1_fu_304_p2 <= std_logic_vector(unsigned(i_reg_112) + unsigned(ap_const_lv3_2));
    image_load_to_int_fu_438_p1 <= image_load_reg_607;

    image_r_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, tmp_13_fu_299_p1, tmp_38_cast_fu_433_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            image_r_address0 <= tmp_38_cast_fu_433_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            image_r_address0 <= tmp_13_fu_299_p1(12 - 1 downto 0);
        else 
            image_r_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    image_r_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            image_r_ce0 <= ap_const_logic_1;
        else 
            image_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_379_p2 <= std_logic_vector(unsigned(j_reg_124) + unsigned(ap_const_lv3_2));
    k_1_fu_320_p2 <= std_logic_vector(unsigned(k_reg_147) + unsigned(ap_const_lv2_1));
    k_cast_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_147),3));
    l_1_fu_395_p2 <= std_logic_vector(unsigned(l_reg_170) + unsigned(ap_const_lv2_1));
    l_cast_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_reg_170),3));
    max_1_to_int_fu_455_p1 <= max_1_reg_158;
    max_2_fu_520_p3 <= 
        image_load_reg_607 when (tmp_18_fu_515_p2(0) = '1') else 
        max_1_reg_158;
    notlhs5_fu_491_p2 <= "0" when (tmp_12_fu_459_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_473_p2 <= "0" when (tmp_10_fu_441_p4 = ap_const_lv8_FF) else "1";
    notrhs6_fu_497_p2 <= "1" when (tmp_27_fu_469_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_479_p2 <= "1" when (tmp_26_fu_451_p1 = ap_const_lv23_0) else "0";
    output_r_address0 <= tmp_33_cast_fu_374_p1(10 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= max1_reg_136;

    output_r_we0_assign_proc : process(ap_CS_fsm_state6, exitcond1_fu_314_p2)
    begin
        if (((exitcond1_fu_314_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_244_p3),6));
    p_shl_cast_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_232_p3),6));
    tmp_10_fu_441_p4 <= image_load_to_int_fu_438_p1(30 downto 23);
    tmp_11_fu_291_p3 <= (tmp_fu_281_p4 & channel_reg_100);
    tmp_12_fu_459_p4 <= max_1_to_int_fu_455_p1(30 downto 23);
    tmp_13_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_291_p3),64));
    tmp_14_fu_485_p2 <= (notrhs_fu_479_p2 or notlhs_fu_473_p2);
    tmp_15_fu_503_p2 <= (notrhs6_fu_497_p2 or notlhs5_fu_491_p2);
    tmp_16_fu_509_p2 <= (tmp_15_fu_503_p2 and tmp_14_fu_485_p2);
    tmp_18_fu_515_p2 <= (tmp_17_reg_614 and tmp_16_fu_509_p2);
    tmp_19_fu_342_p4 <= j_reg_124(2 downto 1);
    tmp_1_cast_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_342_p4),7));
    tmp_1_fu_222_p4 <= i_reg_112(2 downto 1);
    tmp_20_fu_356_p2 <= std_logic_vector(signed(tmp_23_cast_reg_553) + signed(tmp_1_cast_fu_352_p1));
    tmp_21_fu_369_p2 <= std_logic_vector(unsigned(tmp_32_cast_fu_361_p3) + unsigned(tmp_cast_reg_540));
    tmp_22_fu_336_p0 <= tmp_22_fu_336_p00(3 - 1 downto 0);
    tmp_22_fu_336_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_326_p2),7));
    tmp_22_fu_336_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_336_p0) * unsigned(ap_const_lv7_D), 7));
        tmp_23_cast_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_256_p2),7));

    tmp_23_fu_411_p2 <= std_logic_vector(unsigned(tmp_4_cast_fu_407_p1) + unsigned(tmp_22_reg_584));
    tmp_24_fu_416_p3 <= (tmp_23_fu_411_p2 & ap_const_lv4_0);
    tmp_25_fu_428_p2 <= std_logic_vector(unsigned(tmp_cast2_reg_535) + unsigned(tmp_37_cast_fu_424_p1));
    tmp_26_fu_451_p1 <= image_load_to_int_fu_438_p1(23 - 1 downto 0);
    tmp_27_fu_469_p1 <= max_1_to_int_fu_455_p1(23 - 1 downto 0);
    tmp_2_fu_206_p2 <= "1" when (unsigned(i_reg_112) < unsigned(ap_const_lv3_5)) else "0";
    tmp_32_cast_fu_361_p3 <= (tmp_20_fu_356_p2 & ap_const_lv4_0);
    tmp_33_cast_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_369_p2),64));
    tmp_37_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_416_p3),13));
    tmp_38_cast_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_428_p2),64));
    tmp_3_fu_232_p3 <= (tmp_1_fu_222_p4 & ap_const_lv3_0);
    tmp_4_cast_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_401_p2),7));
    tmp_4_fu_244_p3 <= (tmp_1_fu_222_p4 & ap_const_lv1_0);
    tmp_5_fu_216_p0 <= tmp_5_fu_216_p00(3 - 1 downto 0);
    tmp_5_fu_216_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_112),6));
    tmp_5_fu_216_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_216_p0) * unsigned(ap_const_lv6_D), 6));
    tmp_6_fu_326_p2 <= std_logic_vector(unsigned(k_cast_fu_310_p1) + unsigned(i_reg_112));
    tmp_7_fu_266_p2 <= "1" when (unsigned(j_reg_124) < unsigned(ap_const_lv3_5)) else "0";
    tmp_8_cast_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_124),6));
    tmp_8_fu_256_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_240_p1) - unsigned(p_shl1_cast_fu_252_p1));
    tmp_9_fu_276_p2 <= std_logic_vector(unsigned(tmp_5_reg_548) + unsigned(tmp_8_cast_fu_272_p1));
    tmp_cast2_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channel_reg_100),13));
    tmp_cast_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channel_reg_100),11));
    tmp_fu_281_p4 <= tmp_9_fu_276_p2(5 downto 1);
    tmp_s_fu_401_p2 <= std_logic_vector(unsigned(j_reg_124) + unsigned(l_cast_fu_385_p1));
end behav;
