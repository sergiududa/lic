-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_layer1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_layer1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_1D : STD_LOGIC_VECTOR (9 downto 0) := "0000011101";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_layer1_bias_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_layer1_bias_ce0 : STD_LOGIC;
    signal conv_layer1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal image_0_ce0 : STD_LOGIC;
    signal image_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_layer1_weights_s_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_layer1_weights_s_ce0 : STD_LOGIC;
    signal conv_layer1_weights_s_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal filter_2_fu_225_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal filter_2_reg_451 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond5_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast1_fu_236_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast1_reg_461 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_cast_fu_240_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_cast_reg_466 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_layer1_bias_loa_reg_471 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_fu_244_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul_reg_476 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_5_fu_256_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_5_reg_484 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_5_fu_268_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_5_reg_492 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal row_offset_2_fu_284_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_offset_2_reg_500 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_29_fu_290_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_29_reg_505 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_cast_fu_304_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_93_cast_reg_510 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_58_fu_330_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_58_reg_515 : STD_LOGIC_VECTOR (13 downto 0);
    signal col_offset_2_fu_345_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_offset_2_reg_523 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond1_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal image_0_load_reg_538 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal conv_layer1_weights_1_reg_543 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_reg_548 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal a_assign_reg_558 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal a_assign_2_fu_437_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_2_reg_565 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal filter_reg_110 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond4_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_122 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond3_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_134 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_146 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal sum_reg_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_offset_reg_170 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_1_reg_181 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_offset_reg_193 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_99_cast_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_91_cast_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_204_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_204_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal row_offset_cast4_fu_274_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_59_fu_296_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_28_cast_fu_308_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_312_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_56_fu_318_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_90_cast_fu_326_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal col_offset_cast2_fu_335_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_32_fu_351_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_60_fu_357_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_34_cast_fu_369_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_62_fu_373_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_98_cast_fu_378_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_63_fu_386_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal a_assign_to_int_fu_396_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_399_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_55_fu_409_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);

    component nnet_fadd_32ns_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nnet_fmul_32ns_32eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nnet_fcmp_32ns_32fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_layer1_conv_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_layer1_image_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_layer1_conv_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_layer1_bias_U : component conv_layer1_conv_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_layer1_bias_address0,
        ce0 => conv_layer1_bias_ce0,
        q0 => conv_layer1_bias_q0);

    image_0_U : component conv_layer1_image_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => image_0_address0,
        ce0 => image_0_ce0,
        q0 => image_0_q0);

    conv_layer1_weights_s_U : component conv_layer1_conv_cud
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_layer1_weights_s_address0,
        ce0 => conv_layer1_weights_s_ce0,
        q0 => conv_layer1_weights_s_q0);

    nnet_fadd_32ns_32dEe_U1 : component nnet_fadd_32ns_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_204_p0,
        din1 => grp_fu_204_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_204_p2);

    nnet_fmul_32ns_32eOg_U2 : component nnet_fmul_32ns_32eOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => image_0_load_reg_538,
        din1 => conv_layer1_weights_1_reg_543,
        ce => ap_const_logic_1,
        dout => grp_fu_210_p2);

    nnet_fcmp_32ns_32fYi_U3 : component nnet_fcmp_32ns_32fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => a_assign_reg_558,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_38_fu_214_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    col_offset_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                col_offset_reg_193 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                col_offset_reg_193 <= col_offset_2_reg_523;
            end if; 
        end if;
    end process;

    filter_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond4_fu_250_p2 = ap_const_lv1_1))) then 
                filter_reg_110 <= filter_2_reg_451;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                filter_reg_110 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_262_p2 = ap_const_lv1_1))) then 
                i_reg_122 <= i_5_reg_484;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_122 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_250_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_reg_146 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                j_reg_146 <= j_5_reg_492;
            end if; 
        end if;
    end process;

    phi_mul_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_262_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_134 <= next_mul_reg_476;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                phi_mul_reg_134 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    row_offset_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                row_offset_reg_170 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond1_fu_339_p2 = ap_const_lv1_1))) then 
                row_offset_reg_170 <= row_offset_2_reg_500;
            end if; 
        end if;
    end process;

    sum_1_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                sum_1_reg_181 <= sum_reg_158;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                sum_1_reg_181 <= grp_fu_204_p2;
            end if; 
        end if;
    end process;

    sum_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                sum_reg_158 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond1_fu_339_p2 = ap_const_lv1_1))) then 
                sum_reg_158 <= sum_1_reg_181;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                a_assign_2_reg_565 <= a_assign_2_fu_437_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                a_assign_reg_558 <= grp_fu_204_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                col_offset_2_reg_523 <= col_offset_2_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                conv_layer1_bias_loa_reg_471 <= conv_layer1_bias_q0;
                    tmp_cast1_reg_461(3 downto 0) <= tmp_cast1_fu_236_p1(3 downto 0);
                    tmp_cast_reg_466(3 downto 0) <= tmp_cast_fu_240_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                conv_layer1_weights_1_reg_543 <= conv_layer1_weights_s_q0;
                image_0_load_reg_538 <= image_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                filter_2_reg_451 <= filter_2_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_5_reg_484 <= i_5_fu_256_p2;
                next_mul_reg_476 <= next_mul_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_5_reg_492 <= j_5_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                row_offset_2_reg_500 <= row_offset_2_fu_284_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_29_reg_505 <= tmp_29_fu_290_p2;
                    tmp_93_cast_reg_510(4 downto 2) <= tmp_93_cast_fu_304_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_35_reg_548 <= grp_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond2_fu_278_p2 = ap_const_lv1_1))) then
                tmp_58_reg_515 <= tmp_58_fu_330_p2;
            end if;
        end if;
    end process;
    tmp_cast1_reg_461(8 downto 4) <= "00000";
    tmp_cast_reg_466(13 downto 4) <= "0000000000";
    tmp_93_cast_reg_510(1 downto 0) <= "00";
    tmp_93_cast_reg_510(5) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_219_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, exitcond2_fu_278_p2, ap_CS_fsm_state7, exitcond1_fu_339_p2, exitcond4_fu_250_p2, exitcond3_fu_262_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond5_fu_219_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond4_fu_250_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_262_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((exitcond2_fu_278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond1_fu_339_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_assign_2_fu_437_p3 <= 
        a_assign_reg_558 when (tmp_39_fu_431_p2(0) = '1') else 
        ap_const_lv32_0;
    a_assign_to_int_fu_396_p1 <= a_assign_reg_558;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_219_p2)
    begin
        if ((((exitcond5_fu_219_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_219_p2)
    begin
        if (((exitcond5_fu_219_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_offset_2_fu_345_p2 <= std_logic_vector(unsigned(col_offset_reg_193) + unsigned(ap_const_lv3_1));
    col_offset_cast2_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_reg_193),5));
    conv_layer1_bias_address0 <= tmp_fu_231_p1(3 - 1 downto 0);

    conv_layer1_bias_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_layer1_bias_ce0 <= ap_const_logic_1;
        else 
            conv_layer1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer1_weights_s_address0 <= tmp_99_cast_fu_391_p1(7 - 1 downto 0);

    conv_layer1_weights_s_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            conv_layer1_weights_s_ce0 <= ap_const_logic_1;
        else 
            conv_layer1_weights_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_339_p2 <= "1" when (col_offset_reg_193 = ap_const_lv3_4) else "0";
    exitcond2_fu_278_p2 <= "1" when (row_offset_reg_170 = ap_const_lv3_4) else "0";
    exitcond3_fu_262_p2 <= "1" when (j_reg_146 = ap_const_lv5_1D) else "0";
    exitcond4_fu_250_p2 <= "1" when (i_reg_122 = ap_const_lv5_1D) else "0";
    exitcond5_fu_219_p2 <= "1" when (filter_reg_110 = ap_const_lv4_8) else "0";
    filter_2_fu_225_p2 <= std_logic_vector(unsigned(filter_reg_110) + unsigned(ap_const_lv4_1));

    grp_fu_204_p0_assign_proc : process(ap_CS_fsm_state6, sum_reg_158, sum_1_reg_181, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_204_p0 <= sum_1_reg_181;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_204_p0 <= sum_reg_158;
        else 
            grp_fu_204_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_204_p1_assign_proc : process(conv_layer1_bias_loa_reg_471, ap_CS_fsm_state6, tmp_35_reg_548, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_204_p1 <= tmp_35_reg_548;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_204_p1 <= conv_layer1_bias_loa_reg_471;
        else 
            grp_fu_204_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_5_fu_256_p2 <= std_logic_vector(unsigned(i_reg_122) + unsigned(ap_const_lv5_1));
    image_0_address0 <= tmp_61_fu_364_p1(10 - 1 downto 0);

    image_0_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            image_0_ce0 <= ap_const_logic_1;
        else 
            image_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_5_fu_268_p2 <= std_logic_vector(unsigned(j_reg_146) + unsigned(ap_const_lv5_1));
    next_mul_fu_244_p2 <= std_logic_vector(unsigned(phi_mul_reg_134) + unsigned(ap_const_lv10_1D));
    notlhs_fu_413_p2 <= "0" when (tmp_33_fu_399_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_419_p2 <= "1" when (tmp_55_fu_409_p1 = ap_const_lv23_0) else "0";
    output_r_address0 <= tmp_91_cast_fu_444_p1(13 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= a_assign_2_reg_565;

    output_r_we0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    row_offset_2_fu_284_p2 <= std_logic_vector(unsigned(row_offset_reg_170) + unsigned(ap_const_lv3_1));
    row_offset_cast4_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_offset_reg_170),5));
    tmp_28_cast_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_146),10));
    tmp_29_fu_290_p2 <= std_logic_vector(unsigned(i_reg_122) + unsigned(row_offset_cast4_fu_274_p1));
    tmp_32_fu_351_p2 <= std_logic_vector(unsigned(col_offset_cast2_fu_335_p1) + unsigned(j_reg_146));
    tmp_33_fu_399_p4 <= a_assign_to_int_fu_396_p1(30 downto 23);
    tmp_34_cast_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_reg_193),6));
    tmp_37_fu_425_p2 <= (notrhs_fu_419_p2 or notlhs_fu_413_p2);
    tmp_39_fu_431_p2 <= (tmp_38_fu_214_p2 and tmp_37_fu_425_p2);
    tmp_55_fu_409_p1 <= a_assign_to_int_fu_396_p1(23 - 1 downto 0);
    tmp_56_fu_318_p3 <= (tmp_s_fu_312_p2 & ap_const_lv3_0);
    tmp_58_fu_330_p2 <= std_logic_vector(unsigned(tmp_cast_reg_466) + unsigned(tmp_90_cast_fu_326_p1));
    tmp_59_fu_296_p3 <= (row_offset_reg_170 & ap_const_lv2_0);
    tmp_60_fu_357_p3 <= (tmp_29_reg_505 & tmp_32_fu_351_p2);
    tmp_61_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_fu_357_p3),64));
    tmp_62_fu_373_p2 <= std_logic_vector(unsigned(tmp_93_cast_reg_510) + unsigned(tmp_34_cast_fu_369_p1));
    tmp_63_fu_386_p2 <= std_logic_vector(unsigned(tmp_98_cast_fu_378_p3) + unsigned(tmp_cast1_reg_461));
    tmp_90_cast_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_318_p3),14));
    tmp_91_cast_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_reg_515),64));
    tmp_93_cast_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_fu_296_p3),6));
    tmp_98_cast_fu_378_p3 <= (tmp_62_fu_373_p2 & ap_const_lv3_0);
    tmp_99_cast_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_fu_386_p2),64));
    tmp_cast1_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(filter_reg_110),9));
    tmp_cast_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(filter_reg_110),14));
    tmp_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(filter_reg_110),64));
    tmp_s_fu_312_p2 <= std_logic_vector(unsigned(tmp_28_cast_fu_308_p1) + unsigned(phi_mul_reg_134));
end behav;
