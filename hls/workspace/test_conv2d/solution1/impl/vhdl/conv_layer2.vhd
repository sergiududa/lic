-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_layer2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    image_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    image_r_ce0 : OUT STD_LOGIC;
    image_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_layer2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_layer2_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_layer2_bias_ce0 : STD_LOGIC;
    signal conv_layer2_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_layer2_weights_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_layer2_weights_ce0 : STD_LOGIC;
    signal conv_layer2_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal filter_1_fu_260_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal filter_1_reg_560 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond5_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast2_fu_271_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_cast2_reg_570 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_cast_fu_275_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_cast_reg_575 : STD_LOGIC_VECTOR (12 downto 0);
    signal conv_layer2_bias_loa_reg_580 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_fu_279_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_mul_reg_585 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_4_fu_291_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_593 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_4_fu_303_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_4_reg_601 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal row_offset_1_fu_319_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_offset_1_reg_609 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_50_fu_355_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_50_reg_614 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond2_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_75_cast_fu_369_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_75_cast_reg_619 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_47_fu_395_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_47_reg_624 : STD_LOGIC_VECTOR (12 downto 0);
    signal col_offset_1_fu_410_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_offset_1_reg_632 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_78_cast_fu_431_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_78_cast_reg_637 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond1_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_444_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_54_reg_642 : STD_LOGIC_VECTOR (6 downto 0);
    signal channel_offset_1_fu_458_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal channel_offset_1_reg_650 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal image_load_reg_665 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal conv_layer2_weights_1_reg_670 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_245_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_reg_675 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_239_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal a_assign_reg_685 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal a_assign_1_fu_546_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_1_reg_692 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal filter_reg_122 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond4_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_134 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond3_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_146 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_158 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal sum_reg_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_offset_reg_182 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_reg_193 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_offset_reg_205 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_2_reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal channel_offset_reg_228 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_82_cast_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_86_cast_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_70_cast_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_239_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_239_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal row_offset_cast5_fu_309_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_20_fu_325_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_48_fu_331_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_49_fu_343_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_339_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_351_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_51_fu_361_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_19_cast_fu_373_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_377_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_46_fu_383_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_69_cast_fu_391_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal col_offset_cast3_fu_400_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_23_fu_416_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_24_cast_fu_422_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_52_fu_426_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_53_fu_439_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_26_cast_fu_468_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_55_fu_472_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_26_fu_464_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_56_fu_482_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_85_cast_fu_487_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_57_fu_495_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal a_assign_to_int_fu_505_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_508_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_45_fu_518_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);

    component nnet_fadd_32ns_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nnet_fmul_32ns_32eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nnet_fcmp_32ns_32fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_layer2_conv_g8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_layer2_conv_hbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_layer2_bias_U : component conv_layer2_conv_g8j
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_layer2_bias_address0,
        ce0 => conv_layer2_bias_ce0,
        q0 => conv_layer2_bias_q0);

    conv_layer2_weights_U : component conv_layer2_conv_hbi
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_layer2_weights_address0,
        ce0 => conv_layer2_weights_ce0,
        q0 => conv_layer2_weights_q0);

    nnet_fadd_32ns_32dEe_U14 : component nnet_fadd_32ns_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_239_p0,
        din1 => grp_fu_239_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_239_p2);

    nnet_fmul_32ns_32eOg_U15 : component nnet_fmul_32ns_32eOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => image_load_reg_665,
        din1 => conv_layer2_weights_1_reg_670,
        ce => ap_const_logic_1,
        dout => grp_fu_245_p2);

    nnet_fcmp_32ns_32fYi_U16 : component nnet_fcmp_32ns_32fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => a_assign_reg_685,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_31_fu_249_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    channel_offset_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_404_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                channel_offset_reg_228 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                channel_offset_reg_228 <= channel_offset_1_reg_650;
            end if; 
        end if;
    end process;

    col_offset_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_fu_452_p2 = ap_const_lv1_1))) then 
                col_offset_reg_205 <= col_offset_1_reg_632;
            elsif (((exitcond2_fu_313_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                col_offset_reg_205 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    filter_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond4_fu_285_p2 = ap_const_lv1_1))) then 
                filter_reg_122 <= filter_1_reg_560;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                filter_reg_122 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_297_p2 = ap_const_lv1_1))) then 
                i_reg_134 <= i_4_reg_593;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_134 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_285_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_reg_158 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                j_reg_158 <= j_4_reg_601;
            end if; 
        end if;
    end process;

    phi_mul_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_297_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_146 <= next_mul_reg_585;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                phi_mul_reg_146 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    row_offset_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_297_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                row_offset_reg_182 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond1_fu_404_p2 = ap_const_lv1_1))) then 
                row_offset_reg_182 <= row_offset_1_reg_609;
            end if; 
        end if;
    end process;

    sum_1_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_fu_452_p2 = ap_const_lv1_1))) then 
                sum_1_reg_193 <= sum_2_reg_216;
            elsif (((exitcond2_fu_313_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                sum_1_reg_193 <= sum_reg_170;
            end if; 
        end if;
    end process;

    sum_2_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_404_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                sum_2_reg_216 <= sum_1_reg_193;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                sum_2_reg_216 <= grp_fu_239_p2;
            end if; 
        end if;
    end process;

    sum_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_297_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                sum_reg_170 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond1_fu_404_p2 = ap_const_lv1_1))) then 
                sum_reg_170 <= sum_1_reg_193;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                a_assign_1_reg_692 <= a_assign_1_fu_546_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                a_assign_reg_685 <= grp_fu_239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                channel_offset_1_reg_650 <= channel_offset_1_fu_458_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                col_offset_1_reg_632 <= col_offset_1_fu_410_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                conv_layer2_bias_loa_reg_580 <= conv_layer2_bias_q0;
                    tmp_cast2_reg_570(4 downto 0) <= tmp_cast2_fu_271_p1(4 downto 0);
                    tmp_cast_reg_575(4 downto 0) <= tmp_cast_fu_275_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                conv_layer2_weights_1_reg_670 <= conv_layer2_weights_q0;
                image_load_reg_665 <= image_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                filter_1_reg_560 <= filter_1_fu_260_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_4_reg_593 <= i_4_fu_291_p2;
                next_mul_reg_585 <= next_mul_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_4_reg_601 <= j_4_fu_303_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                row_offset_1_reg_609 <= row_offset_1_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_27_reg_675 <= grp_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond2_fu_313_p2 = ap_const_lv1_1))) then
                tmp_47_reg_624 <= tmp_47_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_313_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    tmp_50_reg_614(8 downto 1) <= tmp_50_fu_355_p2(8 downto 1);
                    tmp_75_cast_reg_619(2 downto 1) <= tmp_75_cast_fu_369_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_404_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    tmp_54_reg_642(6 downto 3) <= tmp_54_fu_444_p3(6 downto 3);
                    tmp_78_cast_reg_637(11 downto 3) <= tmp_78_cast_fu_431_p3(11 downto 3);
            end if;
        end if;
    end process;
    tmp_cast2_reg_570(10 downto 5) <= "000000";
    tmp_cast_reg_575(12 downto 5) <= "00000000";
    tmp_50_reg_614(0) <= '0';
    tmp_75_cast_reg_619(0) <= '0';
    tmp_75_cast_reg_619(3) <= '0';
    tmp_78_cast_reg_637(2 downto 0) <= "000";
    tmp_54_reg_642(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_254_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, exitcond2_fu_313_p2, ap_CS_fsm_state7, exitcond1_fu_404_p2, ap_CS_fsm_state8, exitcond_fu_452_p2, exitcond4_fu_285_p2, exitcond3_fu_297_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond5_fu_254_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond4_fu_285_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_297_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((exitcond2_fu_313_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond1_fu_404_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_fu_452_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_assign_1_fu_546_p3 <= 
        a_assign_reg_685 when (tmp_32_fu_540_p2(0) = '1') else 
        ap_const_lv32_0;
    a_assign_to_int_fu_505_p1 <= a_assign_reg_685;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_254_p2)
    begin
        if ((((exitcond5_fu_254_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_254_p2)
    begin
        if (((exitcond5_fu_254_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    channel_offset_1_fu_458_p2 <= std_logic_vector(unsigned(channel_offset_reg_228) + unsigned(ap_const_lv4_1));
    col_offset_1_fu_410_p2 <= std_logic_vector(unsigned(col_offset_reg_205) + unsigned(ap_const_lv2_1));
    col_offset_cast3_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset_reg_205),4));
    conv_layer2_bias_address0 <= tmp_fu_266_p1(4 - 1 downto 0);

    conv_layer2_bias_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_layer2_bias_ce0 <= ap_const_logic_1;
        else 
            conv_layer2_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer2_weights_address0 <= tmp_86_cast_fu_500_p1(9 - 1 downto 0);

    conv_layer2_weights_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_layer2_weights_ce0 <= ap_const_logic_1;
        else 
            conv_layer2_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_404_p2 <= "1" when (col_offset_reg_205 = ap_const_lv2_2) else "0";
    exitcond2_fu_313_p2 <= "1" when (row_offset_reg_182 = ap_const_lv2_2) else "0";
    exitcond3_fu_297_p2 <= "1" when (j_reg_158 = ap_const_lv4_D) else "0";
    exitcond4_fu_285_p2 <= "1" when (i_reg_134 = ap_const_lv4_D) else "0";
    exitcond5_fu_254_p2 <= "1" when (filter_reg_122 = ap_const_lv5_10) else "0";
    exitcond_fu_452_p2 <= "1" when (channel_offset_reg_228 = ap_const_lv4_8) else "0";
    filter_1_fu_260_p2 <= std_logic_vector(unsigned(filter_reg_122) + unsigned(ap_const_lv5_1));

    grp_fu_239_p0_assign_proc : process(ap_CS_fsm_state6, sum_reg_170, sum_2_reg_216, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_239_p0 <= sum_2_reg_216;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_239_p0 <= sum_reg_170;
        else 
            grp_fu_239_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_239_p1_assign_proc : process(conv_layer2_bias_loa_reg_580, ap_CS_fsm_state6, tmp_27_reg_675, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_239_p1 <= tmp_27_reg_675;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_239_p1 <= conv_layer2_bias_loa_reg_580;
        else 
            grp_fu_239_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_4_fu_291_p2 <= std_logic_vector(unsigned(i_reg_134) + unsigned(ap_const_lv4_1));
    image_r_address0 <= tmp_82_cast_fu_477_p1(11 - 1 downto 0);

    image_r_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            image_r_ce0 <= ap_const_logic_1;
        else 
            image_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_4_fu_303_p2 <= std_logic_vector(unsigned(j_reg_158) + unsigned(ap_const_lv4_1));
    next_mul_fu_279_p2 <= std_logic_vector(unsigned(phi_mul_reg_146) + unsigned(ap_const_lv8_D));
    notlhs_fu_522_p2 <= "0" when (tmp_28_fu_508_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_528_p2 <= "1" when (tmp_45_fu_518_p1 = ap_const_lv23_0) else "0";
    output_r_address0 <= tmp_70_cast_fu_553_p1(12 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= a_assign_1_reg_692;

    output_r_we0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_343_p3),9));
    p_shl_cast_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_fu_331_p3),9));
    row_offset_1_fu_319_p2 <= std_logic_vector(unsigned(row_offset_reg_182) + unsigned(ap_const_lv2_1));
    row_offset_cast5_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_offset_reg_182),4));
    tmp_19_cast_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_158),8));
    tmp_20_fu_325_p2 <= std_logic_vector(unsigned(row_offset_cast5_fu_309_p1) + unsigned(i_reg_134));
    tmp_23_fu_416_p2 <= std_logic_vector(unsigned(j_reg_158) + unsigned(col_offset_cast3_fu_400_p1));
    tmp_24_cast_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_416_p2),9));
    tmp_26_cast_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channel_offset_reg_228),12));
    tmp_26_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channel_offset_reg_228),7));
    tmp_28_fu_508_p4 <= a_assign_to_int_fu_505_p1(30 downto 23);
    tmp_30_fu_534_p2 <= (notrhs_fu_528_p2 or notlhs_fu_522_p2);
    tmp_32_fu_540_p2 <= (tmp_31_fu_249_p2 and tmp_30_fu_534_p2);
    tmp_45_fu_518_p1 <= a_assign_to_int_fu_505_p1(23 - 1 downto 0);
    tmp_46_fu_383_p3 <= (tmp_s_fu_377_p2 & ap_const_lv4_0);
    tmp_47_fu_395_p2 <= std_logic_vector(unsigned(tmp_cast_reg_575) + unsigned(tmp_69_cast_fu_391_p1));
    tmp_48_fu_331_p3 <= (tmp_20_fu_325_p2 & ap_const_lv4_0);
    tmp_49_fu_343_p3 <= (tmp_20_fu_325_p2 & ap_const_lv1_0);
    tmp_50_fu_355_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_339_p1) - unsigned(p_shl1_cast_fu_351_p1));
    tmp_51_fu_361_p3 <= (row_offset_reg_182 & ap_const_lv1_0);
    tmp_52_fu_426_p2 <= std_logic_vector(unsigned(tmp_24_cast_fu_422_p1) + unsigned(tmp_50_reg_614));
    tmp_53_fu_439_p2 <= std_logic_vector(unsigned(col_offset_cast3_fu_400_p1) + unsigned(tmp_75_cast_reg_619));
    tmp_54_fu_444_p3 <= (tmp_53_fu_439_p2 & ap_const_lv3_0);
    tmp_55_fu_472_p2 <= std_logic_vector(unsigned(tmp_26_cast_fu_468_p1) + unsigned(tmp_78_cast_reg_637));
    tmp_56_fu_482_p2 <= std_logic_vector(unsigned(tmp_26_fu_464_p1) + unsigned(tmp_54_reg_642));
    tmp_57_fu_495_p2 <= std_logic_vector(unsigned(tmp_cast2_reg_570) + unsigned(tmp_85_cast_fu_487_p3));
    tmp_69_cast_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_fu_383_p3),13));
    tmp_70_cast_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_reg_624),64));
    tmp_75_cast_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_361_p3),4));
    tmp_78_cast_fu_431_p3 <= (tmp_52_fu_426_p2 & ap_const_lv3_0);
    tmp_82_cast_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_472_p2),64));
    tmp_85_cast_fu_487_p3 <= (tmp_56_fu_482_p2 & ap_const_lv4_0);
    tmp_86_cast_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_495_p2),64));
    tmp_cast2_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(filter_reg_122),11));
    tmp_cast_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(filter_reg_122),13));
    tmp_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(filter_reg_122),64));
    tmp_s_fu_377_p2 <= std_logic_vector(unsigned(tmp_19_cast_fu_373_p1) + unsigned(phi_mul_reg_146));
end behav;
