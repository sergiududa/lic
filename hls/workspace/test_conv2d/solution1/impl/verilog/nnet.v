// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="nnet,hls_ip_2017_4_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.749750,HLS_SYN_LAT=2345882,HLS_SYN_TPT=none,HLS_SYN_MEM=36,HLS_SYN_DSP=10,HLS_SYN_FF=2228,HLS_SYN_LUT=5009}" *)

module nnet (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_return
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [12:0] conv_layer1_out_address0;
reg    conv_layer1_out_ce0;
reg    conv_layer1_out_we0;
wire   [31:0] conv_layer1_out_q0;
reg   [11:0] conv_layer2_out_address0;
reg    conv_layer2_out_ce0;
reg    conv_layer2_out_we0;
wire   [31:0] conv_layer2_out_q0;
reg   [10:0] pool_layer1_out_address0;
reg    pool_layer1_out_ce0;
reg    pool_layer1_out_we0;
wire   [31:0] pool_layer1_out_q0;
reg   [9:0] pool_layer2_out_address0;
reg    pool_layer2_out_ce0;
reg    pool_layer2_out_we0;
wire   [31:0] pool_layer2_out_q0;
wire    grp_conv_layer2_fu_52_ap_start;
wire    grp_conv_layer2_fu_52_ap_done;
wire    grp_conv_layer2_fu_52_ap_idle;
wire    grp_conv_layer2_fu_52_ap_ready;
wire   [11:0] grp_conv_layer2_fu_52_output_r_address0;
wire    grp_conv_layer2_fu_52_output_r_ce0;
wire    grp_conv_layer2_fu_52_output_r_we0;
wire   [31:0] grp_conv_layer2_fu_52_output_r_d0;
wire   [10:0] grp_conv_layer2_fu_52_image_r_address0;
wire    grp_conv_layer2_fu_52_image_r_ce0;
wire    grp_conv_layer1_fu_62_ap_start;
wire    grp_conv_layer1_fu_62_ap_done;
wire    grp_conv_layer1_fu_62_ap_idle;
wire    grp_conv_layer1_fu_62_ap_ready;
wire   [12:0] grp_conv_layer1_fu_62_output_r_address0;
wire    grp_conv_layer1_fu_62_output_r_ce0;
wire    grp_conv_layer1_fu_62_output_r_we0;
wire   [31:0] grp_conv_layer1_fu_62_output_r_d0;
wire    grp_pool_layer1_fu_74_ap_start;
wire    grp_pool_layer1_fu_74_ap_done;
wire    grp_pool_layer1_fu_74_ap_idle;
wire    grp_pool_layer1_fu_74_ap_ready;
wire   [10:0] grp_pool_layer1_fu_74_output_r_address0;
wire    grp_pool_layer1_fu_74_output_r_ce0;
wire    grp_pool_layer1_fu_74_output_r_we0;
wire   [31:0] grp_pool_layer1_fu_74_output_r_d0;
wire   [12:0] grp_pool_layer1_fu_74_image_r_address0;
wire    grp_pool_layer1_fu_74_image_r_ce0;
wire    grp_pool_layer2_fu_80_ap_start;
wire    grp_pool_layer2_fu_80_ap_done;
wire    grp_pool_layer2_fu_80_ap_idle;
wire    grp_pool_layer2_fu_80_ap_ready;
wire   [9:0] grp_pool_layer2_fu_80_output_r_address0;
wire    grp_pool_layer2_fu_80_output_r_ce0;
wire    grp_pool_layer2_fu_80_output_r_we0;
wire   [31:0] grp_pool_layer2_fu_80_output_r_d0;
wire   [11:0] grp_pool_layer2_fu_80_image_r_address0;
wire    grp_pool_layer2_fu_80_image_r_ce0;
wire    grp_flatten_fu_86_ap_start;
wire    grp_flatten_fu_86_ap_done;
wire    grp_flatten_fu_86_ap_idle;
wire    grp_flatten_fu_86_ap_ready;
wire   [9:0] grp_flatten_fu_86_output_r_address0;
wire    grp_flatten_fu_86_output_r_ce0;
wire    grp_flatten_fu_86_output_r_we0;
wire   [31:0] grp_flatten_fu_86_output_r_d0;
wire   [9:0] grp_flatten_fu_86_input_r_address0;
wire    grp_flatten_fu_86_input_r_ce0;
reg    ap_reg_grp_conv_layer2_fu_52_ap_start;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg    ap_reg_grp_conv_layer1_fu_62_ap_start;
wire    ap_CS_fsm_state2;
reg    ap_reg_grp_pool_layer1_fu_74_ap_start;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    ap_reg_grp_pool_layer2_fu_80_ap_start;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg    ap_reg_grp_flatten_fu_86_ap_start;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_reg_grp_conv_layer2_fu_52_ap_start = 1'b0;
#0 ap_reg_grp_conv_layer1_fu_62_ap_start = 1'b0;
#0 ap_reg_grp_pool_layer1_fu_74_ap_start = 1'b0;
#0 ap_reg_grp_pool_layer2_fu_80_ap_start = 1'b0;
#0 ap_reg_grp_flatten_fu_86_ap_start = 1'b0;
end

nnet_conv_layer1_ibs #(
    .DataWidth( 32 ),
    .AddressRange( 6728 ),
    .AddressWidth( 13 ))
conv_layer1_out_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_layer1_out_address0),
    .ce0(conv_layer1_out_ce0),
    .we0(conv_layer1_out_we0),
    .d0(grp_conv_layer1_fu_62_output_r_d0),
    .q0(conv_layer1_out_q0)
);

nnet_conv_layer2_jbC #(
    .DataWidth( 32 ),
    .AddressRange( 2704 ),
    .AddressWidth( 12 ))
conv_layer2_out_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_layer2_out_address0),
    .ce0(conv_layer2_out_ce0),
    .we0(conv_layer2_out_we0),
    .d0(grp_conv_layer2_fu_52_output_r_d0),
    .q0(conv_layer2_out_q0)
);

nnet_pool_layer1_kbM #(
    .DataWidth( 32 ),
    .AddressRange( 1568 ),
    .AddressWidth( 11 ))
pool_layer1_out_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pool_layer1_out_address0),
    .ce0(pool_layer1_out_ce0),
    .we0(pool_layer1_out_we0),
    .d0(grp_pool_layer1_fu_74_output_r_d0),
    .q0(pool_layer1_out_q0)
);

nnet_pool_layer2_lbW #(
    .DataWidth( 32 ),
    .AddressRange( 576 ),
    .AddressWidth( 10 ))
pool_layer2_out_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pool_layer2_out_address0),
    .ce0(pool_layer2_out_ce0),
    .we0(pool_layer2_out_we0),
    .d0(grp_pool_layer2_fu_80_output_r_d0),
    .q0(pool_layer2_out_q0)
);

nnet_flatten_out #(
    .DataWidth( 32 ),
    .AddressRange( 576 ),
    .AddressWidth( 10 ))
flatten_out_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_flatten_fu_86_output_r_address0),
    .ce0(grp_flatten_fu_86_output_r_ce0),
    .we0(grp_flatten_fu_86_output_r_we0),
    .d0(grp_flatten_fu_86_output_r_d0)
);

conv_layer2 grp_conv_layer2_fu_52(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_conv_layer2_fu_52_ap_start),
    .ap_done(grp_conv_layer2_fu_52_ap_done),
    .ap_idle(grp_conv_layer2_fu_52_ap_idle),
    .ap_ready(grp_conv_layer2_fu_52_ap_ready),
    .output_r_address0(grp_conv_layer2_fu_52_output_r_address0),
    .output_r_ce0(grp_conv_layer2_fu_52_output_r_ce0),
    .output_r_we0(grp_conv_layer2_fu_52_output_r_we0),
    .output_r_d0(grp_conv_layer2_fu_52_output_r_d0),
    .image_r_address0(grp_conv_layer2_fu_52_image_r_address0),
    .image_r_ce0(grp_conv_layer2_fu_52_image_r_ce0),
    .image_r_q0(pool_layer1_out_q0)
);

conv_layer1 grp_conv_layer1_fu_62(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_conv_layer1_fu_62_ap_start),
    .ap_done(grp_conv_layer1_fu_62_ap_done),
    .ap_idle(grp_conv_layer1_fu_62_ap_idle),
    .ap_ready(grp_conv_layer1_fu_62_ap_ready),
    .output_r_address0(grp_conv_layer1_fu_62_output_r_address0),
    .output_r_ce0(grp_conv_layer1_fu_62_output_r_ce0),
    .output_r_we0(grp_conv_layer1_fu_62_output_r_we0),
    .output_r_d0(grp_conv_layer1_fu_62_output_r_d0)
);

pool_layer1 grp_pool_layer1_fu_74(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pool_layer1_fu_74_ap_start),
    .ap_done(grp_pool_layer1_fu_74_ap_done),
    .ap_idle(grp_pool_layer1_fu_74_ap_idle),
    .ap_ready(grp_pool_layer1_fu_74_ap_ready),
    .output_r_address0(grp_pool_layer1_fu_74_output_r_address0),
    .output_r_ce0(grp_pool_layer1_fu_74_output_r_ce0),
    .output_r_we0(grp_pool_layer1_fu_74_output_r_we0),
    .output_r_d0(grp_pool_layer1_fu_74_output_r_d0),
    .image_r_address0(grp_pool_layer1_fu_74_image_r_address0),
    .image_r_ce0(grp_pool_layer1_fu_74_image_r_ce0),
    .image_r_q0(conv_layer1_out_q0)
);

pool_layer2 grp_pool_layer2_fu_80(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pool_layer2_fu_80_ap_start),
    .ap_done(grp_pool_layer2_fu_80_ap_done),
    .ap_idle(grp_pool_layer2_fu_80_ap_idle),
    .ap_ready(grp_pool_layer2_fu_80_ap_ready),
    .output_r_address0(grp_pool_layer2_fu_80_output_r_address0),
    .output_r_ce0(grp_pool_layer2_fu_80_output_r_ce0),
    .output_r_we0(grp_pool_layer2_fu_80_output_r_we0),
    .output_r_d0(grp_pool_layer2_fu_80_output_r_d0),
    .image_r_address0(grp_pool_layer2_fu_80_image_r_address0),
    .image_r_ce0(grp_pool_layer2_fu_80_image_r_ce0),
    .image_r_q0(conv_layer2_out_q0)
);

flatten grp_flatten_fu_86(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_flatten_fu_86_ap_start),
    .ap_done(grp_flatten_fu_86_ap_done),
    .ap_idle(grp_flatten_fu_86_ap_idle),
    .ap_ready(grp_flatten_fu_86_ap_ready),
    .output_r_address0(grp_flatten_fu_86_output_r_address0),
    .output_r_ce0(grp_flatten_fu_86_output_r_ce0),
    .output_r_we0(grp_flatten_fu_86_output_r_we0),
    .output_r_d0(grp_flatten_fu_86_output_r_d0),
    .input_r_address0(grp_flatten_fu_86_input_r_address0),
    .input_r_ce0(grp_flatten_fu_86_input_r_ce0),
    .input_r_q0(pool_layer2_out_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_conv_layer1_fu_62_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_reg_grp_conv_layer1_fu_62_ap_start <= 1'b1;
        end else if ((grp_conv_layer1_fu_62_ap_ready == 1'b1)) begin
            ap_reg_grp_conv_layer1_fu_62_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_conv_layer2_fu_52_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_reg_grp_conv_layer2_fu_52_ap_start <= 1'b1;
        end else if ((grp_conv_layer2_fu_52_ap_ready == 1'b1)) begin
            ap_reg_grp_conv_layer2_fu_52_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_flatten_fu_86_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_reg_grp_flatten_fu_86_ap_start <= 1'b1;
        end else if ((grp_flatten_fu_86_ap_ready == 1'b1)) begin
            ap_reg_grp_flatten_fu_86_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_pool_layer1_fu_74_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_reg_grp_pool_layer1_fu_74_ap_start <= 1'b1;
        end else if ((grp_pool_layer1_fu_74_ap_ready == 1'b1)) begin
            ap_reg_grp_pool_layer1_fu_74_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_pool_layer2_fu_80_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_reg_grp_pool_layer2_fu_80_ap_start <= 1'b1;
        end else if ((grp_pool_layer2_fu_80_ap_ready == 1'b1)) begin
            ap_reg_grp_pool_layer2_fu_80_ap_start <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (grp_flatten_fu_86_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (grp_flatten_fu_86_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_layer1_out_address0 = grp_pool_layer1_fu_74_image_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_layer1_out_address0 = grp_conv_layer1_fu_62_output_r_address0;
    end else begin
        conv_layer1_out_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_layer1_out_ce0 = grp_pool_layer1_fu_74_image_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_layer1_out_ce0 = grp_conv_layer1_fu_62_output_r_ce0;
    end else begin
        conv_layer1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_layer1_out_we0 = grp_conv_layer1_fu_62_output_r_we0;
    end else begin
        conv_layer1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_layer2_out_address0 = grp_pool_layer2_fu_80_image_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_layer2_out_address0 = grp_conv_layer2_fu_52_output_r_address0;
    end else begin
        conv_layer2_out_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_layer2_out_ce0 = grp_pool_layer2_fu_80_image_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_layer2_out_ce0 = grp_conv_layer2_fu_52_output_r_ce0;
    end else begin
        conv_layer2_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_layer2_out_we0 = grp_conv_layer2_fu_52_output_r_we0;
    end else begin
        conv_layer2_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pool_layer1_out_address0 = grp_pool_layer1_fu_74_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        pool_layer1_out_address0 = grp_conv_layer2_fu_52_image_r_address0;
    end else begin
        pool_layer1_out_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pool_layer1_out_ce0 = grp_pool_layer1_fu_74_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        pool_layer1_out_ce0 = grp_conv_layer2_fu_52_image_r_ce0;
    end else begin
        pool_layer1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pool_layer1_out_we0 = grp_pool_layer1_fu_74_output_r_we0;
    end else begin
        pool_layer1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        pool_layer2_out_address0 = grp_flatten_fu_86_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        pool_layer2_out_address0 = grp_pool_layer2_fu_80_output_r_address0;
    end else begin
        pool_layer2_out_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        pool_layer2_out_ce0 = grp_flatten_fu_86_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        pool_layer2_out_ce0 = grp_pool_layer2_fu_80_output_r_ce0;
    end else begin
        pool_layer2_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        pool_layer2_out_we0 = grp_pool_layer2_fu_80_output_r_we0;
    end else begin
        pool_layer2_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_conv_layer1_fu_62_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_pool_layer1_fu_74_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_conv_layer2_fu_52_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_pool_layer2_fu_80_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_flatten_fu_86_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = 32'd10;

assign grp_conv_layer1_fu_62_ap_start = ap_reg_grp_conv_layer1_fu_62_ap_start;

assign grp_conv_layer2_fu_52_ap_start = ap_reg_grp_conv_layer2_fu_52_ap_start;

assign grp_flatten_fu_86_ap_start = ap_reg_grp_flatten_fu_86_ap_start;

assign grp_pool_layer1_fu_74_ap_start = ap_reg_grp_pool_layer1_fu_74_ap_start;

assign grp_pool_layer2_fu_80_ap_start = ap_reg_grp_pool_layer2_fu_80_ap_start;

endmodule //nnet
