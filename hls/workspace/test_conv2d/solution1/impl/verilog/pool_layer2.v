// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pool_layer2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        image_r_address0,
        image_r_ce0,
        image_r_q0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [11:0] image_r_address0;
output   image_r_ce0;
input  [31:0] image_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_r_ce0;
reg output_r_we0;
reg[11:0] image_r_address0;
reg image_r_ce0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] channel_1_fu_192_p2;
reg   [4:0] channel_1_reg_530;
wire    ap_CS_fsm_state2;
wire   [12:0] tmp_cast2_fu_198_p1;
reg   [12:0] tmp_cast2_reg_535;
wire   [0:0] exitcond2_fu_186_p2;
wire   [10:0] tmp_cast_fu_202_p1;
reg   [10:0] tmp_cast_reg_540;
wire   [5:0] tmp_5_fu_216_p2;
reg   [5:0] tmp_5_reg_548;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_2_fu_206_p2;
wire  signed [6:0] tmp_23_cast_fu_262_p1;
reg  signed [6:0] tmp_23_cast_reg_553;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_7_fu_266_p2;
wire   [2:0] i_1_fu_304_p2;
wire    ap_CS_fsm_state5;
wire   [1:0] k_1_fu_320_p2;
reg   [1:0] k_1_reg_579;
wire    ap_CS_fsm_state6;
wire   [6:0] tmp_22_fu_336_p2;
reg   [6:0] tmp_22_reg_584;
wire   [0:0] exitcond1_fu_314_p2;
wire   [2:0] j_1_fu_379_p2;
wire   [1:0] l_1_fu_395_p2;
reg   [1:0] l_1_reg_597;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond_fu_389_p2;
reg   [31:0] image_load_reg_607;
wire    ap_CS_fsm_state8;
wire   [0:0] tmp_17_fu_181_p2;
reg   [0:0] tmp_17_reg_614;
wire    ap_CS_fsm_state9;
wire   [31:0] max_2_fu_520_p3;
wire    ap_CS_fsm_state10;
reg   [4:0] channel_reg_100;
reg   [2:0] i_reg_112;
reg   [2:0] j_reg_124;
reg   [31:0] max1_reg_136;
reg   [1:0] k_reg_147;
reg   [31:0] max_1_reg_158;
reg   [1:0] l_reg_170;
wire   [63:0] tmp_13_fu_299_p1;
wire   [63:0] tmp_33_cast_fu_374_p1;
wire   [63:0] tmp_38_cast_fu_433_p1;
wire   [2:0] tmp_5_fu_216_p0;
wire   [1:0] tmp_1_fu_222_p4;
wire   [4:0] tmp_3_fu_232_p3;
wire   [2:0] tmp_4_fu_244_p3;
wire   [5:0] p_shl_cast_fu_240_p1;
wire   [5:0] p_shl1_cast_fu_252_p1;
wire   [5:0] tmp_8_fu_256_p2;
wire   [5:0] tmp_8_cast_fu_272_p1;
wire   [5:0] tmp_9_fu_276_p2;
wire   [4:0] tmp_fu_281_p4;
wire   [9:0] tmp_11_fu_291_p3;
wire   [2:0] k_cast_fu_310_p1;
wire   [2:0] tmp_6_fu_326_p2;
wire   [2:0] tmp_22_fu_336_p0;
wire   [1:0] tmp_19_fu_342_p4;
wire   [6:0] tmp_1_cast_fu_352_p1;
wire   [6:0] tmp_20_fu_356_p2;
wire   [10:0] tmp_32_cast_fu_361_p3;
wire   [10:0] tmp_21_fu_369_p2;
wire   [2:0] l_cast_fu_385_p1;
wire   [2:0] tmp_s_fu_401_p2;
wire   [6:0] tmp_4_cast_fu_407_p1;
wire   [6:0] tmp_23_fu_411_p2;
wire   [10:0] tmp_24_fu_416_p3;
wire   [12:0] tmp_37_cast_fu_424_p1;
wire   [12:0] tmp_25_fu_428_p2;
wire   [31:0] image_load_to_int_fu_438_p1;
wire   [31:0] max_1_to_int_fu_455_p1;
wire   [7:0] tmp_10_fu_441_p4;
wire   [22:0] tmp_26_fu_451_p1;
wire   [0:0] notrhs_fu_479_p2;
wire   [0:0] notlhs_fu_473_p2;
wire   [7:0] tmp_12_fu_459_p4;
wire   [22:0] tmp_27_fu_469_p1;
wire   [0:0] notrhs6_fu_497_p2;
wire   [0:0] notlhs5_fu_491_p2;
wire   [0:0] tmp_14_fu_485_p2;
wire   [0:0] tmp_15_fu_503_p2;
wire   [0:0] tmp_16_fu_509_p2;
wire   [0:0] tmp_18_fu_515_p2;
reg   [9:0] ap_NS_fsm;
wire   [6:0] tmp_22_fu_336_p00;
wire   [5:0] tmp_5_fu_216_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

nnet_fcmp_32ns_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
nnet_fcmp_32ns_32fYi_U21(
    .din0(image_load_reg_607),
    .din1(max_1_reg_158),
    .opcode(5'd2),
    .dout(tmp_17_fu_181_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        channel_reg_100 <= channel_1_reg_530;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        channel_reg_100 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_112 <= 3'd0;
    end else if (((tmp_7_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_reg_112 <= i_1_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_124 <= 3'd0;
    end else if (((exitcond1_fu_314_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        j_reg_124 <= j_1_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_389_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        k_reg_147 <= k_1_reg_579;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        k_reg_147 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_314_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        l_reg_170 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        l_reg_170 <= l_1_reg_597;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_389_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        max1_reg_136 <= max_1_reg_158;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        max1_reg_136 <= image_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_314_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        max_1_reg_158 <= max1_reg_136;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        max_1_reg_158 <= max_2_fu_520_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        channel_1_reg_530 <= channel_1_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        image_load_reg_607 <= image_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_1_reg_579 <= k_1_fu_320_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        l_1_reg_597 <= l_1_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_17_reg_614 <= tmp_17_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_314_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_22_reg_584 <= tmp_22_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_23_cast_reg_553[6 : 1] <= tmp_23_cast_fu_262_p1[6 : 1];
        tmp_5_reg_548 <= tmp_5_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_cast2_reg_535[4 : 0] <= tmp_cast2_fu_198_p1[4 : 0];
        tmp_cast_reg_540[4 : 0] <= tmp_cast_fu_202_p1[4 : 0];
    end
end

always @ (*) begin
    if ((((exitcond2_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        image_r_address0 = tmp_38_cast_fu_433_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        image_r_address0 = tmp_13_fu_299_p1;
    end else begin
        image_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7))) begin
        image_r_ce0 = 1'b1;
    end else begin
        image_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_314_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_2_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_7_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond1_fu_314_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond_fu_389_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign channel_1_fu_192_p2 = (channel_reg_100 + 5'd1);

assign exitcond1_fu_314_p2 = ((k_reg_147 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond2_fu_186_p2 = ((channel_reg_100 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond_fu_389_p2 = ((l_reg_170 == 2'd2) ? 1'b1 : 1'b0);

assign i_1_fu_304_p2 = (i_reg_112 + 3'd2);

assign image_load_to_int_fu_438_p1 = image_load_reg_607;

assign j_1_fu_379_p2 = (j_reg_124 + 3'd2);

assign k_1_fu_320_p2 = (k_reg_147 + 2'd1);

assign k_cast_fu_310_p1 = k_reg_147;

assign l_1_fu_395_p2 = (l_reg_170 + 2'd1);

assign l_cast_fu_385_p1 = l_reg_170;

assign max_1_to_int_fu_455_p1 = max_1_reg_158;

assign max_2_fu_520_p3 = ((tmp_18_fu_515_p2[0:0] === 1'b1) ? image_load_reg_607 : max_1_reg_158);

assign notlhs5_fu_491_p2 = ((tmp_12_fu_459_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_473_p2 = ((tmp_10_fu_441_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs6_fu_497_p2 = ((tmp_27_fu_469_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_479_p2 = ((tmp_26_fu_451_p1 == 23'd0) ? 1'b1 : 1'b0);

assign output_r_address0 = tmp_33_cast_fu_374_p1;

assign output_r_d0 = max1_reg_136;

assign p_shl1_cast_fu_252_p1 = tmp_4_fu_244_p3;

assign p_shl_cast_fu_240_p1 = tmp_3_fu_232_p3;

assign tmp_10_fu_441_p4 = {{image_load_to_int_fu_438_p1[30:23]}};

assign tmp_11_fu_291_p3 = {{tmp_fu_281_p4}, {channel_reg_100}};

assign tmp_12_fu_459_p4 = {{max_1_to_int_fu_455_p1[30:23]}};

assign tmp_13_fu_299_p1 = tmp_11_fu_291_p3;

assign tmp_14_fu_485_p2 = (notrhs_fu_479_p2 | notlhs_fu_473_p2);

assign tmp_15_fu_503_p2 = (notrhs6_fu_497_p2 | notlhs5_fu_491_p2);

assign tmp_16_fu_509_p2 = (tmp_15_fu_503_p2 & tmp_14_fu_485_p2);

assign tmp_18_fu_515_p2 = (tmp_17_reg_614 & tmp_16_fu_509_p2);

assign tmp_19_fu_342_p4 = {{j_reg_124[2:1]}};

assign tmp_1_cast_fu_352_p1 = tmp_19_fu_342_p4;

assign tmp_1_fu_222_p4 = {{i_reg_112[2:1]}};

assign tmp_20_fu_356_p2 = ($signed(tmp_23_cast_reg_553) + $signed(tmp_1_cast_fu_352_p1));

assign tmp_21_fu_369_p2 = (tmp_32_cast_fu_361_p3 + tmp_cast_reg_540);

assign tmp_22_fu_336_p0 = tmp_22_fu_336_p00;

assign tmp_22_fu_336_p00 = tmp_6_fu_326_p2;

assign tmp_22_fu_336_p2 = (tmp_22_fu_336_p0 * $signed('hD));

assign tmp_23_cast_fu_262_p1 = $signed(tmp_8_fu_256_p2);

assign tmp_23_fu_411_p2 = (tmp_4_cast_fu_407_p1 + tmp_22_reg_584);

assign tmp_24_fu_416_p3 = {{tmp_23_fu_411_p2}, {4'd0}};

assign tmp_25_fu_428_p2 = (tmp_cast2_reg_535 + tmp_37_cast_fu_424_p1);

assign tmp_26_fu_451_p1 = image_load_to_int_fu_438_p1[22:0];

assign tmp_27_fu_469_p1 = max_1_to_int_fu_455_p1[22:0];

assign tmp_2_fu_206_p2 = ((i_reg_112 < 3'd5) ? 1'b1 : 1'b0);

assign tmp_32_cast_fu_361_p3 = {{tmp_20_fu_356_p2}, {4'd0}};

assign tmp_33_cast_fu_374_p1 = tmp_21_fu_369_p2;

assign tmp_37_cast_fu_424_p1 = tmp_24_fu_416_p3;

assign tmp_38_cast_fu_433_p1 = tmp_25_fu_428_p2;

assign tmp_3_fu_232_p3 = {{tmp_1_fu_222_p4}, {3'd0}};

assign tmp_4_cast_fu_407_p1 = tmp_s_fu_401_p2;

assign tmp_4_fu_244_p3 = {{tmp_1_fu_222_p4}, {1'd0}};

assign tmp_5_fu_216_p0 = tmp_5_fu_216_p00;

assign tmp_5_fu_216_p00 = i_reg_112;

assign tmp_5_fu_216_p2 = (tmp_5_fu_216_p0 * $signed('hD));

assign tmp_6_fu_326_p2 = (k_cast_fu_310_p1 + i_reg_112);

assign tmp_7_fu_266_p2 = ((j_reg_124 < 3'd5) ? 1'b1 : 1'b0);

assign tmp_8_cast_fu_272_p1 = j_reg_124;

assign tmp_8_fu_256_p2 = (p_shl_cast_fu_240_p1 - p_shl1_cast_fu_252_p1);

assign tmp_9_fu_276_p2 = (tmp_5_reg_548 + tmp_8_cast_fu_272_p1);

assign tmp_cast2_fu_198_p1 = channel_reg_100;

assign tmp_cast_fu_202_p1 = channel_reg_100;

assign tmp_fu_281_p4 = {{tmp_9_fu_276_p2[5:1]}};

assign tmp_s_fu_401_p2 = (j_reg_124 + l_cast_fu_385_p1);

always @ (posedge ap_clk) begin
    tmp_cast2_reg_535[12:5] <= 8'b00000000;
    tmp_cast_reg_540[10:5] <= 6'b000000;
    tmp_23_cast_reg_553[0] <= 1'b0;
end

endmodule //pool_layer2
