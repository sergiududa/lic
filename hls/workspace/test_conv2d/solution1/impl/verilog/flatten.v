// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module flatten (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        input_r_address0,
        input_r_ce0,
        input_r_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_r_ce0;
reg output_r_we0;
reg input_r_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_3_fu_106_p2;
reg   [2:0] i_3_reg_264;
wire    ap_CS_fsm_state2;
wire   [6:0] tmp_44_fu_136_p2;
reg   [6:0] tmp_44_reg_269;
wire   [0:0] exitcond2_fu_100_p2;
wire   [10:0] tmp_s_fu_166_p2;
reg   [10:0] tmp_s_reg_274;
wire   [2:0] j_3_fu_178_p2;
reg   [2:0] j_3_reg_282;
wire    ap_CS_fsm_state3;
wire   [10:0] tmp_64_cast_fu_193_p3;
reg   [10:0] tmp_64_cast_reg_287;
wire   [0:0] exitcond1_fu_172_p2;
wire   [6:0] tmp_15_fu_201_p3;
reg   [6:0] tmp_15_reg_292;
wire   [4:0] k_3_fu_219_p2;
reg   [4:0] k_3_reg_300;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_213_p2;
wire   [10:0] tmp_17_fu_248_p2;
reg   [10:0] tmp_17_reg_310;
reg   [2:0] i_reg_67;
reg   [2:0] j_reg_78;
reg   [4:0] k_reg_89;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_65_cast_fu_234_p1;
wire   [63:0] tmp_18_fu_256_p1;
wire   [5:0] tmp_fu_112_p3;
wire   [3:0] tmp_43_fu_124_p3;
wire   [6:0] p_shl1_cast_fu_120_p1;
wire   [6:0] p_shl2_cast_fu_132_p1;
wire   [9:0] p_shl_fu_142_p3;
wire   [7:0] p_shl5_fu_154_p3;
wire   [10:0] p_shl_cast_fu_150_p1;
wire   [10:0] p_shl5_cast_fu_162_p1;
wire   [6:0] tmp_14_cast_fu_184_p1;
wire   [6:0] tmp_45_fu_188_p2;
wire   [10:0] tmp_16_cast_fu_225_p1;
wire   [10:0] tmp_46_fu_229_p2;
wire   [6:0] k_cast3_fu_209_p1;
wire   [6:0] tmp1_fu_239_p2;
wire   [10:0] tmp1_cast_fu_244_p1;
wire  signed [31:0] tmp_28_cast_fu_253_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_67 <= i_3_reg_264;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_67 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_reg_78 <= j_3_reg_282;
    end else if (((exitcond2_fu_100_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_78 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_172_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_reg_89 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        k_reg_89 <= k_3_reg_300;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_3_reg_264 <= i_3_fu_106_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_3_reg_282 <= j_3_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_3_reg_300 <= k_3_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_172_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_15_reg_292[6 : 4] <= tmp_15_fu_201_p3[6 : 4];
        tmp_64_cast_reg_287[10 : 4] <= tmp_64_cast_fu_193_p3[10 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_17_reg_310 <= tmp_17_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_100_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_44_reg_269[6 : 1] <= tmp_44_fu_136_p2[6 : 1];
        tmp_s_reg_274[10 : 5] <= tmp_s_fu_166_p2[10 : 5];
    end
end

always @ (*) begin
    if ((((exitcond2_fu_100_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_100_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_100_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond1_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign exitcond1_fu_172_p2 = ((j_reg_78 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond2_fu_100_p2 = ((i_reg_67 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond_fu_213_p2 = ((k_reg_89 == 5'd16) ? 1'b1 : 1'b0);

assign i_3_fu_106_p2 = (i_reg_67 + 3'd1);

assign input_r_address0 = tmp_65_cast_fu_234_p1;

assign j_3_fu_178_p2 = (j_reg_78 + 3'd1);

assign k_3_fu_219_p2 = (k_reg_89 + 5'd1);

assign k_cast3_fu_209_p1 = k_reg_89;

assign output_r_address0 = tmp_18_fu_256_p1;

assign output_r_d0 = input_r_q0;

assign p_shl1_cast_fu_120_p1 = tmp_fu_112_p3;

assign p_shl2_cast_fu_132_p1 = tmp_43_fu_124_p3;

assign p_shl5_cast_fu_162_p1 = p_shl5_fu_154_p3;

assign p_shl5_fu_154_p3 = {{i_reg_67}, {5'd0}};

assign p_shl_cast_fu_150_p1 = p_shl_fu_142_p3;

assign p_shl_fu_142_p3 = {{i_reg_67}, {7'd0}};

assign tmp1_cast_fu_244_p1 = tmp1_fu_239_p2;

assign tmp1_fu_239_p2 = (k_cast3_fu_209_p1 + tmp_15_reg_292);

assign tmp_14_cast_fu_184_p1 = j_reg_78;

assign tmp_15_fu_201_p3 = {{j_reg_78}, {4'd0}};

assign tmp_16_cast_fu_225_p1 = k_reg_89;

assign tmp_17_fu_248_p2 = (tmp_s_reg_274 + tmp1_cast_fu_244_p1);

assign tmp_18_fu_256_p1 = $unsigned(tmp_28_cast_fu_253_p1);

assign tmp_28_cast_fu_253_p1 = $signed(tmp_17_reg_310);

assign tmp_43_fu_124_p3 = {{i_reg_67}, {1'd0}};

assign tmp_44_fu_136_p2 = (p_shl1_cast_fu_120_p1 - p_shl2_cast_fu_132_p1);

assign tmp_45_fu_188_p2 = (tmp_14_cast_fu_184_p1 + tmp_44_reg_269);

assign tmp_46_fu_229_p2 = (tmp_64_cast_reg_287 + tmp_16_cast_fu_225_p1);

assign tmp_64_cast_fu_193_p3 = {{tmp_45_fu_188_p2}, {4'd0}};

assign tmp_65_cast_fu_234_p1 = tmp_46_fu_229_p2;

assign tmp_fu_112_p3 = {{i_reg_67}, {3'd0}};

assign tmp_s_fu_166_p2 = (p_shl_cast_fu_150_p1 - p_shl5_cast_fu_162_p1);

always @ (posedge ap_clk) begin
    tmp_44_reg_269[0] <= 1'b0;
    tmp_s_reg_274[4:0] <= 5'b00000;
    tmp_64_cast_reg_287[3:0] <= 4'b0000;
    tmp_15_reg_292[3:0] <= 4'b0000;
end

endmodule //flatten
