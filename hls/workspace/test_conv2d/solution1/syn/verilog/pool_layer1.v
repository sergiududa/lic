// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pool_layer1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        image_r_address0,
        image_r_ce0,
        image_r_q0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [12:0] image_r_address0;
output   image_r_ce0;
input  [31:0] image_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_r_ce0;
reg output_r_we0;
reg[12:0] image_r_address0;
reg image_r_ce0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] channel_2_fu_192_p2;
reg   [3:0] channel_2_reg_525;
wire    ap_CS_fsm_state2;
wire   [13:0] tmp_cast2_fu_198_p1;
reg   [13:0] tmp_cast2_reg_530;
wire   [0:0] exitcond2_fu_186_p2;
wire   [11:0] tmp_cast_fu_202_p1;
reg   [11:0] tmp_cast_reg_535;
wire   [9:0] tmp_28_fu_216_p2;
reg   [9:0] tmp_28_reg_543;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_s_fu_206_p2;
wire   [8:0] tmp_32_fu_256_p2;
reg   [8:0] tmp_32_reg_548;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_7_fu_262_p2;
wire   [4:0] i_2_fu_300_p2;
wire    ap_CS_fsm_state5;
wire   [1:0] k_2_fu_316_p2;
reg   [1:0] k_2_reg_574;
wire    ap_CS_fsm_state6;
wire   [9:0] tmp_39_fu_332_p2;
reg   [9:0] tmp_39_reg_579;
wire   [0:0] exitcond1_fu_310_p2;
wire   [4:0] j_2_fu_375_p2;
wire   [1:0] l_2_fu_391_p2;
reg   [1:0] l_2_reg_592;
wire    ap_CS_fsm_state7;
wire   [13:0] tmp_42_fu_424_p2;
reg   [13:0] tmp_42_reg_597;
wire   [0:0] exitcond_fu_385_p2;
wire    ap_CS_fsm_state8;
reg   [31:0] image_load_reg_607;
wire    ap_CS_fsm_state9;
wire   [0:0] tmp_26_fu_181_p2;
reg   [0:0] tmp_26_reg_614;
wire    ap_CS_fsm_state10;
wire   [31:0] max_3_fu_515_p3;
wire    ap_CS_fsm_state11;
reg   [3:0] channel_reg_100;
reg   [4:0] i_reg_112;
reg   [4:0] j_reg_124;
reg   [31:0] max3_reg_136;
reg   [1:0] k_reg_147;
reg   [31:0] max_1_reg_158;
reg   [1:0] l_reg_170;
wire   [63:0] tmp_35_fu_295_p1;
wire   [63:0] tmp_54_cast_fu_370_p1;
wire   [63:0] tmp_59_cast_fu_429_p1;
wire   [4:0] tmp_28_fu_216_p0;
wire   [3:0] tmp_29_fu_222_p4;
wire   [7:0] tmp_30_fu_232_p3;
wire   [4:0] tmp_31_fu_244_p3;
wire   [8:0] p_shl_cast_fu_240_p1;
wire   [8:0] p_shl1_cast_fu_252_p1;
wire   [9:0] tmp_8_cast_fu_268_p1;
wire   [9:0] tmp_33_fu_272_p2;
wire   [8:0] tmp_fu_277_p4;
wire   [12:0] tmp_34_fu_287_p3;
wire   [4:0] k_cast2_fu_306_p1;
wire   [4:0] tmp_10_fu_322_p2;
wire   [4:0] tmp_39_fu_332_p0;
wire   [3:0] tmp_36_fu_338_p4;
wire   [8:0] tmp_9_cast_fu_348_p1;
wire   [8:0] tmp_37_fu_352_p2;
wire   [11:0] tmp_53_cast_fu_357_p3;
wire   [11:0] tmp_38_fu_365_p2;
wire   [4:0] l_cast1_fu_381_p1;
wire   [4:0] tmp_12_fu_397_p2;
wire   [9:0] tmp_13_cast_fu_403_p1;
wire   [9:0] tmp_40_fu_407_p2;
wire   [12:0] tmp_41_fu_412_p3;
wire   [13:0] tmp_58_cast_fu_420_p1;
wire   [31:0] image_load_to_int_fu_433_p1;
wire   [31:0] max_1_to_int_fu_450_p1;
wire   [7:0] tmp_19_fu_436_p4;
wire   [22:0] tmp_43_fu_446_p1;
wire   [0:0] notrhs_fu_474_p2;
wire   [0:0] notlhs_fu_468_p2;
wire   [7:0] tmp_21_fu_454_p4;
wire   [22:0] tmp_44_fu_464_p1;
wire   [0:0] notrhs7_fu_492_p2;
wire   [0:0] notlhs6_fu_486_p2;
wire   [0:0] tmp_23_fu_480_p2;
wire   [0:0] tmp_24_fu_498_p2;
wire   [0:0] tmp_25_fu_504_p2;
wire   [0:0] tmp_27_fu_510_p2;
reg   [10:0] ap_NS_fsm;
wire   [9:0] tmp_28_fu_216_p00;
wire   [9:0] tmp_39_fu_332_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

nnet_fcmp_32ns_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
nnet_fcmp_32ns_32fYi_U11(
    .din0(image_load_reg_607),
    .din1(max_1_reg_158),
    .opcode(5'd2),
    .dout(tmp_26_fu_181_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        channel_reg_100 <= channel_2_reg_525;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        channel_reg_100 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_112 <= 5'd0;
    end else if (((tmp_7_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_reg_112 <= i_2_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_124 <= 5'd0;
    end else if (((exitcond1_fu_310_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        j_reg_124 <= j_2_fu_375_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_385_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        k_reg_147 <= k_2_reg_574;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        k_reg_147 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_310_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        l_reg_170 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        l_reg_170 <= l_2_reg_592;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_385_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        max3_reg_136 <= max_1_reg_158;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        max3_reg_136 <= image_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_310_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        max_1_reg_158 <= max3_reg_136;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        max_1_reg_158 <= max_3_fu_515_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        channel_2_reg_525 <= channel_2_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        image_load_reg_607 <= image_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_2_reg_574 <= k_2_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        l_2_reg_592 <= l_2_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_26_reg_614 <= tmp_26_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_28_reg_543 <= tmp_28_fu_216_p2;
        tmp_32_reg_548[8 : 1] <= tmp_32_fu_256_p2[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_310_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_39_reg_579 <= tmp_39_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_385_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_42_reg_597 <= tmp_42_fu_424_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_cast2_reg_530[3 : 0] <= tmp_cast2_fu_198_p1[3 : 0];
        tmp_cast_reg_535[3 : 0] <= tmp_cast_fu_202_p1[3 : 0];
    end
end

always @ (*) begin
    if ((((exitcond2_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        image_r_address0 = tmp_59_cast_fu_429_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        image_r_address0 = tmp_35_fu_295_p1;
    end else begin
        image_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8))) begin
        image_r_ce0 = 1'b1;
    end else begin
        image_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_310_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_s_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_7_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond1_fu_310_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond_fu_385_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign channel_2_fu_192_p2 = (channel_reg_100 + 4'd1);

assign exitcond1_fu_310_p2 = ((k_reg_147 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond2_fu_186_p2 = ((channel_reg_100 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond_fu_385_p2 = ((l_reg_170 == 2'd2) ? 1'b1 : 1'b0);

assign i_2_fu_300_p2 = (i_reg_112 + 5'd2);

assign image_load_to_int_fu_433_p1 = image_load_reg_607;

assign j_2_fu_375_p2 = (j_reg_124 + 5'd2);

assign k_2_fu_316_p2 = (k_reg_147 + 2'd1);

assign k_cast2_fu_306_p1 = k_reg_147;

assign l_2_fu_391_p2 = (l_reg_170 + 2'd1);

assign l_cast1_fu_381_p1 = l_reg_170;

assign max_1_to_int_fu_450_p1 = max_1_reg_158;

assign max_3_fu_515_p3 = ((tmp_27_fu_510_p2[0:0] === 1'b1) ? image_load_reg_607 : max_1_reg_158);

assign notlhs6_fu_486_p2 = ((tmp_21_fu_454_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_468_p2 = ((tmp_19_fu_436_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs7_fu_492_p2 = ((tmp_44_fu_464_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_474_p2 = ((tmp_43_fu_446_p1 == 23'd0) ? 1'b1 : 1'b0);

assign output_r_address0 = tmp_54_cast_fu_370_p1;

assign output_r_d0 = max3_reg_136;

assign p_shl1_cast_fu_252_p1 = tmp_31_fu_244_p3;

assign p_shl_cast_fu_240_p1 = tmp_30_fu_232_p3;

assign tmp_10_fu_322_p2 = (k_cast2_fu_306_p1 + i_reg_112);

assign tmp_12_fu_397_p2 = (j_reg_124 + l_cast1_fu_381_p1);

assign tmp_13_cast_fu_403_p1 = tmp_12_fu_397_p2;

assign tmp_19_fu_436_p4 = {{image_load_to_int_fu_433_p1[30:23]}};

assign tmp_21_fu_454_p4 = {{max_1_to_int_fu_450_p1[30:23]}};

assign tmp_23_fu_480_p2 = (notrhs_fu_474_p2 | notlhs_fu_468_p2);

assign tmp_24_fu_498_p2 = (notrhs7_fu_492_p2 | notlhs6_fu_486_p2);

assign tmp_25_fu_504_p2 = (tmp_24_fu_498_p2 & tmp_23_fu_480_p2);

assign tmp_27_fu_510_p2 = (tmp_26_reg_614 & tmp_25_fu_504_p2);

assign tmp_28_fu_216_p0 = tmp_28_fu_216_p00;

assign tmp_28_fu_216_p00 = i_reg_112;

assign tmp_28_fu_216_p2 = (tmp_28_fu_216_p0 * $signed('h1D));

assign tmp_29_fu_222_p4 = {{i_reg_112[4:1]}};

assign tmp_30_fu_232_p3 = {{tmp_29_fu_222_p4}, {4'd0}};

assign tmp_31_fu_244_p3 = {{tmp_29_fu_222_p4}, {1'd0}};

assign tmp_32_fu_256_p2 = (p_shl_cast_fu_240_p1 - p_shl1_cast_fu_252_p1);

assign tmp_33_fu_272_p2 = (tmp_28_reg_543 + tmp_8_cast_fu_268_p1);

assign tmp_34_fu_287_p3 = {{tmp_fu_277_p4}, {channel_reg_100}};

assign tmp_35_fu_295_p1 = tmp_34_fu_287_p3;

assign tmp_36_fu_338_p4 = {{j_reg_124[4:1]}};

assign tmp_37_fu_352_p2 = (tmp_32_reg_548 + tmp_9_cast_fu_348_p1);

assign tmp_38_fu_365_p2 = (tmp_53_cast_fu_357_p3 + tmp_cast_reg_535);

assign tmp_39_fu_332_p0 = tmp_39_fu_332_p00;

assign tmp_39_fu_332_p00 = tmp_10_fu_322_p2;

assign tmp_39_fu_332_p2 = (tmp_39_fu_332_p0 * $signed('h1D));

assign tmp_40_fu_407_p2 = (tmp_13_cast_fu_403_p1 + tmp_39_reg_579);

assign tmp_41_fu_412_p3 = {{tmp_40_fu_407_p2}, {3'd0}};

assign tmp_42_fu_424_p2 = (tmp_cast2_reg_530 + tmp_58_cast_fu_420_p1);

assign tmp_43_fu_446_p1 = image_load_to_int_fu_433_p1[22:0];

assign tmp_44_fu_464_p1 = max_1_to_int_fu_450_p1[22:0];

assign tmp_53_cast_fu_357_p3 = {{tmp_37_fu_352_p2}, {3'd0}};

assign tmp_54_cast_fu_370_p1 = tmp_38_fu_365_p2;

assign tmp_58_cast_fu_420_p1 = tmp_41_fu_412_p3;

assign tmp_59_cast_fu_429_p1 = tmp_42_reg_597;

assign tmp_7_fu_262_p2 = ((j_reg_124 < 5'd28) ? 1'b1 : 1'b0);

assign tmp_8_cast_fu_268_p1 = j_reg_124;

assign tmp_9_cast_fu_348_p1 = tmp_36_fu_338_p4;

assign tmp_cast2_fu_198_p1 = channel_reg_100;

assign tmp_cast_fu_202_p1 = channel_reg_100;

assign tmp_fu_277_p4 = {{tmp_33_fu_272_p2[9:1]}};

assign tmp_s_fu_206_p2 = ((i_reg_112 < 5'd28) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_cast2_reg_530[13:4] <= 10'b0000000000;
    tmp_cast_reg_535[11:4] <= 8'b00000000;
    tmp_32_reg_548[0] <= 1'b0;
end

endmodule //pool_layer1
