-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pool is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    image_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    image_r_ce0 : OUT STD_LOGIC;
    image_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of pool is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pool,hls_ip_2017_4_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.185250,HLS_SYN_LAT=42577,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=250,HLS_SYN_LUT=776}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv10_1D : STD_LOGIC_VECTOR (9 downto 0) := "0000011101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal channel_1_fu_198_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal channel_1_reg_531 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_cast2_fu_204_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_cast2_reg_536 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond2_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast_fu_208_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_cast_reg_541 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_fu_222_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_reg_549 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_1_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_262_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_reg_554 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_6_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_306_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal k_1_fu_322_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_1_reg_580 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_22_fu_338_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_22_reg_585 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond1_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_381_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal l_1_fu_397_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal l_1_reg_598 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_25_fu_430_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_25_reg_603 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal image_load_reg_613 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_17_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_620 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal max_2_fu_521_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal channel_reg_106 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_118 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_130 : STD_LOGIC_VECTOR (4 downto 0);
    signal max1_reg_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_153 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_1_reg_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_reg_176 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_13_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_cast_fu_376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_cast_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_222_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_228_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_238_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_250_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_246_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_258_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_cast_fu_274_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_278_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_283_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_fu_293_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal k_cast2_fu_312_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_328_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_22_fu_338_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_19_fu_344_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_cast_12_fu_354_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_20_fu_358_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_32_cast_fu_363_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_21_fu_371_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal l_cast1_fu_387_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_403_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_cast_fu_409_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_23_fu_413_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_24_fu_418_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_37_cast_fu_426_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal image_load_to_int_fu_439_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_1_to_int_fu_456_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_442_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_452_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_460_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_fu_470_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs7_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs6_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_22_fu_338_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_222_p00 : STD_LOGIC_VECTOR (9 downto 0);

    component pool_fcmp_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    pool_fcmp_32ns_32bkb_U1 : component pool_fcmp_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => image_load_reg_613,
        din1 => max_1_reg_164,
        opcode => ap_const_lv5_2,
        dout => tmp_17_fu_187_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    channel_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_212_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                channel_reg_106 <= channel_1_reg_531;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                channel_reg_106 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_118 <= ap_const_lv5_0;
            elsif (((tmp_6_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_reg_118 <= i_1_fu_306_p2;
            end if; 
        end if;
    end process;

    j_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_130 <= ap_const_lv5_0;
            elsif (((exitcond1_fu_316_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j_reg_130 <= j_1_fu_381_p2;
            end if; 
        end if;
    end process;

    k_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_391_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                k_reg_153 <= k_1_reg_580;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k_reg_153 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    l_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_316_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                l_reg_176 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                l_reg_176 <= l_1_reg_598;
            end if; 
        end if;
    end process;

    max1_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_391_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                max1_reg_142 <= max_1_reg_164;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                max1_reg_142 <= image_r_q0;
            end if; 
        end if;
    end process;

    max_1_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_316_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                max_1_reg_164 <= max1_reg_142;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                max_1_reg_164 <= max_2_fu_521_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                channel_1_reg_531 <= channel_1_fu_198_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                image_load_reg_613 <= image_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                k_1_reg_580 <= k_1_fu_322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                l_1_reg_598 <= l_1_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_17_reg_620 <= tmp_17_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_316_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_22_reg_585 <= tmp_22_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                tmp_25_reg_603 <= tmp_25_fu_430_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_4_reg_549 <= tmp_4_fu_222_p2;
                    tmp_8_reg_554(8 downto 1) <= tmp_8_fu_262_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_cast2_reg_536(3 downto 0) <= tmp_cast2_fu_204_p1(3 downto 0);
                    tmp_cast_reg_541(3 downto 0) <= tmp_cast_fu_208_p1(3 downto 0);
            end if;
        end if;
    end process;
    tmp_cast2_reg_536(13 downto 4) <= "0000000000";
    tmp_cast_reg_541(11 downto 4) <= "00000000";
    tmp_8_reg_554(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_192_p2, ap_CS_fsm_state3, tmp_1_fu_212_p2, ap_CS_fsm_state4, tmp_6_fu_268_p2, ap_CS_fsm_state6, exitcond1_fu_316_p2, ap_CS_fsm_state7, exitcond_fu_391_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond2_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_1_fu_212_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((tmp_6_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((exitcond1_fu_316_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((exitcond_fu_391_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_192_p2)
    begin
        if (((exitcond2_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_192_p2)
    begin
        if (((exitcond2_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    channel_1_fu_198_p2 <= std_logic_vector(unsigned(channel_reg_106) + unsigned(ap_const_lv4_1));
    exitcond1_fu_316_p2 <= "1" when (k_reg_153 = ap_const_lv2_2) else "0";
    exitcond2_fu_192_p2 <= "1" when (channel_reg_106 = ap_const_lv4_8) else "0";
    exitcond_fu_391_p2 <= "1" when (l_reg_176 = ap_const_lv2_2) else "0";
    i_1_fu_306_p2 <= std_logic_vector(unsigned(i_reg_118) + unsigned(ap_const_lv5_2));
    image_load_to_int_fu_439_p1 <= image_load_reg_613;

    image_r_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, tmp_13_fu_301_p1, tmp_38_cast_fu_435_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            image_r_address0 <= tmp_38_cast_fu_435_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            image_r_address0 <= tmp_13_fu_301_p1(13 - 1 downto 0);
        else 
            image_r_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    image_r_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            image_r_ce0 <= ap_const_logic_1;
        else 
            image_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_381_p2 <= std_logic_vector(unsigned(j_reg_130) + unsigned(ap_const_lv5_2));
    k_1_fu_322_p2 <= std_logic_vector(unsigned(k_reg_153) + unsigned(ap_const_lv2_1));
    k_cast2_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_153),5));
    l_1_fu_397_p2 <= std_logic_vector(unsigned(l_reg_176) + unsigned(ap_const_lv2_1));
    l_cast1_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_reg_176),5));
    max_1_to_int_fu_456_p1 <= max_1_reg_164;
    max_2_fu_521_p3 <= 
        image_load_reg_613 when (tmp_18_fu_516_p2(0) = '1') else 
        max_1_reg_164;
    notlhs6_fu_492_p2 <= "0" when (tmp_12_fu_460_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_474_p2 <= "0" when (tmp_10_fu_442_p4 = ap_const_lv8_FF) else "1";
    notrhs7_fu_498_p2 <= "1" when (tmp_27_fu_470_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_480_p2 <= "1" when (tmp_26_fu_452_p1 = ap_const_lv23_0) else "0";
    output_r_address0 <= tmp_33_cast_fu_376_p1(11 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= max1_reg_142;

    output_r_we0_assign_proc : process(ap_CS_fsm_state6, exitcond1_fu_316_p2)
    begin
        if (((exitcond1_fu_316_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_250_p3),9));
    p_shl_cast_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_238_p3),9));
    tmp_10_fu_442_p4 <= image_load_to_int_fu_439_p1(30 downto 23);
    tmp_11_fu_293_p3 <= (tmp_fu_283_p4 & channel_reg_106);
    tmp_12_fu_460_p4 <= max_1_to_int_fu_456_p1(30 downto 23);
    tmp_13_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_293_p3),64));
    tmp_14_fu_486_p2 <= (notrhs_fu_480_p2 or notlhs_fu_474_p2);
    tmp_15_fu_504_p2 <= (notrhs7_fu_498_p2 or notlhs6_fu_492_p2);
    tmp_16_fu_510_p2 <= (tmp_15_fu_504_p2 and tmp_14_fu_486_p2);
    tmp_18_fu_516_p2 <= (tmp_17_reg_620 and tmp_16_fu_510_p2);
    tmp_19_fu_344_p4 <= j_reg_130(4 downto 1);
    tmp_1_fu_212_p2 <= "1" when (unsigned(i_reg_118) < unsigned(ap_const_lv5_1C)) else "0";
    tmp_20_fu_358_p2 <= std_logic_vector(unsigned(tmp_8_reg_554) + unsigned(tmp_cast_12_fu_354_p1));
    tmp_21_fu_371_p2 <= std_logic_vector(unsigned(tmp_32_cast_fu_363_p3) + unsigned(tmp_cast_reg_541));
    tmp_22_fu_338_p0 <= tmp_22_fu_338_p00(5 - 1 downto 0);
    tmp_22_fu_338_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_328_p2),10));
    tmp_22_fu_338_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_338_p0) * unsigned(ap_const_lv10_1D), 10));
    tmp_23_fu_413_p2 <= std_logic_vector(unsigned(tmp_9_cast_fu_409_p1) + unsigned(tmp_22_reg_585));
    tmp_24_fu_418_p3 <= (tmp_23_fu_413_p2 & ap_const_lv3_0);
    tmp_25_fu_430_p2 <= std_logic_vector(unsigned(tmp_cast2_reg_536) + unsigned(tmp_37_cast_fu_426_p1));
    tmp_26_fu_452_p1 <= image_load_to_int_fu_439_p1(23 - 1 downto 0);
    tmp_27_fu_470_p1 <= max_1_to_int_fu_456_p1(23 - 1 downto 0);
    tmp_2_fu_238_p3 <= (tmp_s_fu_228_p4 & ap_const_lv4_0);
    tmp_32_cast_fu_363_p3 <= (tmp_20_fu_358_p2 & ap_const_lv3_0);
    tmp_33_cast_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_371_p2),64));
    tmp_37_cast_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_418_p3),14));
    tmp_38_cast_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_reg_603),64));
    tmp_3_fu_403_p2 <= std_logic_vector(unsigned(j_reg_130) + unsigned(l_cast1_fu_387_p1));
    tmp_4_fu_222_p0 <= tmp_4_fu_222_p00(5 - 1 downto 0);
    tmp_4_fu_222_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_118),10));
    tmp_4_fu_222_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_222_p0) * unsigned(ap_const_lv10_1D), 10));
    tmp_5_fu_328_p2 <= std_logic_vector(unsigned(k_cast2_fu_312_p1) + unsigned(i_reg_118));
    tmp_6_fu_268_p2 <= "1" when (unsigned(j_reg_130) < unsigned(ap_const_lv5_1C)) else "0";
    tmp_7_cast_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_130),10));
    tmp_7_fu_250_p3 <= (tmp_s_fu_228_p4 & ap_const_lv1_0);
    tmp_8_fu_262_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_246_p1) - unsigned(p_shl1_cast_fu_258_p1));
    tmp_9_cast_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_403_p2),10));
    tmp_9_fu_278_p2 <= std_logic_vector(unsigned(tmp_4_reg_549) + unsigned(tmp_7_cast_fu_274_p1));
    tmp_cast2_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channel_reg_106),14));
    tmp_cast_12_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_344_p4),9));
    tmp_cast_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channel_reg_106),12));
    tmp_fu_283_p4 <= tmp_9_fu_278_p2(9 downto 1);
    tmp_s_fu_228_p4 <= i_reg_118(4 downto 1);
end behav;
