// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pool,hls_ip_2017_4_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.185250,HLS_SYN_LAT=42577,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=250,HLS_SYN_LUT=776}" *)

module pool (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        image_r_address0,
        image_r_ce0,
        image_r_q0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [12:0] image_r_address0;
output   image_r_ce0;
input  [31:0] image_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_r_ce0;
reg output_r_we0;
reg[12:0] image_r_address0;
reg image_r_ce0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] channel_1_fu_198_p2;
reg   [3:0] channel_1_reg_531;
wire    ap_CS_fsm_state2;
wire   [13:0] tmp_cast2_fu_204_p1;
reg   [13:0] tmp_cast2_reg_536;
wire   [0:0] exitcond2_fu_192_p2;
wire   [11:0] tmp_cast_fu_208_p1;
reg   [11:0] tmp_cast_reg_541;
wire   [9:0] tmp_4_fu_222_p2;
reg   [9:0] tmp_4_reg_549;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_1_fu_212_p2;
wire   [8:0] tmp_8_fu_262_p2;
reg   [8:0] tmp_8_reg_554;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_6_fu_268_p2;
wire   [4:0] i_1_fu_306_p2;
wire    ap_CS_fsm_state5;
wire   [1:0] k_1_fu_322_p2;
reg   [1:0] k_1_reg_580;
wire    ap_CS_fsm_state6;
wire   [9:0] tmp_22_fu_338_p2;
reg   [9:0] tmp_22_reg_585;
wire   [0:0] exitcond1_fu_316_p2;
wire   [4:0] j_1_fu_381_p2;
wire   [1:0] l_1_fu_397_p2;
reg   [1:0] l_1_reg_598;
wire    ap_CS_fsm_state7;
wire   [13:0] tmp_25_fu_430_p2;
reg   [13:0] tmp_25_reg_603;
wire   [0:0] exitcond_fu_391_p2;
wire    ap_CS_fsm_state8;
reg   [31:0] image_load_reg_613;
wire    ap_CS_fsm_state9;
wire   [0:0] tmp_17_fu_187_p2;
reg   [0:0] tmp_17_reg_620;
wire    ap_CS_fsm_state10;
wire   [31:0] max_2_fu_521_p3;
wire    ap_CS_fsm_state11;
reg   [3:0] channel_reg_106;
reg   [4:0] i_reg_118;
reg   [4:0] j_reg_130;
reg   [31:0] max1_reg_142;
reg   [1:0] k_reg_153;
reg   [31:0] max_1_reg_164;
reg   [1:0] l_reg_176;
wire   [63:0] tmp_13_fu_301_p1;
wire   [63:0] tmp_33_cast_fu_376_p1;
wire   [63:0] tmp_38_cast_fu_435_p1;
wire   [4:0] tmp_4_fu_222_p0;
wire   [3:0] tmp_s_fu_228_p4;
wire   [7:0] tmp_2_fu_238_p3;
wire   [4:0] tmp_7_fu_250_p3;
wire   [8:0] p_shl_cast_fu_246_p1;
wire   [8:0] p_shl1_cast_fu_258_p1;
wire   [9:0] tmp_7_cast_fu_274_p1;
wire   [9:0] tmp_9_fu_278_p2;
wire   [8:0] tmp_fu_283_p4;
wire   [12:0] tmp_11_fu_293_p3;
wire   [4:0] k_cast2_fu_312_p1;
wire   [4:0] tmp_5_fu_328_p2;
wire   [4:0] tmp_22_fu_338_p0;
wire   [3:0] tmp_19_fu_344_p4;
wire   [8:0] tmp_cast_12_fu_354_p1;
wire   [8:0] tmp_20_fu_358_p2;
wire   [11:0] tmp_32_cast_fu_363_p3;
wire   [11:0] tmp_21_fu_371_p2;
wire   [4:0] l_cast1_fu_387_p1;
wire   [4:0] tmp_3_fu_403_p2;
wire   [9:0] tmp_9_cast_fu_409_p1;
wire   [9:0] tmp_23_fu_413_p2;
wire   [12:0] tmp_24_fu_418_p3;
wire   [13:0] tmp_37_cast_fu_426_p1;
wire   [31:0] image_load_to_int_fu_439_p1;
wire   [31:0] max_1_to_int_fu_456_p1;
wire   [7:0] tmp_10_fu_442_p4;
wire   [22:0] tmp_26_fu_452_p1;
wire   [0:0] notrhs_fu_480_p2;
wire   [0:0] notlhs_fu_474_p2;
wire   [7:0] tmp_12_fu_460_p4;
wire   [22:0] tmp_27_fu_470_p1;
wire   [0:0] notrhs7_fu_498_p2;
wire   [0:0] notlhs6_fu_492_p2;
wire   [0:0] tmp_14_fu_486_p2;
wire   [0:0] tmp_15_fu_504_p2;
wire   [0:0] tmp_16_fu_510_p2;
wire   [0:0] tmp_18_fu_516_p2;
reg   [10:0] ap_NS_fsm;
wire   [9:0] tmp_22_fu_338_p00;
wire   [9:0] tmp_4_fu_222_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

pool_fcmp_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
pool_fcmp_32ns_32bkb_U1(
    .din0(image_load_reg_613),
    .din1(max_1_reg_164),
    .opcode(5'd2),
    .dout(tmp_17_fu_187_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        channel_reg_106 <= channel_1_reg_531;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        channel_reg_106 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_192_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_118 <= 5'd0;
    end else if (((tmp_6_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_reg_118 <= i_1_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_130 <= 5'd0;
    end else if (((exitcond1_fu_316_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        j_reg_130 <= j_1_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_391_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        k_reg_153 <= k_1_reg_580;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        k_reg_153 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_316_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        l_reg_176 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        l_reg_176 <= l_1_reg_598;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_391_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        max1_reg_142 <= max_1_reg_164;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        max1_reg_142 <= image_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_316_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        max_1_reg_164 <= max1_reg_142;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        max_1_reg_164 <= max_2_fu_521_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        channel_1_reg_531 <= channel_1_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        image_load_reg_613 <= image_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_1_reg_580 <= k_1_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        l_1_reg_598 <= l_1_fu_397_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_17_reg_620 <= tmp_17_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_316_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_22_reg_585 <= tmp_22_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_391_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_25_reg_603 <= tmp_25_fu_430_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_4_reg_549 <= tmp_4_fu_222_p2;
        tmp_8_reg_554[8 : 1] <= tmp_8_fu_262_p2[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_192_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_cast2_reg_536[3 : 0] <= tmp_cast2_fu_204_p1[3 : 0];
        tmp_cast_reg_541[3 : 0] <= tmp_cast_fu_208_p1[3 : 0];
    end
end

always @ (*) begin
    if (((exitcond2_fu_192_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_192_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        image_r_address0 = tmp_38_cast_fu_435_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        image_r_address0 = tmp_13_fu_301_p1;
    end else begin
        image_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8))) begin
        image_r_ce0 = 1'b1;
    end else begin
        image_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_316_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_192_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_1_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_6_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond1_fu_316_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond_fu_391_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign channel_1_fu_198_p2 = (channel_reg_106 + 4'd1);

assign exitcond1_fu_316_p2 = ((k_reg_153 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond2_fu_192_p2 = ((channel_reg_106 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond_fu_391_p2 = ((l_reg_176 == 2'd2) ? 1'b1 : 1'b0);

assign i_1_fu_306_p2 = (i_reg_118 + 5'd2);

assign image_load_to_int_fu_439_p1 = image_load_reg_613;

assign j_1_fu_381_p2 = (j_reg_130 + 5'd2);

assign k_1_fu_322_p2 = (k_reg_153 + 2'd1);

assign k_cast2_fu_312_p1 = k_reg_153;

assign l_1_fu_397_p2 = (l_reg_176 + 2'd1);

assign l_cast1_fu_387_p1 = l_reg_176;

assign max_1_to_int_fu_456_p1 = max_1_reg_164;

assign max_2_fu_521_p3 = ((tmp_18_fu_516_p2[0:0] === 1'b1) ? image_load_reg_613 : max_1_reg_164);

assign notlhs6_fu_492_p2 = ((tmp_12_fu_460_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_474_p2 = ((tmp_10_fu_442_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs7_fu_498_p2 = ((tmp_27_fu_470_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_480_p2 = ((tmp_26_fu_452_p1 == 23'd0) ? 1'b1 : 1'b0);

assign output_r_address0 = tmp_33_cast_fu_376_p1;

assign output_r_d0 = max1_reg_142;

assign p_shl1_cast_fu_258_p1 = tmp_7_fu_250_p3;

assign p_shl_cast_fu_246_p1 = tmp_2_fu_238_p3;

assign tmp_10_fu_442_p4 = {{image_load_to_int_fu_439_p1[30:23]}};

assign tmp_11_fu_293_p3 = {{tmp_fu_283_p4}, {channel_reg_106}};

assign tmp_12_fu_460_p4 = {{max_1_to_int_fu_456_p1[30:23]}};

assign tmp_13_fu_301_p1 = tmp_11_fu_293_p3;

assign tmp_14_fu_486_p2 = (notrhs_fu_480_p2 | notlhs_fu_474_p2);

assign tmp_15_fu_504_p2 = (notrhs7_fu_498_p2 | notlhs6_fu_492_p2);

assign tmp_16_fu_510_p2 = (tmp_15_fu_504_p2 & tmp_14_fu_486_p2);

assign tmp_18_fu_516_p2 = (tmp_17_reg_620 & tmp_16_fu_510_p2);

assign tmp_19_fu_344_p4 = {{j_reg_130[4:1]}};

assign tmp_1_fu_212_p2 = ((i_reg_118 < 5'd28) ? 1'b1 : 1'b0);

assign tmp_20_fu_358_p2 = (tmp_8_reg_554 + tmp_cast_12_fu_354_p1);

assign tmp_21_fu_371_p2 = (tmp_32_cast_fu_363_p3 + tmp_cast_reg_541);

assign tmp_22_fu_338_p0 = tmp_22_fu_338_p00;

assign tmp_22_fu_338_p00 = tmp_5_fu_328_p2;

assign tmp_22_fu_338_p2 = (tmp_22_fu_338_p0 * $signed('h1D));

assign tmp_23_fu_413_p2 = (tmp_9_cast_fu_409_p1 + tmp_22_reg_585);

assign tmp_24_fu_418_p3 = {{tmp_23_fu_413_p2}, {3'd0}};

assign tmp_25_fu_430_p2 = (tmp_cast2_reg_536 + tmp_37_cast_fu_426_p1);

assign tmp_26_fu_452_p1 = image_load_to_int_fu_439_p1[22:0];

assign tmp_27_fu_470_p1 = max_1_to_int_fu_456_p1[22:0];

assign tmp_2_fu_238_p3 = {{tmp_s_fu_228_p4}, {4'd0}};

assign tmp_32_cast_fu_363_p3 = {{tmp_20_fu_358_p2}, {3'd0}};

assign tmp_33_cast_fu_376_p1 = tmp_21_fu_371_p2;

assign tmp_37_cast_fu_426_p1 = tmp_24_fu_418_p3;

assign tmp_38_cast_fu_435_p1 = tmp_25_reg_603;

assign tmp_3_fu_403_p2 = (j_reg_130 + l_cast1_fu_387_p1);

assign tmp_4_fu_222_p0 = tmp_4_fu_222_p00;

assign tmp_4_fu_222_p00 = i_reg_118;

assign tmp_4_fu_222_p2 = (tmp_4_fu_222_p0 * $signed('h1D));

assign tmp_5_fu_328_p2 = (k_cast2_fu_312_p1 + i_reg_118);

assign tmp_6_fu_268_p2 = ((j_reg_130 < 5'd28) ? 1'b1 : 1'b0);

assign tmp_7_cast_fu_274_p1 = j_reg_130;

assign tmp_7_fu_250_p3 = {{tmp_s_fu_228_p4}, {1'd0}};

assign tmp_8_fu_262_p2 = (p_shl_cast_fu_246_p1 - p_shl1_cast_fu_258_p1);

assign tmp_9_cast_fu_409_p1 = tmp_3_fu_403_p2;

assign tmp_9_fu_278_p2 = (tmp_4_reg_549 + tmp_7_cast_fu_274_p1);

assign tmp_cast2_fu_204_p1 = channel_reg_106;

assign tmp_cast_12_fu_354_p1 = tmp_19_fu_344_p4;

assign tmp_cast_fu_208_p1 = channel_reg_106;

assign tmp_fu_283_p4 = {{tmp_9_fu_278_p2[9:1]}};

assign tmp_s_fu_228_p4 = {{i_reg_118[4:1]}};

always @ (posedge ap_clk) begin
    tmp_cast2_reg_536[13:4] <= 10'b0000000000;
    tmp_cast_reg_541[11:4] <= 8'b00000000;
    tmp_8_reg_554[0] <= 1'b0;
end

endmodule //pool
