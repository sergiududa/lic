// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _dataflow_in_loop_con_HH_
#define _dataflow_in_loop_con_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "conv_layer1_label8_p.h"

namespace ap_rtl {

struct dataflow_in_loop_con : public sc_module {
    // Port declarations 19
    sc_in< sc_lv<4> > filter_0_i_i;
    sc_out< sc_lv<13> > output_V_address0;
    sc_out< sc_logic > output_V_ce0;
    sc_out< sc_lv<24> > output_V_d0;
    sc_in< sc_lv<24> > output_V_q0;
    sc_out< sc_logic > output_V_we0;
    sc_out< sc_lv<13> > output_V_address1;
    sc_out< sc_logic > output_V_ce1;
    sc_out< sc_lv<24> > output_V_d1;
    sc_in< sc_lv<24> > output_V_q1;
    sc_out< sc_logic > output_V_we1;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > filter_0_i_i_ap_vld;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_in< sc_logic > ap_continue;


    // Module declarations
    dataflow_in_loop_con(sc_module_name name);
    SC_HAS_PROCESS(dataflow_in_loop_con);

    ~dataflow_in_loop_con();

    sc_trace_file* mVcdFile;

    conv_layer1_label8_p* conv_layer1_label8_p_U0;
    sc_signal< sc_logic > conv_layer1_label8_p_U0_ap_start;
    sc_signal< sc_logic > conv_layer1_label8_p_U0_ap_done;
    sc_signal< sc_logic > conv_layer1_label8_p_U0_ap_continue;
    sc_signal< sc_logic > conv_layer1_label8_p_U0_ap_idle;
    sc_signal< sc_logic > conv_layer1_label8_p_U0_ap_ready;
    sc_signal< sc_lv<13> > conv_layer1_label8_p_U0_output_V_address0;
    sc_signal< sc_logic > conv_layer1_label8_p_U0_output_V_ce0;
    sc_signal< sc_logic > conv_layer1_label8_p_U0_output_V_we0;
    sc_signal< sc_lv<24> > conv_layer1_label8_p_U0_output_V_d0;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > conv_layer1_label8_p_U0_start_full_n;
    sc_signal< sc_logic > conv_layer1_label8_p_U0_start_write;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<24> ap_const_lv24_0;
    static const sc_logic ap_const_logic_1;
    // Thread declarations
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_conv_layer1_label8_p_U0_ap_continue();
    void thread_conv_layer1_label8_p_U0_ap_start();
    void thread_conv_layer1_label8_p_U0_start_full_n();
    void thread_conv_layer1_label8_p_U0_start_write();
    void thread_output_V_address0();
    void thread_output_V_address1();
    void thread_output_V_ce0();
    void thread_output_V_ce1();
    void thread_output_V_d0();
    void thread_output_V_d1();
    void thread_output_V_we0();
    void thread_output_V_we1();
};

}

using namespace ap_rtl;

#endif
