-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_layer1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of conv_layer1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv13_1A48 : STD_LOGIC_VECTOR (12 downto 0) := "1101001001000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv10_349 : STD_LOGIC_VECTOR (9 downto 0) := "1101001001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv10_1D : STD_LOGIC_VECTOR (9 downto 0) := "0000011101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_layer1_weights_31_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_layer1_weights_31_ce0 : STD_LOGIC;
    signal conv_layer1_weights_31_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_layer1_weights_29_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_layer1_weights_29_ce0 : STD_LOGIC;
    signal conv_layer1_weights_29_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_layer1_weights_27_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_layer1_weights_27_ce0 : STD_LOGIC;
    signal conv_layer1_weights_27_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_layer1_weights_25_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_layer1_weights_25_ce0 : STD_LOGIC;
    signal conv_layer1_weights_25_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_layer1_weights_23_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_layer1_weights_23_ce0 : STD_LOGIC;
    signal conv_layer1_weights_23_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_layer1_weights_21_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_layer1_weights_21_ce0 : STD_LOGIC;
    signal conv_layer1_weights_21_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_layer1_weights_19_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_layer1_weights_19_ce0 : STD_LOGIC;
    signal conv_layer1_weights_19_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_layer1_weights_17_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_layer1_weights_17_ce0 : STD_LOGIC;
    signal conv_layer1_weights_17_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_layer1_weights_15_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_layer1_weights_15_ce0 : STD_LOGIC;
    signal conv_layer1_weights_15_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_layer1_weights_13_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_layer1_weights_13_ce0 : STD_LOGIC;
    signal conv_layer1_weights_13_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_layer1_weights_11_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_layer1_weights_11_ce0 : STD_LOGIC;
    signal conv_layer1_weights_11_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_layer1_weights_9_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_layer1_weights_9_ce0 : STD_LOGIC;
    signal conv_layer1_weights_9_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_layer1_weights_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_layer1_weights_7_ce0 : STD_LOGIC;
    signal conv_layer1_weights_7_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_layer1_weights_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_layer1_weights_5_ce0 : STD_LOGIC;
    signal conv_layer1_weights_5_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_layer1_weights_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_layer1_weights_3_ce0 : STD_LOGIC;
    signal conv_layer1_weights_3_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_layer1_weights_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_layer1_weights_1_ce0 : STD_LOGIC;
    signal conv_layer1_weights_1_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_layer1_bias_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_layer1_bias_V_ce0 : STD_LOGIC;
    signal conv_layer1_bias_V_q0 : STD_LOGIC_VECTOR (20 downto 0);
    signal image_V_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal image_V_0_ce0 : STD_LOGIC;
    signal image_V_0_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal image_V_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal image_V_0_ce1 : STD_LOGIC;
    signal image_V_0_q1 : STD_LOGIC_VECTOR (19 downto 0);
    signal image_V_0_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal image_V_0_ce2 : STD_LOGIC;
    signal image_V_0_q2 : STD_LOGIC_VECTOR (19 downto 0);
    signal image_V_0_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal image_V_0_ce3 : STD_LOGIC;
    signal image_V_0_q3 : STD_LOGIC_VECTOR (19 downto 0);
    signal image_V_0_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal image_V_0_ce4 : STD_LOGIC;
    signal image_V_0_q4 : STD_LOGIC_VECTOR (19 downto 0);
    signal image_V_0_address5 : STD_LOGIC_VECTOR (9 downto 0);
    signal image_V_0_ce5 : STD_LOGIC;
    signal image_V_0_q5 : STD_LOGIC_VECTOR (19 downto 0);
    signal image_V_0_address6 : STD_LOGIC_VECTOR (9 downto 0);
    signal image_V_0_ce6 : STD_LOGIC;
    signal image_V_0_q6 : STD_LOGIC_VECTOR (19 downto 0);
    signal image_V_0_address7 : STD_LOGIC_VECTOR (9 downto 0);
    signal image_V_0_ce7 : STD_LOGIC;
    signal image_V_0_q7 : STD_LOGIC_VECTOR (19 downto 0);
    signal image_V_0_address8 : STD_LOGIC_VECTOR (9 downto 0);
    signal image_V_0_ce8 : STD_LOGIC;
    signal image_V_0_q8 : STD_LOGIC_VECTOR (19 downto 0);
    signal image_V_0_address9 : STD_LOGIC_VECTOR (9 downto 0);
    signal image_V_0_ce9 : STD_LOGIC;
    signal image_V_0_q9 : STD_LOGIC_VECTOR (19 downto 0);
    signal image_V_0_address10 : STD_LOGIC_VECTOR (9 downto 0);
    signal image_V_0_ce10 : STD_LOGIC;
    signal image_V_0_q10 : STD_LOGIC_VECTOR (19 downto 0);
    signal image_V_0_address11 : STD_LOGIC_VECTOR (9 downto 0);
    signal image_V_0_ce11 : STD_LOGIC;
    signal image_V_0_q11 : STD_LOGIC_VECTOR (19 downto 0);
    signal image_V_0_address12 : STD_LOGIC_VECTOR (9 downto 0);
    signal image_V_0_ce12 : STD_LOGIC;
    signal image_V_0_q12 : STD_LOGIC_VECTOR (19 downto 0);
    signal image_V_0_address13 : STD_LOGIC_VECTOR (9 downto 0);
    signal image_V_0_ce13 : STD_LOGIC;
    signal image_V_0_q13 : STD_LOGIC_VECTOR (19 downto 0);
    signal image_V_0_address14 : STD_LOGIC_VECTOR (9 downto 0);
    signal image_V_0_ce14 : STD_LOGIC;
    signal image_V_0_q14 : STD_LOGIC_VECTOR (19 downto 0);
    signal image_V_0_address15 : STD_LOGIC_VECTOR (9 downto 0);
    signal image_V_0_ce15 : STD_LOGIC;
    signal image_V_0_q15 : STD_LOGIC_VECTOR (19 downto 0);
    signal indvar_flatten2_reg_519 : STD_LOGIC_VECTOR (12 downto 0);
    signal filter_reg_530 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_542 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_553 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_565 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_flatten2_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_1643 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten2_reg_1643 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_flatten2_reg_1643 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_flatten2_reg_1643 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_flatten2_reg_1643 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_exitcond_flatten2_reg_1643 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_exitcond_flatten2_reg_1643 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_exitcond_flatten2_reg_1643 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_exitcond_flatten2_reg_1643 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_exitcond_flatten2_reg_1643 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_exitcond_flatten2_reg_1643 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter11_exitcond_flatten2_reg_1643 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next2_fu_583_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond_flatten_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1652 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_1652 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_601_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_mid_fu_615_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_mid_reg_1668 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid2_v_fu_622_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_mid2_v_reg_1675 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter2_tmp_mid2_v_reg_1675 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter3_tmp_mid2_v_reg_1675 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter4_tmp_mid2_v_reg_1675 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter5_tmp_mid2_v_reg_1675 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter6_tmp_mid2_v_reg_1675 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter7_tmp_mid2_v_reg_1675 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter8_tmp_mid2_v_reg_1675 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter9_tmp_mid2_v_reg_1675 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter10_tmp_mid2_v_reg_1675 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter11_tmp_mid2_v_reg_1675 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_mid2_fu_629_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_mid2_reg_1681 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter2_tmp_mid2_reg_1681 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter3_tmp_mid2_reg_1681 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter4_tmp_mid2_reg_1681 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter5_tmp_mid2_reg_1681 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter6_tmp_mid2_reg_1681 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond5_mid_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond5_mid_reg_1714 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_mid2_fu_664_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_mid2_reg_1721 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter2_j_mid2_reg_1721 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter3_j_mid2_reg_1721 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter4_j_mid2_reg_1721 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter5_j_mid2_reg_1721 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter6_j_mid2_reg_1721 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter7_j_mid2_reg_1721 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter8_j_mid2_reg_1721 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter9_j_mid2_reg_1721 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter10_j_mid2_reg_1721 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid2_37_fu_672_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid2_37_reg_1730 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter2_tmp_mid2_37_reg_1730 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter3_tmp_mid2_37_reg_1730 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter4_tmp_mid2_37_reg_1730 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter5_tmp_mid2_37_reg_1730 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter6_tmp_mid2_37_reg_1730 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter7_tmp_mid2_37_reg_1730 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter8_tmp_mid2_37_reg_1730 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter9_tmp_mid2_37_reg_1730 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter10_tmp_mid2_37_reg_1730 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_3_fu_693_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_3_reg_1742 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter2_j_3_reg_1742 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter3_j_3_reg_1742 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter4_j_3_reg_1742 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter5_j_3_reg_1742 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter6_j_3_reg_1742 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_80_0_2_fu_712_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_80_0_2_reg_1755 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter2_tmp_80_0_2_reg_1755 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter3_tmp_80_0_2_reg_1755 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter4_tmp_80_0_2_reg_1755 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter5_tmp_80_0_2_reg_1755 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter6_tmp_80_0_2_reg_1755 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_layer1_weights_1_reg_1767 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_layer1_weights_3_reg_1772 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_layer1_weights_5_reg_1777 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_1821_fu_749_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1821_reg_1792 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter3_tmp_1821_reg_1792 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1823_fu_774_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1823_reg_1799 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter3_tmp_1823_reg_1799 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter4_tmp_1823_reg_1799 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter5_tmp_1823_reg_1799 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1825_fu_799_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1825_reg_1807 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter3_tmp_1825_reg_1807 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter4_tmp_1825_reg_1807 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter5_tmp_1825_reg_1807 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter6_tmp_1825_reg_1807 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter7_tmp_1825_reg_1807 : STD_LOGIC_VECTOR (4 downto 0);
    signal image_V_0_load_reg_1820 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal image_V_0_load_1_reg_1825 : STD_LOGIC_VECTOR (19 downto 0);
    signal image_V_0_load_2_reg_1830 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_80_0_3_fu_818_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_80_0_3_reg_1835 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter3_tmp_80_0_3_reg_1835 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter4_tmp_80_0_3_reg_1835 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter5_tmp_80_0_3_reg_1835 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter6_tmp_80_0_3_reg_1835 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter7_tmp_80_0_3_reg_1835 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_layer1_weights_7_reg_1847 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_layer1_weights_9_reg_1852 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_24_0_1_fu_1545_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_0_1_reg_1872 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_96_reg_1877 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Val2_24_0_2_fu_1551_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_0_2_reg_1887 : STD_LOGIC_VECTOR (42 downto 0);
    signal image_V_0_load_3_reg_1892 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal image_V_0_load_4_reg_1897 : STD_LOGIC_VECTOR (19 downto 0);
    signal conv_layer1_weights_11_reg_1902 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_layer1_weights_13_reg_1907 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_24_0_3_fu_1557_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_0_3_reg_1932 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_1845_reg_1937 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_24_1_fu_1563_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_1_reg_1942 : STD_LOGIC_VECTOR (42 downto 0);
    signal image_V_0_load_5_reg_1947 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal image_V_0_load_6_reg_1952 : STD_LOGIC_VECTOR (19 downto 0);
    signal conv_layer1_weights_15_reg_1957 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_layer1_weights_17_reg_1962 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_24_1_1_fu_1569_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_1_1_reg_1987 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_1847_reg_1992 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_24_1_2_fu_1575_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_1_2_reg_1997 : STD_LOGIC_VECTOR (42 downto 0);
    signal image_V_0_load_7_reg_2002 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal image_V_0_load_8_reg_2007 : STD_LOGIC_VECTOR (19 downto 0);
    signal conv_layer1_weights_19_reg_2012 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_layer1_weights_21_reg_2017 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_24_1_3_fu_1581_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_1_3_reg_2042 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_1849_reg_2047 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_24_2_fu_1587_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_2_reg_2052 : STD_LOGIC_VECTOR (42 downto 0);
    signal image_V_0_load_9_reg_2057 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal image_V_0_load_10_reg_2062 : STD_LOGIC_VECTOR (19 downto 0);
    signal conv_layer1_weights_23_reg_2067 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_layer1_weights_25_reg_2072 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_24_2_1_fu_1593_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_2_1_reg_2107 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_1851_reg_2112 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_24_2_2_fu_1599_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_2_2_reg_2117 : STD_LOGIC_VECTOR (42 downto 0);
    signal image_V_0_load_11_reg_2122 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal image_V_0_load_12_reg_2127 : STD_LOGIC_VECTOR (19 downto 0);
    signal conv_layer1_weights_27_reg_2132 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_layer1_weights_29_reg_2137 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_layer1_weights_31_reg_2142 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_reg_pp0_iter9_conv_layer1_weights_31_reg_2142 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_layer1_bias_V_l_reg_2147 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_reg_pp0_iter9_conv_layer1_bias_V_l_reg_2147 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_reg_pp0_iter10_conv_layer1_bias_V_l_reg_2147 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_24_2_3_fu_1605_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_2_3_reg_2158 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_1853_reg_2163 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_24_3_fu_1611_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_3_reg_2168 : STD_LOGIC_VECTOR (42 downto 0);
    signal image_V_0_load_13_reg_2173 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal image_V_0_load_14_reg_2178 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_24_3_1_fu_1617_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_3_1_reg_2183 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_1855_reg_2188 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_24_3_2_fu_1623_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_3_2_reg_2193 : STD_LOGIC_VECTOR (42 downto 0);
    signal image_V_0_load_15_reg_2198 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal p_Val2_24_3_3_fu_1629_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_3_3_reg_2203 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_1857_reg_2208 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1635_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1826_reg_2213 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal p_Val2_cast_fu_1490_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Val2_cast_reg_2218 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_i_fu_1496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_2223 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_phi_mux_filter_phi_fu_534_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_phi_fu_557_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_j_phi_fu_569_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1828_fu_688_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1832_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1836_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1829_fu_813_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1841_fu_830_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1833_fu_853_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1837_fu_876_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1830_fu_896_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1842_fu_954_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1834_fu_987_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1838_fu_998_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1831_fu_1074_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1843_fu_1085_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1835_fu_1161_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1839_fu_1172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1844_fu_1248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1903_cast_fu_1522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_op_fu_595_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal filter_2_fu_609_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_8_dup_fu_653_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_88_fu_680_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_92_fu_699_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_98_fu_718_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_s_fu_736_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_8_mid1_fu_731_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1820_fu_742_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_77_s_fu_761_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_77_2_mid1_fu_756_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1822_fu_767_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_77_1_fu_786_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_77_3_mid1_fu_781_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1824_fu_792_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_89_fu_806_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_102_fu_823_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_93_fu_847_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_1_fu_1538_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_99_fu_870_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_90_fu_890_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_97_fu_904_p3 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_86_0_1_fu_911_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_24_0_1_cast_fu_901_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_25_0_1_fu_915_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_1840_fu_924_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_86_0_2_fu_934_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_24_0_2_cast_fu_921_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_103_fu_948_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_25_0_2_fu_942_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_94_fu_981_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_100_fu_992_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_86_0_3_fu_1006_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_24_0_3_cast_fu_1003_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_25_0_3_fu_1013_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_1846_fu_1022_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_86_1_fu_1032_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_24_1_cast_fu_1019_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_25_1_fu_1040_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_91_fu_1068_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_104_fu_1079_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_86_1_1_fu_1093_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_24_1_1_cast_fu_1090_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_25_1_1_fu_1100_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_1848_fu_1109_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_86_1_2_fu_1119_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_24_1_2_cast_fu_1106_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_25_1_2_fu_1127_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_95_fu_1155_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_101_fu_1166_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_86_1_3_fu_1180_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_24_1_3_cast_fu_1177_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_25_1_3_fu_1187_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_1850_fu_1196_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_86_2_fu_1206_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_24_2_cast_fu_1193_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_25_2_fu_1214_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_105_fu_1242_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_86_2_1_fu_1256_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_24_2_1_cast_fu_1253_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_25_2_1_fu_1263_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_1852_fu_1272_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_86_2_2_fu_1282_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_24_2_2_cast_fu_1269_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_25_2_2_fu_1290_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_86_2_3_fu_1321_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_24_2_3_cast_fu_1318_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_25_2_3_fu_1328_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_1854_fu_1337_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_86_3_fu_1347_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_24_3_cast_fu_1334_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_25_3_fu_1355_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_86_3_1_fu_1383_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_24_3_1_cast_fu_1380_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_25_3_1_fu_1390_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_1856_fu_1399_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_86_3_2_fu_1409_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_24_3_2_cast_fu_1396_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_25_3_2_fu_1417_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_86_3_3_fu_1451_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_24_3_3_cast_fu_1448_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_25_3_3_fu_1458_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_cast_mid2_fu_1436_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_V_3_3_fu_1464_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_3_fu_1474_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_14_mid2_fu_1439_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Val2_s_fu_1484_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_fu_1505_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_mid2_cast_fu_1502_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_1902_cast_fu_1512_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_1827_fu_1516_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal a_V_i_fu_1527_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Val2_1_fu_1538_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_24_0_1_fu_1545_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_24_0_2_fu_1551_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_24_0_3_fu_1557_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_24_1_fu_1563_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_24_1_1_fu_1569_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_24_1_2_fu_1575_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_24_1_3_fu_1581_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_24_2_fu_1587_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_24_2_1_fu_1593_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_24_2_2_fu_1599_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_24_2_3_fu_1605_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_24_3_fu_1611_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_24_3_1_fu_1617_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_24_3_2_fu_1623_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_24_3_3_fu_1629_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1635_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1635_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1635_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1635_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1635_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_1_fu_1538_p10 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_0_1_fu_1545_p10 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_0_2_fu_1551_p10 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_0_3_fu_1557_p10 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_1_1_fu_1569_p10 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_1_2_fu_1575_p10 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_1_3_fu_1581_p10 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_1_fu_1563_p10 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_2_1_fu_1593_p10 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_2_2_fu_1599_p10 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_2_3_fu_1605_p10 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_2_fu_1587_p10 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_3_1_fu_1617_p10 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_3_2_fu_1623_p10 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_3_3_fu_1629_p10 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_24_3_fu_1611_p10 : STD_LOGIC_VECTOR (42 downto 0);

    component nnet_mul_mul_19s_tde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        dout : OUT STD_LOGIC_VECTOR (42 downto 0) );
    end component;


    component nnet_mac_muladd_5udo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component conv_layer1_conv_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component conv_layer1_conv_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component conv_layer1_conv_dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component conv_layer1_conv_eOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component conv_layer1_conv_fYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component conv_layer1_conv_g8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component conv_layer1_conv_hbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component conv_layer1_conv_ibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component conv_layer1_conv_jbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component conv_layer1_conv_kbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component conv_layer1_conv_lbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component conv_layer1_conv_mb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component conv_layer1_conv_ncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component conv_layer1_conv_ocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component conv_layer1_conv_pcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component conv_layer1_conv_qcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component conv_layer1_conv_rcU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component conv_layer1_imagesc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address5 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address6 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address7 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address8 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address9 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address10 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce10 : IN STD_LOGIC;
        q10 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address11 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce11 : IN STD_LOGIC;
        q11 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address12 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce12 : IN STD_LOGIC;
        q12 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address13 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce13 : IN STD_LOGIC;
        q13 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address14 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce14 : IN STD_LOGIC;
        q14 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address15 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce15 : IN STD_LOGIC;
        q15 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    conv_layer1_weights_31_U : component conv_layer1_conv_bkb
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_layer1_weights_31_address0,
        ce0 => conv_layer1_weights_31_ce0,
        q0 => conv_layer1_weights_31_q0);

    conv_layer1_weights_29_U : component conv_layer1_conv_cud
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_layer1_weights_29_address0,
        ce0 => conv_layer1_weights_29_ce0,
        q0 => conv_layer1_weights_29_q0);

    conv_layer1_weights_27_U : component conv_layer1_conv_dEe
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_layer1_weights_27_address0,
        ce0 => conv_layer1_weights_27_ce0,
        q0 => conv_layer1_weights_27_q0);

    conv_layer1_weights_25_U : component conv_layer1_conv_eOg
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_layer1_weights_25_address0,
        ce0 => conv_layer1_weights_25_ce0,
        q0 => conv_layer1_weights_25_q0);

    conv_layer1_weights_23_U : component conv_layer1_conv_fYi
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_layer1_weights_23_address0,
        ce0 => conv_layer1_weights_23_ce0,
        q0 => conv_layer1_weights_23_q0);

    conv_layer1_weights_21_U : component conv_layer1_conv_g8j
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_layer1_weights_21_address0,
        ce0 => conv_layer1_weights_21_ce0,
        q0 => conv_layer1_weights_21_q0);

    conv_layer1_weights_19_U : component conv_layer1_conv_hbi
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_layer1_weights_19_address0,
        ce0 => conv_layer1_weights_19_ce0,
        q0 => conv_layer1_weights_19_q0);

    conv_layer1_weights_17_U : component conv_layer1_conv_ibs
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_layer1_weights_17_address0,
        ce0 => conv_layer1_weights_17_ce0,
        q0 => conv_layer1_weights_17_q0);

    conv_layer1_weights_15_U : component conv_layer1_conv_jbC
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_layer1_weights_15_address0,
        ce0 => conv_layer1_weights_15_ce0,
        q0 => conv_layer1_weights_15_q0);

    conv_layer1_weights_13_U : component conv_layer1_conv_kbM
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_layer1_weights_13_address0,
        ce0 => conv_layer1_weights_13_ce0,
        q0 => conv_layer1_weights_13_q0);

    conv_layer1_weights_11_U : component conv_layer1_conv_lbW
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_layer1_weights_11_address0,
        ce0 => conv_layer1_weights_11_ce0,
        q0 => conv_layer1_weights_11_q0);

    conv_layer1_weights_9_U : component conv_layer1_conv_mb6
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_layer1_weights_9_address0,
        ce0 => conv_layer1_weights_9_ce0,
        q0 => conv_layer1_weights_9_q0);

    conv_layer1_weights_7_U : component conv_layer1_conv_ncg
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_layer1_weights_7_address0,
        ce0 => conv_layer1_weights_7_ce0,
        q0 => conv_layer1_weights_7_q0);

    conv_layer1_weights_5_U : component conv_layer1_conv_ocq
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_layer1_weights_5_address0,
        ce0 => conv_layer1_weights_5_ce0,
        q0 => conv_layer1_weights_5_q0);

    conv_layer1_weights_3_U : component conv_layer1_conv_pcA
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_layer1_weights_3_address0,
        ce0 => conv_layer1_weights_3_ce0,
        q0 => conv_layer1_weights_3_q0);

    conv_layer1_weights_1_U : component conv_layer1_conv_qcK
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_layer1_weights_1_address0,
        ce0 => conv_layer1_weights_1_ce0,
        q0 => conv_layer1_weights_1_q0);

    conv_layer1_bias_V_U : component conv_layer1_conv_rcU
    generic map (
        DataWidth => 21,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_layer1_bias_V_address0,
        ce0 => conv_layer1_bias_V_ce0,
        q0 => conv_layer1_bias_V_q0);

    image_V_0_U : component conv_layer1_imagesc4
    generic map (
        DataWidth => 20,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => image_V_0_address0,
        ce0 => image_V_0_ce0,
        q0 => image_V_0_q0,
        address1 => image_V_0_address1,
        ce1 => image_V_0_ce1,
        q1 => image_V_0_q1,
        address2 => image_V_0_address2,
        ce2 => image_V_0_ce2,
        q2 => image_V_0_q2,
        address3 => image_V_0_address3,
        ce3 => image_V_0_ce3,
        q3 => image_V_0_q3,
        address4 => image_V_0_address4,
        ce4 => image_V_0_ce4,
        q4 => image_V_0_q4,
        address5 => image_V_0_address5,
        ce5 => image_V_0_ce5,
        q5 => image_V_0_q5,
        address6 => image_V_0_address6,
        ce6 => image_V_0_ce6,
        q6 => image_V_0_q6,
        address7 => image_V_0_address7,
        ce7 => image_V_0_ce7,
        q7 => image_V_0_q7,
        address8 => image_V_0_address8,
        ce8 => image_V_0_ce8,
        q8 => image_V_0_q8,
        address9 => image_V_0_address9,
        ce9 => image_V_0_ce9,
        q9 => image_V_0_q9,
        address10 => image_V_0_address10,
        ce10 => image_V_0_ce10,
        q10 => image_V_0_q10,
        address11 => image_V_0_address11,
        ce11 => image_V_0_ce11,
        q11 => image_V_0_q11,
        address12 => image_V_0_address12,
        ce12 => image_V_0_ce12,
        q12 => image_V_0_q12,
        address13 => image_V_0_address13,
        ce13 => image_V_0_ce13,
        q13 => image_V_0_q13,
        address14 => image_V_0_address14,
        ce14 => image_V_0_ce14,
        q14 => image_V_0_q14,
        address15 => image_V_0_address15,
        ce15 => image_V_0_ce15,
        q15 => image_V_0_q15);

    nnet_mul_mul_19s_tde_U1 : component nnet_mul_mul_19s_tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 20,
        dout_WIDTH => 43)
    port map (
        din0 => conv_layer1_weights_1_reg_1767,
        din1 => p_Val2_1_fu_1538_p1,
        dout => p_Val2_1_fu_1538_p2);

    nnet_mul_mul_19s_tde_U2 : component nnet_mul_mul_19s_tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 20,
        dout_WIDTH => 43)
    port map (
        din0 => conv_layer1_weights_3_reg_1772,
        din1 => p_Val2_24_0_1_fu_1545_p1,
        dout => p_Val2_24_0_1_fu_1545_p2);

    nnet_mul_mul_19s_tde_U3 : component nnet_mul_mul_19s_tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 20,
        dout_WIDTH => 43)
    port map (
        din0 => conv_layer1_weights_5_reg_1777,
        din1 => p_Val2_24_0_2_fu_1551_p1,
        dout => p_Val2_24_0_2_fu_1551_p2);

    nnet_mul_mul_19s_tde_U4 : component nnet_mul_mul_19s_tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 20,
        dout_WIDTH => 43)
    port map (
        din0 => conv_layer1_weights_7_reg_1847,
        din1 => p_Val2_24_0_3_fu_1557_p1,
        dout => p_Val2_24_0_3_fu_1557_p2);

    nnet_mul_mul_19s_tde_U5 : component nnet_mul_mul_19s_tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 20,
        dout_WIDTH => 43)
    port map (
        din0 => conv_layer1_weights_9_reg_1852,
        din1 => p_Val2_24_1_fu_1563_p1,
        dout => p_Val2_24_1_fu_1563_p2);

    nnet_mul_mul_19s_tde_U6 : component nnet_mul_mul_19s_tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 20,
        dout_WIDTH => 43)
    port map (
        din0 => conv_layer1_weights_11_reg_1902,
        din1 => p_Val2_24_1_1_fu_1569_p1,
        dout => p_Val2_24_1_1_fu_1569_p2);

    nnet_mul_mul_19s_tde_U7 : component nnet_mul_mul_19s_tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 20,
        dout_WIDTH => 43)
    port map (
        din0 => conv_layer1_weights_13_reg_1907,
        din1 => p_Val2_24_1_2_fu_1575_p1,
        dout => p_Val2_24_1_2_fu_1575_p2);

    nnet_mul_mul_19s_tde_U8 : component nnet_mul_mul_19s_tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 20,
        dout_WIDTH => 43)
    port map (
        din0 => conv_layer1_weights_15_reg_1957,
        din1 => p_Val2_24_1_3_fu_1581_p1,
        dout => p_Val2_24_1_3_fu_1581_p2);

    nnet_mul_mul_19s_tde_U9 : component nnet_mul_mul_19s_tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 20,
        dout_WIDTH => 43)
    port map (
        din0 => conv_layer1_weights_17_reg_1962,
        din1 => p_Val2_24_2_fu_1587_p1,
        dout => p_Val2_24_2_fu_1587_p2);

    nnet_mul_mul_19s_tde_U10 : component nnet_mul_mul_19s_tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 20,
        dout_WIDTH => 43)
    port map (
        din0 => conv_layer1_weights_19_reg_2012,
        din1 => p_Val2_24_2_1_fu_1593_p1,
        dout => p_Val2_24_2_1_fu_1593_p2);

    nnet_mul_mul_19s_tde_U11 : component nnet_mul_mul_19s_tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 20,
        dout_WIDTH => 43)
    port map (
        din0 => conv_layer1_weights_21_reg_2017,
        din1 => p_Val2_24_2_2_fu_1599_p1,
        dout => p_Val2_24_2_2_fu_1599_p2);

    nnet_mul_mul_19s_tde_U12 : component nnet_mul_mul_19s_tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 20,
        dout_WIDTH => 43)
    port map (
        din0 => conv_layer1_weights_23_reg_2067,
        din1 => p_Val2_24_2_3_fu_1605_p1,
        dout => p_Val2_24_2_3_fu_1605_p2);

    nnet_mul_mul_19s_tde_U13 : component nnet_mul_mul_19s_tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 20,
        dout_WIDTH => 43)
    port map (
        din0 => conv_layer1_weights_25_reg_2072,
        din1 => p_Val2_24_3_fu_1611_p1,
        dout => p_Val2_24_3_fu_1611_p2);

    nnet_mul_mul_19s_tde_U14 : component nnet_mul_mul_19s_tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 20,
        dout_WIDTH => 43)
    port map (
        din0 => conv_layer1_weights_27_reg_2132,
        din1 => p_Val2_24_3_1_fu_1617_p1,
        dout => p_Val2_24_3_1_fu_1617_p2);

    nnet_mul_mul_19s_tde_U15 : component nnet_mul_mul_19s_tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 20,
        dout_WIDTH => 43)
    port map (
        din0 => conv_layer1_weights_29_reg_2137,
        din1 => p_Val2_24_3_2_fu_1623_p1,
        dout => p_Val2_24_3_2_fu_1623_p2);

    nnet_mul_mul_19s_tde_U16 : component nnet_mul_mul_19s_tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 20,
        dout_WIDTH => 43)
    port map (
        din0 => ap_reg_pp0_iter9_conv_layer1_weights_31_reg_2142,
        din1 => p_Val2_24_3_3_fu_1629_p1,
        dout => p_Val2_24_3_3_fu_1629_p2);

    nnet_mac_muladd_5udo_U17 : component nnet_mac_muladd_5udo
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_1635_p0,
        din1 => grp_fu_1635_p1,
        din2 => grp_fu_1635_p2,
        dout => grp_fu_1635_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    filter_reg_530_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                filter_reg_530 <= tmp_mid2_v_reg_1675;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                filter_reg_530 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_reg_553_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                i_reg_553 <= tmp_mid2_37_reg_1730;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_553 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten2_reg_519_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_fu_577_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten2_reg_519 <= indvar_flatten_next2_fu_583_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten2_reg_519 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_542_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_fu_577_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_542 <= indvar_flatten_next_fu_601_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_542 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_reg_565_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                j_reg_565 <= j_3_reg_1742;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_reg_565 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_reg_pp0_iter10_conv_layer1_bias_V_l_reg_2147 <= ap_reg_pp0_iter9_conv_layer1_bias_V_l_reg_2147;
                ap_reg_pp0_iter10_exitcond_flatten2_reg_1643 <= ap_reg_pp0_iter9_exitcond_flatten2_reg_1643;
                ap_reg_pp0_iter10_j_mid2_reg_1721 <= ap_reg_pp0_iter9_j_mid2_reg_1721;
                ap_reg_pp0_iter10_tmp_mid2_37_reg_1730 <= ap_reg_pp0_iter9_tmp_mid2_37_reg_1730;
                ap_reg_pp0_iter10_tmp_mid2_v_reg_1675 <= ap_reg_pp0_iter9_tmp_mid2_v_reg_1675;
                ap_reg_pp0_iter11_exitcond_flatten2_reg_1643 <= ap_reg_pp0_iter10_exitcond_flatten2_reg_1643;
                ap_reg_pp0_iter11_tmp_mid2_v_reg_1675 <= ap_reg_pp0_iter10_tmp_mid2_v_reg_1675;
                ap_reg_pp0_iter2_exitcond_flatten2_reg_1643 <= ap_reg_pp0_iter1_exitcond_flatten2_reg_1643;
                ap_reg_pp0_iter2_j_3_reg_1742 <= j_3_reg_1742;
                ap_reg_pp0_iter2_j_mid2_reg_1721 <= j_mid2_reg_1721;
                ap_reg_pp0_iter2_tmp_80_0_2_reg_1755 <= tmp_80_0_2_reg_1755;
                ap_reg_pp0_iter2_tmp_mid2_37_reg_1730 <= tmp_mid2_37_reg_1730;
                    ap_reg_pp0_iter2_tmp_mid2_reg_1681(3 downto 0) <= tmp_mid2_reg_1681(3 downto 0);
                ap_reg_pp0_iter2_tmp_mid2_v_reg_1675 <= tmp_mid2_v_reg_1675;
                ap_reg_pp0_iter3_exitcond_flatten2_reg_1643 <= ap_reg_pp0_iter2_exitcond_flatten2_reg_1643;
                ap_reg_pp0_iter3_j_3_reg_1742 <= ap_reg_pp0_iter2_j_3_reg_1742;
                ap_reg_pp0_iter3_j_mid2_reg_1721 <= ap_reg_pp0_iter2_j_mid2_reg_1721;
                ap_reg_pp0_iter3_tmp_1821_reg_1792 <= tmp_1821_reg_1792;
                ap_reg_pp0_iter3_tmp_1823_reg_1799 <= tmp_1823_reg_1799;
                ap_reg_pp0_iter3_tmp_1825_reg_1807 <= tmp_1825_reg_1807;
                ap_reg_pp0_iter3_tmp_80_0_2_reg_1755 <= ap_reg_pp0_iter2_tmp_80_0_2_reg_1755;
                ap_reg_pp0_iter3_tmp_80_0_3_reg_1835 <= tmp_80_0_3_reg_1835;
                ap_reg_pp0_iter3_tmp_mid2_37_reg_1730 <= ap_reg_pp0_iter2_tmp_mid2_37_reg_1730;
                    ap_reg_pp0_iter3_tmp_mid2_reg_1681(3 downto 0) <= ap_reg_pp0_iter2_tmp_mid2_reg_1681(3 downto 0);
                ap_reg_pp0_iter3_tmp_mid2_v_reg_1675 <= ap_reg_pp0_iter2_tmp_mid2_v_reg_1675;
                ap_reg_pp0_iter4_exitcond_flatten2_reg_1643 <= ap_reg_pp0_iter3_exitcond_flatten2_reg_1643;
                ap_reg_pp0_iter4_j_3_reg_1742 <= ap_reg_pp0_iter3_j_3_reg_1742;
                ap_reg_pp0_iter4_j_mid2_reg_1721 <= ap_reg_pp0_iter3_j_mid2_reg_1721;
                ap_reg_pp0_iter4_tmp_1823_reg_1799 <= ap_reg_pp0_iter3_tmp_1823_reg_1799;
                ap_reg_pp0_iter4_tmp_1825_reg_1807 <= ap_reg_pp0_iter3_tmp_1825_reg_1807;
                ap_reg_pp0_iter4_tmp_80_0_2_reg_1755 <= ap_reg_pp0_iter3_tmp_80_0_2_reg_1755;
                ap_reg_pp0_iter4_tmp_80_0_3_reg_1835 <= ap_reg_pp0_iter3_tmp_80_0_3_reg_1835;
                ap_reg_pp0_iter4_tmp_mid2_37_reg_1730 <= ap_reg_pp0_iter3_tmp_mid2_37_reg_1730;
                    ap_reg_pp0_iter4_tmp_mid2_reg_1681(3 downto 0) <= ap_reg_pp0_iter3_tmp_mid2_reg_1681(3 downto 0);
                ap_reg_pp0_iter4_tmp_mid2_v_reg_1675 <= ap_reg_pp0_iter3_tmp_mid2_v_reg_1675;
                ap_reg_pp0_iter5_exitcond_flatten2_reg_1643 <= ap_reg_pp0_iter4_exitcond_flatten2_reg_1643;
                ap_reg_pp0_iter5_j_3_reg_1742 <= ap_reg_pp0_iter4_j_3_reg_1742;
                ap_reg_pp0_iter5_j_mid2_reg_1721 <= ap_reg_pp0_iter4_j_mid2_reg_1721;
                ap_reg_pp0_iter5_tmp_1823_reg_1799 <= ap_reg_pp0_iter4_tmp_1823_reg_1799;
                ap_reg_pp0_iter5_tmp_1825_reg_1807 <= ap_reg_pp0_iter4_tmp_1825_reg_1807;
                ap_reg_pp0_iter5_tmp_80_0_2_reg_1755 <= ap_reg_pp0_iter4_tmp_80_0_2_reg_1755;
                ap_reg_pp0_iter5_tmp_80_0_3_reg_1835 <= ap_reg_pp0_iter4_tmp_80_0_3_reg_1835;
                ap_reg_pp0_iter5_tmp_mid2_37_reg_1730 <= ap_reg_pp0_iter4_tmp_mid2_37_reg_1730;
                    ap_reg_pp0_iter5_tmp_mid2_reg_1681(3 downto 0) <= ap_reg_pp0_iter4_tmp_mid2_reg_1681(3 downto 0);
                ap_reg_pp0_iter5_tmp_mid2_v_reg_1675 <= ap_reg_pp0_iter4_tmp_mid2_v_reg_1675;
                ap_reg_pp0_iter6_exitcond_flatten2_reg_1643 <= ap_reg_pp0_iter5_exitcond_flatten2_reg_1643;
                ap_reg_pp0_iter6_j_3_reg_1742 <= ap_reg_pp0_iter5_j_3_reg_1742;
                ap_reg_pp0_iter6_j_mid2_reg_1721 <= ap_reg_pp0_iter5_j_mid2_reg_1721;
                ap_reg_pp0_iter6_tmp_1825_reg_1807 <= ap_reg_pp0_iter5_tmp_1825_reg_1807;
                ap_reg_pp0_iter6_tmp_80_0_2_reg_1755 <= ap_reg_pp0_iter5_tmp_80_0_2_reg_1755;
                ap_reg_pp0_iter6_tmp_80_0_3_reg_1835 <= ap_reg_pp0_iter5_tmp_80_0_3_reg_1835;
                ap_reg_pp0_iter6_tmp_mid2_37_reg_1730 <= ap_reg_pp0_iter5_tmp_mid2_37_reg_1730;
                    ap_reg_pp0_iter6_tmp_mid2_reg_1681(3 downto 0) <= ap_reg_pp0_iter5_tmp_mid2_reg_1681(3 downto 0);
                ap_reg_pp0_iter6_tmp_mid2_v_reg_1675 <= ap_reg_pp0_iter5_tmp_mid2_v_reg_1675;
                ap_reg_pp0_iter7_exitcond_flatten2_reg_1643 <= ap_reg_pp0_iter6_exitcond_flatten2_reg_1643;
                ap_reg_pp0_iter7_j_mid2_reg_1721 <= ap_reg_pp0_iter6_j_mid2_reg_1721;
                ap_reg_pp0_iter7_tmp_1825_reg_1807 <= ap_reg_pp0_iter6_tmp_1825_reg_1807;
                ap_reg_pp0_iter7_tmp_80_0_3_reg_1835 <= ap_reg_pp0_iter6_tmp_80_0_3_reg_1835;
                ap_reg_pp0_iter7_tmp_mid2_37_reg_1730 <= ap_reg_pp0_iter6_tmp_mid2_37_reg_1730;
                ap_reg_pp0_iter7_tmp_mid2_v_reg_1675 <= ap_reg_pp0_iter6_tmp_mid2_v_reg_1675;
                ap_reg_pp0_iter8_exitcond_flatten2_reg_1643 <= ap_reg_pp0_iter7_exitcond_flatten2_reg_1643;
                ap_reg_pp0_iter8_j_mid2_reg_1721 <= ap_reg_pp0_iter7_j_mid2_reg_1721;
                ap_reg_pp0_iter8_tmp_mid2_37_reg_1730 <= ap_reg_pp0_iter7_tmp_mid2_37_reg_1730;
                ap_reg_pp0_iter8_tmp_mid2_v_reg_1675 <= ap_reg_pp0_iter7_tmp_mid2_v_reg_1675;
                ap_reg_pp0_iter9_conv_layer1_bias_V_l_reg_2147 <= conv_layer1_bias_V_l_reg_2147;
                ap_reg_pp0_iter9_conv_layer1_weights_31_reg_2142 <= conv_layer1_weights_31_reg_2142;
                ap_reg_pp0_iter9_exitcond_flatten2_reg_1643 <= ap_reg_pp0_iter8_exitcond_flatten2_reg_1643;
                ap_reg_pp0_iter9_j_mid2_reg_1721 <= ap_reg_pp0_iter8_j_mid2_reg_1721;
                ap_reg_pp0_iter9_tmp_mid2_37_reg_1730 <= ap_reg_pp0_iter8_tmp_mid2_37_reg_1730;
                ap_reg_pp0_iter9_tmp_mid2_v_reg_1675 <= ap_reg_pp0_iter8_tmp_mid2_v_reg_1675;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_exitcond_flatten2_reg_1643 <= exitcond_flatten2_reg_1643;
                ap_reg_pp0_iter1_exitcond_flatten_reg_1652 <= exitcond_flatten_reg_1652;
                exitcond_flatten2_reg_1643 <= exitcond_flatten2_fu_577_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter7_exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                conv_layer1_bias_V_l_reg_2147 <= conv_layer1_bias_V_q0;
                conv_layer1_weights_27_reg_2132 <= conv_layer1_weights_5_q0;
                conv_layer1_weights_29_reg_2137 <= conv_layer1_weights_3_q0;
                conv_layer1_weights_31_reg_2142 <= conv_layer1_weights_1_q0;
                p_Val2_24_2_3_reg_2158 <= p_Val2_24_2_3_fu_1605_p2;
                p_Val2_24_3_reg_2168 <= p_Val2_24_3_fu_1611_p2;
                tmp_1853_reg_2163 <= p_Val2_25_2_2_fu_1290_p2(43 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter3_exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                conv_layer1_weights_11_reg_1902 <= conv_layer1_weights_21_q0;
                conv_layer1_weights_13_reg_1907 <= conv_layer1_weights_19_q0;
                p_Val2_24_0_3_reg_1932 <= p_Val2_24_0_3_fu_1557_p2;
                p_Val2_24_1_reg_1942 <= p_Val2_24_1_fu_1563_p2;
                tmp_1845_reg_1937 <= p_Val2_25_0_2_fu_942_p2(43 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter4_exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                conv_layer1_weights_15_reg_1957 <= conv_layer1_weights_17_q0;
                conv_layer1_weights_17_reg_1962 <= conv_layer1_weights_15_q0;
                p_Val2_24_1_1_reg_1987 <= p_Val2_24_1_1_fu_1569_p2;
                p_Val2_24_1_2_reg_1997 <= p_Val2_24_1_2_fu_1575_p2;
                tmp_1847_reg_1992 <= p_Val2_25_1_fu_1040_p2(43 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter5_exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                conv_layer1_weights_19_reg_2012 <= conv_layer1_weights_13_q0;
                conv_layer1_weights_21_reg_2017 <= conv_layer1_weights_11_q0;
                p_Val2_24_1_3_reg_2042 <= p_Val2_24_1_3_fu_1581_p2;
                p_Val2_24_2_reg_2052 <= p_Val2_24_2_fu_1587_p2;
                tmp_1849_reg_2047 <= p_Val2_25_1_2_fu_1127_p2(43 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                conv_layer1_weights_1_reg_1767 <= conv_layer1_weights_31_q0;
                conv_layer1_weights_3_reg_1772 <= conv_layer1_weights_29_q0;
                conv_layer1_weights_5_reg_1777 <= conv_layer1_weights_27_q0;
                tmp_1821_reg_1792 <= tmp_1821_fu_749_p3;
                tmp_1823_reg_1799 <= tmp_1823_fu_774_p3;
                tmp_1825_reg_1807 <= tmp_1825_fu_799_p3;
                tmp_80_0_3_reg_1835 <= tmp_80_0_3_fu_818_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter6_exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                conv_layer1_weights_23_reg_2067 <= conv_layer1_weights_9_q0;
                conv_layer1_weights_25_reg_2072 <= conv_layer1_weights_7_q0;
                p_Val2_24_2_1_reg_2107 <= p_Val2_24_2_1_fu_1593_p2;
                p_Val2_24_2_2_reg_2117 <= p_Val2_24_2_2_fu_1599_p2;
                tmp_1851_reg_2112 <= p_Val2_25_2_fu_1214_p2(43 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                conv_layer1_weights_7_reg_1847 <= conv_layer1_weights_25_q0;
                conv_layer1_weights_9_reg_1852 <= conv_layer1_weights_23_q0;
                p_Val2_24_0_1_reg_1872 <= p_Val2_24_0_1_fu_1545_p2;
                p_Val2_24_0_2_reg_1887 <= p_Val2_24_0_2_fu_1551_p2;
                tmp_96_reg_1877 <= p_Val2_1_fu_1538_p2(42 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond5_mid_reg_1714 <= exitcond5_mid_fu_647_p2;
                i_mid_reg_1668 <= i_mid_fu_615_p3;
                j_mid2_reg_1721 <= j_mid2_fu_664_p3;
                tmp_80_0_2_reg_1755 <= tmp_80_0_2_fu_712_p2;
                    tmp_mid2_reg_1681(3 downto 0) <= tmp_mid2_fu_629_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_fu_577_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten_reg_1652 <= exitcond_flatten_fu_589_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter5_exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then
                image_V_0_load_10_reg_2062 <= image_V_0_q10;
                image_V_0_load_9_reg_2057 <= image_V_0_q9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter6_exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then
                image_V_0_load_11_reg_2122 <= image_V_0_q11;
                image_V_0_load_12_reg_2127 <= image_V_0_q12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter7_exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then
                image_V_0_load_13_reg_2173 <= image_V_0_q13;
                image_V_0_load_14_reg_2178 <= image_V_0_q14;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter8_exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then
                image_V_0_load_15_reg_2198 <= image_V_0_q15;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                image_V_0_load_1_reg_1825 <= image_V_0_q1;
                image_V_0_load_2_reg_1830 <= image_V_0_q2;
                image_V_0_load_reg_1820 <= image_V_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                image_V_0_load_3_reg_1892 <= image_V_0_q3;
                image_V_0_load_4_reg_1897 <= image_V_0_q4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter3_exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                image_V_0_load_5_reg_1947 <= image_V_0_q5;
                image_V_0_load_6_reg_1952 <= image_V_0_q6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter4_exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                image_V_0_load_7_reg_2002 <= image_V_0_q7;
                image_V_0_load_8_reg_2007 <= image_V_0_q8;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                j_3_reg_1742 <= j_3_fu_693_p2;
                tmp_mid2_37_reg_1730 <= tmp_mid2_37_fu_672_p3;
                tmp_mid2_v_reg_1675 <= tmp_mid2_v_fu_622_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter8_exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_24_3_1_reg_2183 <= p_Val2_24_3_1_fu_1617_p2;
                p_Val2_24_3_2_reg_2193 <= p_Val2_24_3_2_fu_1623_p2;
                tmp_1855_reg_2188 <= p_Val2_25_3_fu_1355_p2(43 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter9_exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_24_3_3_reg_2203 <= p_Val2_24_3_3_fu_1629_p2;
                tmp_1857_reg_2208 <= p_Val2_25_3_2_fu_1417_p2(43 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter10_exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_cast_reg_2218 <= p_Val2_cast_fu_1490_p2;
                tmp_i_reg_2223 <= tmp_i_fu_1496_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter10_exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then
                tmp_1826_reg_2213 <= grp_fu_1635_p3;
            end if;
        end if;
    end process;
    tmp_mid2_reg_1681(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_pp0_iter2_tmp_mid2_reg_1681(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_pp0_iter3_tmp_mid2_reg_1681(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_pp0_iter4_tmp_mid2_reg_1681(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_pp0_iter5_tmp_mid2_reg_1681(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    ap_reg_pp0_iter6_tmp_mid2_reg_1681(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten2_fu_577_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter12)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (exitcond_flatten2_fu_577_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (exitcond_flatten2_fu_577_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    a_V_i_fu_1527_p3 <= 
        p_Val2_cast_reg_2218 when (tmp_i_reg_2223(0) = '1') else 
        ap_const_lv23_0;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten2_fu_577_p2)
    begin
        if ((exitcond_flatten2_fu_577_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_filter_phi_fu_534_p4_assign_proc : process(filter_reg_530, ap_reg_pp0_iter1_exitcond_flatten2_reg_1643, tmp_mid2_v_reg_1675, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_reg_pp0_iter1_exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_filter_phi_fu_534_p4 <= tmp_mid2_v_reg_1675;
        else 
            ap_phi_mux_filter_phi_fu_534_p4 <= filter_reg_530;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_557_p4_assign_proc : process(i_reg_553, ap_reg_pp0_iter1_exitcond_flatten2_reg_1643, tmp_mid2_37_reg_1730, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_reg_pp0_iter1_exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_i_phi_fu_557_p4 <= tmp_mid2_37_reg_1730;
        else 
            ap_phi_mux_i_phi_fu_557_p4 <= i_reg_553;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_569_p4_assign_proc : process(j_reg_565, ap_reg_pp0_iter1_exitcond_flatten2_reg_1643, j_3_reg_1742, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_reg_pp0_iter1_exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_j_phi_fu_569_p4 <= j_3_reg_1742;
        else 
            ap_phi_mux_j_phi_fu_569_p4 <= j_reg_565;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer1_bias_V_address0 <= ap_reg_pp0_iter6_tmp_mid2_reg_1681(3 - 1 downto 0);

    conv_layer1_bias_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            conv_layer1_bias_V_ce0 <= ap_const_logic_1;
        else 
            conv_layer1_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer1_weights_11_address0 <= ap_reg_pp0_iter4_tmp_mid2_reg_1681(3 - 1 downto 0);

    conv_layer1_weights_11_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            conv_layer1_weights_11_ce0 <= ap_const_logic_1;
        else 
            conv_layer1_weights_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer1_weights_13_address0 <= ap_reg_pp0_iter4_tmp_mid2_reg_1681(3 - 1 downto 0);

    conv_layer1_weights_13_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            conv_layer1_weights_13_ce0 <= ap_const_logic_1;
        else 
            conv_layer1_weights_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer1_weights_15_address0 <= ap_reg_pp0_iter3_tmp_mid2_reg_1681(3 - 1 downto 0);

    conv_layer1_weights_15_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            conv_layer1_weights_15_ce0 <= ap_const_logic_1;
        else 
            conv_layer1_weights_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer1_weights_17_address0 <= ap_reg_pp0_iter3_tmp_mid2_reg_1681(3 - 1 downto 0);

    conv_layer1_weights_17_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            conv_layer1_weights_17_ce0 <= ap_const_logic_1;
        else 
            conv_layer1_weights_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer1_weights_19_address0 <= ap_reg_pp0_iter2_tmp_mid2_reg_1681(3 - 1 downto 0);

    conv_layer1_weights_19_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            conv_layer1_weights_19_ce0 <= ap_const_logic_1;
        else 
            conv_layer1_weights_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer1_weights_1_address0 <= ap_reg_pp0_iter6_tmp_mid2_reg_1681(3 - 1 downto 0);

    conv_layer1_weights_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            conv_layer1_weights_1_ce0 <= ap_const_logic_1;
        else 
            conv_layer1_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer1_weights_21_address0 <= ap_reg_pp0_iter2_tmp_mid2_reg_1681(3 - 1 downto 0);

    conv_layer1_weights_21_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            conv_layer1_weights_21_ce0 <= ap_const_logic_1;
        else 
            conv_layer1_weights_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer1_weights_23_address0 <= tmp_mid2_reg_1681(3 - 1 downto 0);

    conv_layer1_weights_23_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            conv_layer1_weights_23_ce0 <= ap_const_logic_1;
        else 
            conv_layer1_weights_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer1_weights_25_address0 <= tmp_mid2_reg_1681(3 - 1 downto 0);

    conv_layer1_weights_25_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            conv_layer1_weights_25_ce0 <= ap_const_logic_1;
        else 
            conv_layer1_weights_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer1_weights_27_address0 <= tmp_mid2_fu_629_p1(3 - 1 downto 0);

    conv_layer1_weights_27_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_layer1_weights_27_ce0 <= ap_const_logic_1;
        else 
            conv_layer1_weights_27_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer1_weights_29_address0 <= tmp_mid2_fu_629_p1(3 - 1 downto 0);

    conv_layer1_weights_29_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_layer1_weights_29_ce0 <= ap_const_logic_1;
        else 
            conv_layer1_weights_29_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer1_weights_31_address0 <= tmp_mid2_fu_629_p1(3 - 1 downto 0);

    conv_layer1_weights_31_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_layer1_weights_31_ce0 <= ap_const_logic_1;
        else 
            conv_layer1_weights_31_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer1_weights_3_address0 <= ap_reg_pp0_iter6_tmp_mid2_reg_1681(3 - 1 downto 0);

    conv_layer1_weights_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            conv_layer1_weights_3_ce0 <= ap_const_logic_1;
        else 
            conv_layer1_weights_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer1_weights_5_address0 <= ap_reg_pp0_iter6_tmp_mid2_reg_1681(3 - 1 downto 0);

    conv_layer1_weights_5_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            conv_layer1_weights_5_ce0 <= ap_const_logic_1;
        else 
            conv_layer1_weights_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer1_weights_7_address0 <= ap_reg_pp0_iter5_tmp_mid2_reg_1681(3 - 1 downto 0);

    conv_layer1_weights_7_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            conv_layer1_weights_7_ce0 <= ap_const_logic_1;
        else 
            conv_layer1_weights_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer1_weights_9_address0 <= ap_reg_pp0_iter5_tmp_mid2_reg_1681(3 - 1 downto 0);

    conv_layer1_weights_9_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            conv_layer1_weights_9_ce0 <= ap_const_logic_1;
        else 
            conv_layer1_weights_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond5_mid_fu_647_p2 <= (not_exitcond_flatten_fu_636_p2 and exitcond_fu_641_p2);
    exitcond_flatten2_fu_577_p2 <= "1" when (indvar_flatten2_reg_519 = ap_const_lv13_1A48) else "0";
    exitcond_flatten_fu_589_p2 <= "1" when (indvar_flatten_reg_542 = ap_const_lv10_349) else "0";
    exitcond_fu_641_p2 <= "1" when (ap_phi_mux_j_phi_fu_569_p4 = ap_const_lv5_1D) else "0";
    filter_2_fu_609_p2 <= std_logic_vector(unsigned(ap_phi_mux_filter_phi_fu_534_p4) + unsigned(ap_const_lv4_1));
    grp_fu_1635_p0 <= grp_fu_1635_p00(5 - 1 downto 0);
    grp_fu_1635_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter10_tmp_mid2_37_reg_1730),10));
    grp_fu_1635_p1 <= ap_const_lv10_1D(6 - 1 downto 0);
    grp_fu_1635_p2 <= grp_fu_1635_p20(5 - 1 downto 0);
    grp_fu_1635_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter10_j_mid2_reg_1721),10));
    i_8_dup_fu_653_p2 <= std_logic_vector(unsigned(i_mid_fu_615_p3) + unsigned(ap_const_lv5_1));
    i_8_mid1_fu_731_p2 <= std_logic_vector(unsigned(i_mid_reg_1668) + unsigned(ap_const_lv5_2));
    i_mid_fu_615_p3 <= 
        ap_const_lv5_0 when (exitcond_flatten_reg_1652(0) = '1') else 
        ap_phi_mux_i_phi_fu_557_p4;
    i_s_fu_736_p2 <= std_logic_vector(unsigned(i_reg_553) + unsigned(ap_const_lv5_1));
    image_V_0_address0 <= tmp_1828_fu_688_p1(10 - 1 downto 0);
    image_V_0_address1 <= tmp_1832_fu_707_p1(10 - 1 downto 0);
    image_V_0_address10 <= tmp_1838_fu_998_p1(10 - 1 downto 0);
    image_V_0_address11 <= tmp_1843_fu_1085_p1(10 - 1 downto 0);
    image_V_0_address12 <= tmp_1831_fu_1074_p1(10 - 1 downto 0);
    image_V_0_address13 <= tmp_1835_fu_1161_p1(10 - 1 downto 0);
    image_V_0_address14 <= tmp_1839_fu_1172_p1(10 - 1 downto 0);
    image_V_0_address15 <= tmp_1844_fu_1248_p1(10 - 1 downto 0);
    image_V_0_address2 <= tmp_1836_fu_726_p1(10 - 1 downto 0);
    image_V_0_address3 <= tmp_1841_fu_830_p1(10 - 1 downto 0);
    image_V_0_address4 <= tmp_1829_fu_813_p1(10 - 1 downto 0);
    image_V_0_address5 <= tmp_1833_fu_853_p1(10 - 1 downto 0);
    image_V_0_address6 <= tmp_1837_fu_876_p1(10 - 1 downto 0);
    image_V_0_address7 <= tmp_1842_fu_954_p1(10 - 1 downto 0);
    image_V_0_address8 <= tmp_1830_fu_896_p1(10 - 1 downto 0);
    image_V_0_address9 <= tmp_1834_fu_987_p1(10 - 1 downto 0);

    image_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            image_V_0_ce0 <= ap_const_logic_1;
        else 
            image_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_V_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            image_V_0_ce1 <= ap_const_logic_1;
        else 
            image_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    image_V_0_ce10_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            image_V_0_ce10 <= ap_const_logic_1;
        else 
            image_V_0_ce10 <= ap_const_logic_0;
        end if; 
    end process;


    image_V_0_ce11_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            image_V_0_ce11 <= ap_const_logic_1;
        else 
            image_V_0_ce11 <= ap_const_logic_0;
        end if; 
    end process;


    image_V_0_ce12_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            image_V_0_ce12 <= ap_const_logic_1;
        else 
            image_V_0_ce12 <= ap_const_logic_0;
        end if; 
    end process;


    image_V_0_ce13_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            image_V_0_ce13 <= ap_const_logic_1;
        else 
            image_V_0_ce13 <= ap_const_logic_0;
        end if; 
    end process;


    image_V_0_ce14_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            image_V_0_ce14 <= ap_const_logic_1;
        else 
            image_V_0_ce14 <= ap_const_logic_0;
        end if; 
    end process;


    image_V_0_ce15_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            image_V_0_ce15 <= ap_const_logic_1;
        else 
            image_V_0_ce15 <= ap_const_logic_0;
        end if; 
    end process;


    image_V_0_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            image_V_0_ce2 <= ap_const_logic_1;
        else 
            image_V_0_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    image_V_0_ce3_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            image_V_0_ce3 <= ap_const_logic_1;
        else 
            image_V_0_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    image_V_0_ce4_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            image_V_0_ce4 <= ap_const_logic_1;
        else 
            image_V_0_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    image_V_0_ce5_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            image_V_0_ce5 <= ap_const_logic_1;
        else 
            image_V_0_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    image_V_0_ce6_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            image_V_0_ce6 <= ap_const_logic_1;
        else 
            image_V_0_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    image_V_0_ce7_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            image_V_0_ce7 <= ap_const_logic_1;
        else 
            image_V_0_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    image_V_0_ce8_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            image_V_0_ce8 <= ap_const_logic_1;
        else 
            image_V_0_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    image_V_0_ce9_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            image_V_0_ce9 <= ap_const_logic_1;
        else 
            image_V_0_ce9 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next2_fu_583_p2 <= std_logic_vector(unsigned(indvar_flatten2_reg_519) + unsigned(ap_const_lv13_1));
    indvar_flatten_next_fu_601_p3 <= 
        ap_const_lv10_1 when (exitcond_flatten_fu_589_p2(0) = '1') else 
        indvar_flatten_op_fu_595_p2;
    indvar_flatten_op_fu_595_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_542) + unsigned(ap_const_lv10_1));
    j_3_fu_693_p2 <= std_logic_vector(unsigned(j_mid2_fu_664_p3) + unsigned(ap_const_lv5_1));
    j_mid2_fu_664_p3 <= 
        ap_const_lv5_0 when (tmp_s_fu_659_p2(0) = '1') else 
        ap_phi_mux_j_phi_fu_569_p4;
    not_exitcond_flatten_fu_636_p2 <= (exitcond_flatten_reg_1652 xor ap_const_lv1_1);
    output_V_address0 <= tmp_1903_cast_fu_1522_p1(13 - 1 downto 0);

    output_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_V_i_fu_1527_p3),24));

    output_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter11_exitcond_flatten2_reg_1643, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_reg_pp0_iter11_exitcond_flatten2_reg_1643 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_1_fu_1538_p1 <= p_Val2_1_fu_1538_p10(20 - 1 downto 0);
    p_Val2_1_fu_1538_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_V_0_load_reg_1820),43));
        p_Val2_24_0_1_cast_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_24_0_1_reg_1872),44));

    p_Val2_24_0_1_fu_1545_p1 <= p_Val2_24_0_1_fu_1545_p10(20 - 1 downto 0);
    p_Val2_24_0_1_fu_1545_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_V_0_load_1_reg_1825),43));
        p_Val2_24_0_2_cast_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_24_0_2_reg_1887),44));

    p_Val2_24_0_2_fu_1551_p1 <= p_Val2_24_0_2_fu_1551_p10(20 - 1 downto 0);
    p_Val2_24_0_2_fu_1551_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_V_0_load_2_reg_1830),43));
        p_Val2_24_0_3_cast_fu_1003_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_24_0_3_reg_1932),44));

    p_Val2_24_0_3_fu_1557_p1 <= p_Val2_24_0_3_fu_1557_p10(20 - 1 downto 0);
    p_Val2_24_0_3_fu_1557_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_V_0_load_3_reg_1892),43));
        p_Val2_24_1_1_cast_fu_1090_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_24_1_1_reg_1987),44));

    p_Val2_24_1_1_fu_1569_p1 <= p_Val2_24_1_1_fu_1569_p10(20 - 1 downto 0);
    p_Val2_24_1_1_fu_1569_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_V_0_load_5_reg_1947),43));
        p_Val2_24_1_2_cast_fu_1106_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_24_1_2_reg_1997),44));

    p_Val2_24_1_2_fu_1575_p1 <= p_Val2_24_1_2_fu_1575_p10(20 - 1 downto 0);
    p_Val2_24_1_2_fu_1575_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_V_0_load_6_reg_1952),43));
        p_Val2_24_1_3_cast_fu_1177_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_24_1_3_reg_2042),44));

    p_Val2_24_1_3_fu_1581_p1 <= p_Val2_24_1_3_fu_1581_p10(20 - 1 downto 0);
    p_Val2_24_1_3_fu_1581_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_V_0_load_7_reg_2002),43));
        p_Val2_24_1_cast_fu_1019_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_24_1_reg_1942),44));

    p_Val2_24_1_fu_1563_p1 <= p_Val2_24_1_fu_1563_p10(20 - 1 downto 0);
    p_Val2_24_1_fu_1563_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_V_0_load_4_reg_1897),43));
        p_Val2_24_2_1_cast_fu_1253_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_24_2_1_reg_2107),44));

    p_Val2_24_2_1_fu_1593_p1 <= p_Val2_24_2_1_fu_1593_p10(20 - 1 downto 0);
    p_Val2_24_2_1_fu_1593_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_V_0_load_9_reg_2057),43));
        p_Val2_24_2_2_cast_fu_1269_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_24_2_2_reg_2117),44));

    p_Val2_24_2_2_fu_1599_p1 <= p_Val2_24_2_2_fu_1599_p10(20 - 1 downto 0);
    p_Val2_24_2_2_fu_1599_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_V_0_load_10_reg_2062),43));
        p_Val2_24_2_3_cast_fu_1318_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_24_2_3_reg_2158),44));

    p_Val2_24_2_3_fu_1605_p1 <= p_Val2_24_2_3_fu_1605_p10(20 - 1 downto 0);
    p_Val2_24_2_3_fu_1605_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_V_0_load_11_reg_2122),43));
        p_Val2_24_2_cast_fu_1193_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_24_2_reg_2052),44));

    p_Val2_24_2_fu_1587_p1 <= p_Val2_24_2_fu_1587_p10(20 - 1 downto 0);
    p_Val2_24_2_fu_1587_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_V_0_load_8_reg_2007),43));
        p_Val2_24_3_1_cast_fu_1380_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_24_3_1_reg_2183),44));

    p_Val2_24_3_1_fu_1617_p1 <= p_Val2_24_3_1_fu_1617_p10(20 - 1 downto 0);
    p_Val2_24_3_1_fu_1617_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_V_0_load_13_reg_2173),43));
        p_Val2_24_3_2_cast_fu_1396_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_24_3_2_reg_2193),44));

    p_Val2_24_3_2_fu_1623_p1 <= p_Val2_24_3_2_fu_1623_p10(20 - 1 downto 0);
    p_Val2_24_3_2_fu_1623_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_V_0_load_14_reg_2178),43));
        p_Val2_24_3_3_cast_fu_1448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_24_3_3_reg_2203),44));

    p_Val2_24_3_3_fu_1629_p1 <= p_Val2_24_3_3_fu_1629_p10(20 - 1 downto 0);
    p_Val2_24_3_3_fu_1629_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_V_0_load_15_reg_2198),43));
        p_Val2_24_3_cast_fu_1334_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_24_3_reg_2168),44));

    p_Val2_24_3_fu_1611_p1 <= p_Val2_24_3_fu_1611_p10(20 - 1 downto 0);
    p_Val2_24_3_fu_1611_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_V_0_load_12_reg_2127),43));
    p_Val2_25_0_1_fu_915_p2 <= std_logic_vector(signed(tmp_86_0_1_fu_911_p1) + signed(p_Val2_24_0_1_cast_fu_901_p1));
    p_Val2_25_0_2_fu_942_p2 <= std_logic_vector(unsigned(tmp_86_0_2_fu_934_p3) + unsigned(p_Val2_24_0_2_cast_fu_921_p1));
    p_Val2_25_0_3_fu_1013_p2 <= std_logic_vector(unsigned(tmp_86_0_3_fu_1006_p3) + unsigned(p_Val2_24_0_3_cast_fu_1003_p1));
    p_Val2_25_1_1_fu_1100_p2 <= std_logic_vector(unsigned(tmp_86_1_1_fu_1093_p3) + unsigned(p_Val2_24_1_1_cast_fu_1090_p1));
    p_Val2_25_1_2_fu_1127_p2 <= std_logic_vector(unsigned(tmp_86_1_2_fu_1119_p3) + unsigned(p_Val2_24_1_2_cast_fu_1106_p1));
    p_Val2_25_1_3_fu_1187_p2 <= std_logic_vector(unsigned(tmp_86_1_3_fu_1180_p3) + unsigned(p_Val2_24_1_3_cast_fu_1177_p1));
    p_Val2_25_1_fu_1040_p2 <= std_logic_vector(unsigned(tmp_86_1_fu_1032_p3) + unsigned(p_Val2_24_1_cast_fu_1019_p1));
    p_Val2_25_2_1_fu_1263_p2 <= std_logic_vector(unsigned(tmp_86_2_1_fu_1256_p3) + unsigned(p_Val2_24_2_1_cast_fu_1253_p1));
    p_Val2_25_2_2_fu_1290_p2 <= std_logic_vector(unsigned(tmp_86_2_2_fu_1282_p3) + unsigned(p_Val2_24_2_2_cast_fu_1269_p1));
    p_Val2_25_2_3_fu_1328_p2 <= std_logic_vector(unsigned(tmp_86_2_3_fu_1321_p3) + unsigned(p_Val2_24_2_3_cast_fu_1318_p1));
    p_Val2_25_2_fu_1214_p2 <= std_logic_vector(unsigned(tmp_86_2_fu_1206_p3) + unsigned(p_Val2_24_2_cast_fu_1193_p1));
    p_Val2_25_3_1_fu_1390_p2 <= std_logic_vector(unsigned(tmp_86_3_1_fu_1383_p3) + unsigned(p_Val2_24_3_1_cast_fu_1380_p1));
    p_Val2_25_3_2_fu_1417_p2 <= std_logic_vector(unsigned(tmp_86_3_2_fu_1409_p3) + unsigned(p_Val2_24_3_2_cast_fu_1396_p1));
    p_Val2_25_3_3_fu_1458_p2 <= std_logic_vector(unsigned(tmp_86_3_3_fu_1451_p3) + unsigned(p_Val2_24_3_3_cast_fu_1448_p1));
    p_Val2_25_3_fu_1355_p2 <= std_logic_vector(unsigned(tmp_86_3_fu_1347_p3) + unsigned(p_Val2_24_3_cast_fu_1334_p1));
    p_Val2_cast_fu_1490_p2 <= std_logic_vector(unsigned(tmp_3_fu_1474_p4) + unsigned(tmp_14_mid2_fu_1439_p1));
        p_Val2_cast_mid2_fu_1436_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_reg_pp0_iter10_conv_layer1_bias_V_l_reg_2147),24));

    p_Val2_s_fu_1484_p2 <= std_logic_vector(signed(p_Val2_cast_mid2_fu_1436_p1) + signed(sum_V_3_3_fu_1464_p4));
    sum_V_3_3_fu_1464_p4 <= p_Val2_25_3_3_fu_1458_p2(43 downto 20);
    tmp_100_fu_992_p3 <= (ap_reg_pp0_iter4_tmp_1823_reg_1799 & ap_reg_pp0_iter4_tmp_80_0_2_reg_1755);
    tmp_101_fu_1166_p3 <= (ap_reg_pp0_iter6_tmp_1825_reg_1807 & ap_reg_pp0_iter6_tmp_80_0_2_reg_1755);
    tmp_102_fu_823_p3 <= (tmp_mid2_37_reg_1730 & tmp_80_0_3_fu_818_p2);
    tmp_103_fu_948_p3 <= (ap_reg_pp0_iter3_tmp_1821_reg_1792 & ap_reg_pp0_iter3_tmp_80_0_3_reg_1835);
    tmp_104_fu_1079_p3 <= (ap_reg_pp0_iter5_tmp_1823_reg_1799 & ap_reg_pp0_iter5_tmp_80_0_3_reg_1835);
    tmp_105_fu_1242_p3 <= (ap_reg_pp0_iter7_tmp_1825_reg_1807 & ap_reg_pp0_iter7_tmp_80_0_3_reg_1835);
        tmp_14_mid2_fu_1439_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_reg_pp0_iter10_conv_layer1_bias_V_l_reg_2147),23));

    tmp_1820_fu_742_p3 <= 
        ap_const_lv5_1 when (ap_reg_pp0_iter1_exitcond_flatten_reg_1652(0) = '1') else 
        i_s_fu_736_p2;
    tmp_1821_fu_749_p3 <= 
        i_8_mid1_fu_731_p2 when (exitcond5_mid_reg_1714(0) = '1') else 
        tmp_1820_fu_742_p3;
    tmp_1822_fu_767_p3 <= 
        ap_const_lv5_2 when (ap_reg_pp0_iter1_exitcond_flatten_reg_1652(0) = '1') else 
        tmp_77_s_fu_761_p2;
    tmp_1823_fu_774_p3 <= 
        tmp_77_2_mid1_fu_756_p2 when (exitcond5_mid_reg_1714(0) = '1') else 
        tmp_1822_fu_767_p3;
    tmp_1824_fu_792_p3 <= 
        ap_const_lv5_3 when (ap_reg_pp0_iter1_exitcond_flatten_reg_1652(0) = '1') else 
        tmp_77_1_fu_786_p2;
    tmp_1825_fu_799_p3 <= 
        tmp_77_3_mid1_fu_781_p2 when (exitcond5_mid_reg_1714(0) = '1') else 
        tmp_1824_fu_792_p3;
    tmp_1827_fu_1516_p2 <= std_logic_vector(unsigned(tmp_mid2_cast_fu_1502_p1) + unsigned(tmp_1902_cast_fu_1512_p1));
    tmp_1828_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_88_fu_680_p3),64));
    tmp_1829_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_89_fu_806_p3),64));
    tmp_1830_fu_896_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_90_fu_890_p3),64));
    tmp_1831_fu_1074_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_91_fu_1068_p3),64));
    tmp_1832_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_92_fu_699_p3),64));
    tmp_1833_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_93_fu_847_p3),64));
    tmp_1834_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_94_fu_981_p3),64));
    tmp_1835_fu_1161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_95_fu_1155_p3),64));
    tmp_1836_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_98_fu_718_p3),64));
    tmp_1837_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_99_fu_870_p3),64));
    tmp_1838_fu_998_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_100_fu_992_p3),64));
    tmp_1839_fu_1172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_101_fu_1166_p3),64));
    tmp_1840_fu_924_p4 <= p_Val2_25_0_1_fu_915_p2(43 downto 20);
    tmp_1841_fu_830_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_102_fu_823_p3),64));
    tmp_1842_fu_954_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_103_fu_948_p3),64));
    tmp_1843_fu_1085_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_104_fu_1079_p3),64));
    tmp_1844_fu_1248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_105_fu_1242_p3),64));
    tmp_1846_fu_1022_p4 <= p_Val2_25_0_3_fu_1013_p2(43 downto 20);
    tmp_1848_fu_1109_p4 <= p_Val2_25_1_1_fu_1100_p2(43 downto 20);
    tmp_1850_fu_1196_p4 <= p_Val2_25_1_3_fu_1187_p2(43 downto 20);
    tmp_1852_fu_1272_p4 <= p_Val2_25_2_1_fu_1263_p2(43 downto 20);
    tmp_1854_fu_1337_p4 <= p_Val2_25_2_3_fu_1328_p2(43 downto 20);
    tmp_1856_fu_1399_p4 <= p_Val2_25_3_1_fu_1390_p2(43 downto 20);
    tmp_1902_cast_fu_1512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_1505_p3),14));
    tmp_1903_cast_fu_1522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1827_fu_1516_p2),64));
    tmp_3_fu_1474_p4 <= p_Val2_25_3_3_fu_1458_p2(42 downto 20);
    tmp_77_1_fu_786_p2 <= std_logic_vector(unsigned(i_reg_553) + unsigned(ap_const_lv5_3));
    tmp_77_2_mid1_fu_756_p2 <= std_logic_vector(unsigned(i_mid_reg_1668) + unsigned(ap_const_lv5_3));
    tmp_77_3_mid1_fu_781_p2 <= std_logic_vector(unsigned(i_mid_reg_1668) + unsigned(ap_const_lv5_4));
    tmp_77_s_fu_761_p2 <= std_logic_vector(unsigned(i_reg_553) + unsigned(ap_const_lv5_2));
    tmp_80_0_2_fu_712_p2 <= std_logic_vector(unsigned(j_mid2_fu_664_p3) + unsigned(ap_const_lv5_2));
    tmp_80_0_3_fu_818_p2 <= std_logic_vector(unsigned(j_mid2_reg_1721) + unsigned(ap_const_lv5_3));
        tmp_86_0_1_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_97_fu_904_p3),44));

    tmp_86_0_2_fu_934_p3 <= (tmp_1840_fu_924_p4 & ap_const_lv20_0);
    tmp_86_0_3_fu_1006_p3 <= (tmp_1845_reg_1937 & ap_const_lv20_0);
    tmp_86_1_1_fu_1093_p3 <= (tmp_1847_reg_1992 & ap_const_lv20_0);
    tmp_86_1_2_fu_1119_p3 <= (tmp_1848_fu_1109_p4 & ap_const_lv20_0);
    tmp_86_1_3_fu_1180_p3 <= (tmp_1849_reg_2047 & ap_const_lv20_0);
    tmp_86_1_fu_1032_p3 <= (tmp_1846_fu_1022_p4 & ap_const_lv20_0);
    tmp_86_2_1_fu_1256_p3 <= (tmp_1851_reg_2112 & ap_const_lv20_0);
    tmp_86_2_2_fu_1282_p3 <= (tmp_1852_fu_1272_p4 & ap_const_lv20_0);
    tmp_86_2_3_fu_1321_p3 <= (tmp_1853_reg_2163 & ap_const_lv20_0);
    tmp_86_2_fu_1206_p3 <= (tmp_1850_fu_1196_p4 & ap_const_lv20_0);
    tmp_86_3_1_fu_1383_p3 <= (tmp_1855_reg_2188 & ap_const_lv20_0);
    tmp_86_3_2_fu_1409_p3 <= (tmp_1856_fu_1399_p4 & ap_const_lv20_0);
    tmp_86_3_3_fu_1451_p3 <= (tmp_1857_reg_2208 & ap_const_lv20_0);
    tmp_86_3_fu_1347_p3 <= (tmp_1854_fu_1337_p4 & ap_const_lv20_0);
    tmp_88_fu_680_p3 <= (tmp_mid2_37_fu_672_p3 & j_mid2_fu_664_p3);
    tmp_89_fu_806_p3 <= (tmp_1821_fu_749_p3 & j_mid2_reg_1721);
    tmp_90_fu_890_p3 <= (ap_reg_pp0_iter3_tmp_1823_reg_1799 & ap_reg_pp0_iter3_j_mid2_reg_1721);
    tmp_91_fu_1068_p3 <= (ap_reg_pp0_iter5_tmp_1825_reg_1807 & ap_reg_pp0_iter5_j_mid2_reg_1721);
    tmp_92_fu_699_p3 <= (tmp_mid2_37_fu_672_p3 & j_3_fu_693_p2);
    tmp_93_fu_847_p3 <= (tmp_1821_reg_1792 & ap_reg_pp0_iter2_j_3_reg_1742);
    tmp_94_fu_981_p3 <= (ap_reg_pp0_iter4_tmp_1823_reg_1799 & ap_reg_pp0_iter4_j_3_reg_1742);
    tmp_95_fu_1155_p3 <= (ap_reg_pp0_iter6_tmp_1825_reg_1807 & ap_reg_pp0_iter6_j_3_reg_1742);
    tmp_97_fu_904_p3 <= (tmp_96_reg_1877 & ap_const_lv20_0);
    tmp_98_fu_718_p3 <= (tmp_mid2_37_fu_672_p3 & tmp_80_0_2_fu_712_p2);
    tmp_99_fu_870_p3 <= (tmp_1821_reg_1792 & ap_reg_pp0_iter2_tmp_80_0_2_reg_1755);
    tmp_fu_1505_p3 <= (tmp_1826_reg_2213 & ap_const_lv3_0);
    tmp_i_fu_1496_p2 <= "1" when (signed(p_Val2_s_fu_1484_p2) > signed(ap_const_lv24_0)) else "0";
    tmp_mid2_37_fu_672_p3 <= 
        i_8_dup_fu_653_p2 when (exitcond5_mid_fu_647_p2(0) = '1') else 
        i_mid_fu_615_p3;
    tmp_mid2_cast_fu_1502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter11_tmp_mid2_v_reg_1675),14));
    tmp_mid2_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_mid2_v_fu_622_p3),64));
    tmp_mid2_v_fu_622_p3 <= 
        filter_2_fu_609_p2 when (exitcond_flatten_reg_1652(0) = '1') else 
        ap_phi_mux_filter_phi_fu_534_p4;
    tmp_s_fu_659_p2 <= (exitcond_flatten_reg_1652 or exitcond5_mid_fu_647_p2);
end behav;
