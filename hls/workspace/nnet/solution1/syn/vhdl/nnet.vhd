-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nnet is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_layer1_out_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv_layer1_out_V_ce0 : OUT STD_LOGIC;
    conv_layer1_out_V_we0 : OUT STD_LOGIC;
    conv_layer1_out_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    conv_layer1_out_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    conv_layer2_out_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_layer2_out_V_ce0 : OUT STD_LOGIC;
    conv_layer2_out_V_we0 : OUT STD_LOGIC;
    conv_layer2_out_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    conv_layer2_out_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    pool_layer1_out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pool_layer1_out_V_ce0 : OUT STD_LOGIC;
    pool_layer1_out_V_we0 : OUT STD_LOGIC;
    pool_layer1_out_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    pool_layer1_out_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    pool_layer2_out_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    pool_layer2_out_V_ce0 : OUT STD_LOGIC;
    pool_layer2_out_V_we0 : OUT STD_LOGIC;
    pool_layer2_out_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    pool_layer2_out_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    flatten_out_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    flatten_out_V_ce0 : OUT STD_LOGIC;
    flatten_out_V_we0 : OUT STD_LOGIC;
    flatten_out_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    flatten_out_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    fc_layer1_out_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    fc_layer1_out_V_ce0 : OUT STD_LOGIC;
    fc_layer1_out_V_we0 : OUT STD_LOGIC;
    fc_layer1_out_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    fc_layer1_out_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    fc_layer2_out_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    fc_layer2_out_V_ce0 : OUT STD_LOGIC;
    fc_layer2_out_V_we0 : OUT STD_LOGIC;
    fc_layer2_out_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    fc_layer2_out_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    fc_layer3_out_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    fc_layer3_out_V_ce0 : OUT STD_LOGIC;
    fc_layer3_out_V_we0 : OUT STD_LOGIC;
    fc_layer3_out_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of nnet is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "nnet,hls_ip_2017_4_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.215500,HLS_SYN_LAT=1255479,HLS_SYN_TPT=none,HLS_SYN_MEM=169,HLS_SYN_DSP=5,HLS_SYN_FF=1510,HLS_SYN_LUT=3278}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv10_240 : STD_LOGIC_VECTOR (9 downto 0) := "1001000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv14_54 : STD_LOGIC_VECTOR (13 downto 0) := "00000001010100";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fc_layer1_weights_V_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal fc_layer1_weights_V_ce0 : STD_LOGIC;
    signal fc_layer1_weights_V_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal fc_layer2_weights_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal fc_layer2_weights_V_ce0 : STD_LOGIC;
    signal fc_layer2_weights_V_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal fc_layer3_weights_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal fc_layer3_weights_V_ce0 : STD_LOGIC;
    signal fc_layer3_weights_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal i_fu_377_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_770 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_i_cast_fu_388_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_i_cast_reg_775 : STD_LOGIC_VECTOR (17 downto 0);
    signal exitcond7_i_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_layer1_out_V_addr_reg_780 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_fu_398_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_788 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal exitcond_i_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_layer1_weights_V_1_reg_803 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal flatten_out_V_load_reg_808 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_1_fu_755_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal p_Val2_1_reg_813 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_3_fu_511_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_reg_826 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_i9_cast_fu_522_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_i9_cast_reg_831 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond6_i_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_layer2_out_V_addr_reg_836 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_3_fu_532_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_3_reg_844 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal next_mul_fu_543_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul_reg_849 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond_i1_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_layer2_weights_V_1_reg_864 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal fc_layer1_out_V_load_reg_869 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_4_fu_761_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal p_Val2_4_reg_874 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal i_4_fu_621_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_887 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_i1_cast_fu_632_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i1_cast_reg_892 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond5_i_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_layer3_out_V_addr_reg_897 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_4_fu_642_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_4_reg_905 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal exitcond_i2_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_layer3_weights_V_1_reg_920 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal fc_layer2_out_V_load_reg_925 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_7_fu_699_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_Val2_7_reg_930 : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_conv_layer2_fu_323_ap_start : STD_LOGIC;
    signal grp_conv_layer2_fu_323_ap_done : STD_LOGIC;
    signal grp_conv_layer2_fu_323_ap_idle : STD_LOGIC;
    signal grp_conv_layer2_fu_323_ap_ready : STD_LOGIC;
    signal grp_conv_layer2_fu_323_output_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_conv_layer2_fu_323_output_V_ce0 : STD_LOGIC;
    signal grp_conv_layer2_fu_323_output_V_we0 : STD_LOGIC;
    signal grp_conv_layer2_fu_323_output_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_conv_layer2_fu_323_image_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_conv_layer2_fu_323_image_V_ce0 : STD_LOGIC;
    signal grp_conv_layer1_fu_335_ap_start : STD_LOGIC;
    signal grp_conv_layer1_fu_335_ap_done : STD_LOGIC;
    signal grp_conv_layer1_fu_335_ap_idle : STD_LOGIC;
    signal grp_conv_layer1_fu_335_ap_ready : STD_LOGIC;
    signal grp_conv_layer1_fu_335_output_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_conv_layer1_fu_335_output_V_ce0 : STD_LOGIC;
    signal grp_conv_layer1_fu_335_output_V_we0 : STD_LOGIC;
    signal grp_conv_layer1_fu_335_output_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_pool_layer1_fu_347_ap_start : STD_LOGIC;
    signal grp_pool_layer1_fu_347_ap_done : STD_LOGIC;
    signal grp_pool_layer1_fu_347_ap_idle : STD_LOGIC;
    signal grp_pool_layer1_fu_347_ap_ready : STD_LOGIC;
    signal grp_pool_layer1_fu_347_output_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pool_layer1_fu_347_output_V_ce0 : STD_LOGIC;
    signal grp_pool_layer1_fu_347_output_V_we0 : STD_LOGIC;
    signal grp_pool_layer1_fu_347_output_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_pool_layer1_fu_347_image_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_pool_layer1_fu_347_image_V_ce0 : STD_LOGIC;
    signal grp_pool_layer2_fu_355_ap_start : STD_LOGIC;
    signal grp_pool_layer2_fu_355_ap_done : STD_LOGIC;
    signal grp_pool_layer2_fu_355_ap_idle : STD_LOGIC;
    signal grp_pool_layer2_fu_355_ap_ready : STD_LOGIC;
    signal grp_pool_layer2_fu_355_output_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pool_layer2_fu_355_output_V_ce0 : STD_LOGIC;
    signal grp_pool_layer2_fu_355_output_V_we0 : STD_LOGIC;
    signal grp_pool_layer2_fu_355_output_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_pool_layer2_fu_355_image_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_pool_layer2_fu_355_image_V_ce0 : STD_LOGIC;
    signal grp_flatten_fu_363_ap_start : STD_LOGIC;
    signal grp_flatten_fu_363_ap_done : STD_LOGIC;
    signal grp_flatten_fu_363_ap_idle : STD_LOGIC;
    signal grp_flatten_fu_363_ap_ready : STD_LOGIC;
    signal grp_flatten_fu_363_output_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_flatten_fu_363_output_V_ce0 : STD_LOGIC;
    signal grp_flatten_fu_363_output_V_we0 : STD_LOGIC;
    signal grp_flatten_fu_363_output_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_flatten_fu_363_input_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_flatten_fu_363_input_V_ce0 : STD_LOGIC;
    signal i_i_reg_207 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal p_Val2_s_reg_218 : STD_LOGIC_VECTOR (23 downto 0);
    signal j_i_reg_231 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_i8_reg_242 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal p_Val2_3_reg_253 : STD_LOGIC_VECTOR (23 downto 0);
    signal j_i1_reg_266 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul_reg_277 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_i1_reg_288 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal p_Val2_6_reg_299 : STD_LOGIC_VECTOR (23 downto 0);
    signal j_i2_reg_312 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_grp_conv_layer2_fu_323_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_reg_grp_conv_layer1_fu_335_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_reg_grp_pool_layer1_fu_347_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_reg_grp_pool_layer2_fu_355_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_reg_grp_flatten_fu_363_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_i_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_cast_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_21_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i9_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_cast_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_25_fu_627_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_cast_fu_688_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i2_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_V_i_i_cast_fu_500_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal a_V_i_i1_cast_fu_610_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal a_V_i_i2_cast_fu_750_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_fu_409_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_s_fu_421_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl_cast_fu_417_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl1_cast_fu_429_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_35_fu_433_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_36_fu_439_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_42_i_cast_fu_463_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_41_i_fu_455_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_2_fu_466_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_i_i_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_482_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal a_V_i_i_fu_492_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_38_fu_549_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_37_i_cast_fu_573_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_36_i_fu_565_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_5_fu_576_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_i_i1_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_592_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal a_V_i_i1_fu_602_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_40_fu_653_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_41_fu_665_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast_fu_673_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_661_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_42_fu_677_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_43_fu_683_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_7_fu_699_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_7_fu_699_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_32_i_cast_fu_713_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_31_i_fu_705_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Val2_8_fu_716_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_i_i2_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_732_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal a_V_i_i2_fu_742_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);

    component conv_layer2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_we0 : OUT STD_LOGIC;
        output_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        image_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        image_V_ce0 : OUT STD_LOGIC;
        image_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component conv_layer1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_we0 : OUT STD_LOGIC;
        output_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component pool_layer1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_we0 : OUT STD_LOGIC;
        output_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        image_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        image_V_ce0 : OUT STD_LOGIC;
        image_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component pool_layer2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_we0 : OUT STD_LOGIC;
        output_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        image_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        image_V_ce0 : OUT STD_LOGIC;
        image_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component flatten IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_we0 : OUT STD_LOGIC;
        output_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        input_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component nnet_mul_mul_24s_lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (40 downto 0) );
    end component;


    component nnet_mul_mul_24s_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (41 downto 0) );
    end component;


    component nnet_fc_layer1_weibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component nnet_fc_layer2_wejbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component nnet_fc_layer3_wekbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    fc_layer1_weights_V_U : component nnet_fc_layer1_weibs
    generic map (
        DataWidth => 18,
        AddressRange => 69120,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer1_weights_V_address0,
        ce0 => fc_layer1_weights_V_ce0,
        q0 => fc_layer1_weights_V_q0);

    fc_layer2_weights_V_U : component nnet_fc_layer2_wejbC
    generic map (
        DataWidth => 19,
        AddressRange => 10080,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer2_weights_V_address0,
        ce0 => fc_layer2_weights_V_ce0,
        q0 => fc_layer2_weights_V_q0);

    fc_layer3_weights_V_U : component nnet_fc_layer3_wekbM
    generic map (
        DataWidth => 20,
        AddressRange => 840,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_layer3_weights_V_address0,
        ce0 => fc_layer3_weights_V_ce0,
        q0 => fc_layer3_weights_V_q0);

    grp_conv_layer2_fu_323 : component conv_layer2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv_layer2_fu_323_ap_start,
        ap_done => grp_conv_layer2_fu_323_ap_done,
        ap_idle => grp_conv_layer2_fu_323_ap_idle,
        ap_ready => grp_conv_layer2_fu_323_ap_ready,
        output_V_address0 => grp_conv_layer2_fu_323_output_V_address0,
        output_V_ce0 => grp_conv_layer2_fu_323_output_V_ce0,
        output_V_we0 => grp_conv_layer2_fu_323_output_V_we0,
        output_V_d0 => grp_conv_layer2_fu_323_output_V_d0,
        image_V_address0 => grp_conv_layer2_fu_323_image_V_address0,
        image_V_ce0 => grp_conv_layer2_fu_323_image_V_ce0,
        image_V_q0 => pool_layer1_out_V_q0);

    grp_conv_layer1_fu_335 : component conv_layer1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv_layer1_fu_335_ap_start,
        ap_done => grp_conv_layer1_fu_335_ap_done,
        ap_idle => grp_conv_layer1_fu_335_ap_idle,
        ap_ready => grp_conv_layer1_fu_335_ap_ready,
        output_V_address0 => grp_conv_layer1_fu_335_output_V_address0,
        output_V_ce0 => grp_conv_layer1_fu_335_output_V_ce0,
        output_V_we0 => grp_conv_layer1_fu_335_output_V_we0,
        output_V_d0 => grp_conv_layer1_fu_335_output_V_d0);

    grp_pool_layer1_fu_347 : component pool_layer1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pool_layer1_fu_347_ap_start,
        ap_done => grp_pool_layer1_fu_347_ap_done,
        ap_idle => grp_pool_layer1_fu_347_ap_idle,
        ap_ready => grp_pool_layer1_fu_347_ap_ready,
        output_V_address0 => grp_pool_layer1_fu_347_output_V_address0,
        output_V_ce0 => grp_pool_layer1_fu_347_output_V_ce0,
        output_V_we0 => grp_pool_layer1_fu_347_output_V_we0,
        output_V_d0 => grp_pool_layer1_fu_347_output_V_d0,
        image_V_address0 => grp_pool_layer1_fu_347_image_V_address0,
        image_V_ce0 => grp_pool_layer1_fu_347_image_V_ce0,
        image_V_q0 => conv_layer1_out_V_q0);

    grp_pool_layer2_fu_355 : component pool_layer2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pool_layer2_fu_355_ap_start,
        ap_done => grp_pool_layer2_fu_355_ap_done,
        ap_idle => grp_pool_layer2_fu_355_ap_idle,
        ap_ready => grp_pool_layer2_fu_355_ap_ready,
        output_V_address0 => grp_pool_layer2_fu_355_output_V_address0,
        output_V_ce0 => grp_pool_layer2_fu_355_output_V_ce0,
        output_V_we0 => grp_pool_layer2_fu_355_output_V_we0,
        output_V_d0 => grp_pool_layer2_fu_355_output_V_d0,
        image_V_address0 => grp_pool_layer2_fu_355_image_V_address0,
        image_V_ce0 => grp_pool_layer2_fu_355_image_V_ce0,
        image_V_q0 => conv_layer2_out_V_q0);

    grp_flatten_fu_363 : component flatten
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_flatten_fu_363_ap_start,
        ap_done => grp_flatten_fu_363_ap_done,
        ap_idle => grp_flatten_fu_363_ap_idle,
        ap_ready => grp_flatten_fu_363_ap_ready,
        output_V_address0 => grp_flatten_fu_363_output_V_address0,
        output_V_ce0 => grp_flatten_fu_363_output_V_ce0,
        output_V_we0 => grp_flatten_fu_363_output_V_we0,
        output_V_d0 => grp_flatten_fu_363_output_V_d0,
        input_V_address0 => grp_flatten_fu_363_input_V_address0,
        input_V_ce0 => grp_flatten_fu_363_input_V_ce0,
        input_V_q0 => pool_layer2_out_V_q0);

    nnet_mul_mul_24s_lbW_U19 : component nnet_mul_mul_24s_lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 41)
    port map (
        din0 => flatten_out_V_load_reg_808,
        din1 => fc_layer1_weights_V_1_reg_803,
        dout => p_Val2_1_fu_755_p2);

    nnet_mul_mul_24s_hbi_U20 : component nnet_mul_mul_24s_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 19,
        dout_WIDTH => 42)
    port map (
        din0 => fc_layer1_out_V_load_reg_869,
        din1 => fc_layer2_weights_V_1_reg_864,
        dout => p_Val2_4_fu_761_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_conv_layer1_fu_335_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_conv_layer1_fu_335_ap_start <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_reg_grp_conv_layer1_fu_335_ap_start <= ap_const_logic_1;
                elsif ((grp_conv_layer1_fu_335_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_conv_layer1_fu_335_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_conv_layer2_fu_323_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_conv_layer2_fu_323_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_reg_grp_conv_layer2_fu_323_ap_start <= ap_const_logic_1;
                elsif ((grp_conv_layer2_fu_323_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_conv_layer2_fu_323_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_flatten_fu_363_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_flatten_fu_363_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_reg_grp_flatten_fu_363_ap_start <= ap_const_logic_1;
                elsif ((grp_flatten_fu_363_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_flatten_fu_363_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_pool_layer1_fu_347_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_pool_layer1_fu_347_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_reg_grp_pool_layer1_fu_347_ap_start <= ap_const_logic_1;
                elsif ((grp_pool_layer1_fu_347_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_pool_layer1_fu_347_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_pool_layer2_fu_355_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_pool_layer2_fu_355_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_reg_grp_pool_layer2_fu_355_ap_start <= ap_const_logic_1;
                elsif ((grp_pool_layer2_fu_355_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_pool_layer2_fu_355_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i1_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond6_i_fu_505_p2 = ap_const_lv1_1))) then 
                i_i1_reg_288 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                i_i1_reg_288 <= i_4_reg_887;
            end if; 
        end if;
    end process;

    i_i8_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond7_i_fu_371_p2 = ap_const_lv1_1))) then 
                i_i8_reg_242 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                i_i8_reg_242 <= i_3_reg_826;
            end if; 
        end if;
    end process;

    i_i_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_i_reg_207 <= i_reg_770;
            elsif (((grp_flatten_fu_363_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_i_reg_207 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_i1_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                j_i1_reg_266 <= j_3_reg_844;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond6_i_fu_505_p2 = ap_const_lv1_0))) then 
                j_i1_reg_266 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_i2_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                j_i2_reg_312 <= j_4_reg_905;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (exitcond5_i_fu_615_p2 = ap_const_lv1_0))) then 
                j_i2_reg_312 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_i_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                j_i_reg_231 <= j_reg_788;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond7_i_fu_371_p2 = ap_const_lv1_0))) then 
                j_i_reg_231 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    p_Val2_3_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                p_Val2_3_reg_253 <= p_Val2_5_fu_576_p2(43 downto 20);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond6_i_fu_505_p2 = ap_const_lv1_0))) then 
                p_Val2_3_reg_253 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    p_Val2_6_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                p_Val2_6_reg_299 <= p_Val2_8_fu_716_p2(43 downto 20);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (exitcond5_i_fu_615_p2 = ap_const_lv1_0))) then 
                p_Val2_6_reg_299 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                p_Val2_s_reg_218 <= p_Val2_2_fu_466_p2(43 downto 20);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond7_i_fu_371_p2 = ap_const_lv1_0))) then 
                p_Val2_s_reg_218 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                phi_mul_reg_277 <= next_mul_reg_849;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond6_i_fu_505_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_277 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond7_i_fu_371_p2 = ap_const_lv1_0))) then
                fc_layer1_out_V_addr_reg_780 <= tmp_i_fu_383_p1(7 - 1 downto 0);
                    tmp_i_cast_reg_775(6 downto 0) <= tmp_i_cast_fu_388_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                fc_layer1_out_V_load_reg_869 <= fc_layer1_out_V_q0;
                fc_layer2_weights_V_1_reg_864 <= fc_layer2_weights_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                fc_layer1_weights_V_1_reg_803 <= fc_layer1_weights_V_q0;
                flatten_out_V_load_reg_808 <= flatten_out_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond6_i_fu_505_p2 = ap_const_lv1_0))) then
                fc_layer2_out_V_addr_reg_836 <= tmp_i9_fu_517_p1(7 - 1 downto 0);
                    tmp_i9_cast_reg_831(6 downto 0) <= tmp_i9_cast_fu_522_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                fc_layer2_out_V_load_reg_925 <= fc_layer2_out_V_q0;
                fc_layer3_weights_V_1_reg_920 <= fc_layer3_weights_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (exitcond5_i_fu_615_p2 = ap_const_lv1_0))) then
                fc_layer3_out_V_addr_reg_897 <= tmp_i1_25_fu_627_p1(4 - 1 downto 0);
                    tmp_i1_cast_reg_892(3 downto 0) <= tmp_i1_cast_fu_632_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                i_3_reg_826 <= i_3_fu_511_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                i_4_reg_887 <= i_4_fu_621_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_reg_770 <= i_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                j_3_reg_844 <= j_3_fu_532_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                j_4_reg_905 <= j_4_fu_642_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                j_reg_788 <= j_fu_398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond_i1_fu_526_p2 = ap_const_lv1_0))) then
                next_mul_reg_849 <= next_mul_fu_543_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                p_Val2_1_reg_813 <= p_Val2_1_fu_755_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                p_Val2_4_reg_874 <= p_Val2_4_fu_761_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                p_Val2_7_reg_930 <= p_Val2_7_fu_699_p2;
            end if;
        end if;
    end process;
    tmp_i_cast_reg_775(17 downto 7) <= "00000000000";
    tmp_i9_cast_reg_831(13 downto 7) <= "0000000";
    tmp_i1_cast_reg_892(10 downto 4) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state11, exitcond7_i_fu_371_p2, ap_CS_fsm_state12, exitcond_i_fu_392_p2, ap_CS_fsm_state17, exitcond6_i_fu_505_p2, ap_CS_fsm_state18, exitcond_i1_fu_526_p2, ap_CS_fsm_state23, exitcond5_i_fu_615_p2, ap_CS_fsm_state24, exitcond_i2_fu_636_p2, grp_conv_layer2_fu_323_ap_done, grp_conv_layer1_fu_335_ap_done, grp_pool_layer1_fu_347_ap_done, grp_pool_layer2_fu_355_ap_done, grp_flatten_fu_363_ap_done, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_conv_layer1_fu_335_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_pool_layer1_fu_347_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_conv_layer2_fu_323_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_pool_layer2_fu_355_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_flatten_fu_363_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond7_i_fu_371_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_i_fu_392_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond6_i_fu_505_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (((exitcond_i1_fu_526_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state23 => 
                if (((exitcond5_i_fu_615_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                if (((exitcond_i2_fu_636_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_V_i_i1_cast_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_V_i_i1_fu_602_p3),24));
    a_V_i_i1_fu_602_p3 <= 
        tmp_37_fu_592_p1 when (tmp_i_i1_fu_596_p2(0) = '1') else 
        ap_const_lv23_0;
    a_V_i_i2_cast_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_V_i_i2_fu_742_p3),24));
    a_V_i_i2_fu_742_p3 <= 
        tmp_39_fu_732_p1 when (tmp_i_i2_fu_736_p2(0) = '1') else 
        ap_const_lv23_0;
    a_V_i_i_cast_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_V_i_i_fu_492_p3),24));
    a_V_i_i_fu_492_p3 <= 
        tmp_34_fu_482_p1 when (tmp_i_i_fu_486_p2(0) = '1') else 
        ap_const_lv23_0;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state23, exitcond5_i_fu_615_p2)
    begin
        if (((exitcond5_i_fu_615_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state23, exitcond5_i_fu_615_p2)
    begin
        if (((exitcond5_i_fu_615_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    conv_layer1_out_V_address0_assign_proc : process(grp_conv_layer1_fu_335_output_V_address0, grp_pool_layer1_fu_347_image_V_address0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_layer1_out_V_address0 <= grp_pool_layer1_fu_347_image_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_layer1_out_V_address0 <= grp_conv_layer1_fu_335_output_V_address0;
        else 
            conv_layer1_out_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    conv_layer1_out_V_ce0_assign_proc : process(grp_conv_layer1_fu_335_output_V_ce0, grp_pool_layer1_fu_347_image_V_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_layer1_out_V_ce0 <= grp_pool_layer1_fu_347_image_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_layer1_out_V_ce0 <= grp_conv_layer1_fu_335_output_V_ce0;
        else 
            conv_layer1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer1_out_V_d0 <= grp_conv_layer1_fu_335_output_V_d0;

    conv_layer1_out_V_we0_assign_proc : process(grp_conv_layer1_fu_335_output_V_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_layer1_out_V_we0 <= grp_conv_layer1_fu_335_output_V_we0;
        else 
            conv_layer1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_layer2_out_V_address0_assign_proc : process(grp_conv_layer2_fu_323_output_V_address0, grp_pool_layer2_fu_355_image_V_address0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_layer2_out_V_address0 <= grp_pool_layer2_fu_355_image_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_layer2_out_V_address0 <= grp_conv_layer2_fu_323_output_V_address0;
        else 
            conv_layer2_out_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv_layer2_out_V_ce0_assign_proc : process(grp_conv_layer2_fu_323_output_V_ce0, grp_pool_layer2_fu_355_image_V_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_layer2_out_V_ce0 <= grp_pool_layer2_fu_355_image_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_layer2_out_V_ce0 <= grp_conv_layer2_fu_323_output_V_ce0;
        else 
            conv_layer2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer2_out_V_d0 <= grp_conv_layer2_fu_323_output_V_d0;

    conv_layer2_out_V_we0_assign_proc : process(grp_conv_layer2_fu_323_output_V_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_layer2_out_V_we0 <= grp_conv_layer2_fu_323_output_V_we0;
        else 
            conv_layer2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond5_i_fu_615_p2 <= "1" when (i_i1_reg_288 = ap_const_lv4_A) else "0";
    exitcond6_i_fu_505_p2 <= "1" when (i_i8_reg_242 = ap_const_lv7_54) else "0";
    exitcond7_i_fu_371_p2 <= "1" when (i_i_reg_207 = ap_const_lv7_78) else "0";
    exitcond_i1_fu_526_p2 <= "1" when (j_i1_reg_266 = ap_const_lv7_78) else "0";
    exitcond_i2_fu_636_p2 <= "1" when (j_i2_reg_312 = ap_const_lv7_54) else "0";
    exitcond_i_fu_392_p2 <= "1" when (j_i_reg_231 = ap_const_lv10_240) else "0";

    fc_layer1_out_V_address0_assign_proc : process(fc_layer1_out_V_addr_reg_780, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state16, tmp_i1_fu_538_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            fc_layer1_out_V_address0 <= tmp_i1_fu_538_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            fc_layer1_out_V_address0 <= fc_layer1_out_V_addr_reg_780;
        else 
            fc_layer1_out_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    fc_layer1_out_V_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            fc_layer1_out_V_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer1_out_V_d0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16, p_Val2_s_reg_218, a_V_i_i_cast_fu_500_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            fc_layer1_out_V_d0 <= a_V_i_i_cast_fu_500_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fc_layer1_out_V_d0 <= p_Val2_s_reg_218;
        else 
            fc_layer1_out_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fc_layer1_out_V_we0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            fc_layer1_out_V_we0 <= ap_const_logic_1;
        else 
            fc_layer1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_layer1_weights_V_address0 <= tmp_53_cast_fu_444_p1(17 - 1 downto 0);

    fc_layer1_weights_V_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fc_layer1_weights_V_ce0 <= ap_const_logic_1;
        else 
            fc_layer1_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer2_out_V_address0_assign_proc : process(fc_layer2_out_V_addr_reg_836, ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state22, tmp_i2_fu_648_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            fc_layer2_out_V_address0 <= tmp_i2_fu_648_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            fc_layer2_out_V_address0 <= fc_layer2_out_V_addr_reg_836;
        else 
            fc_layer2_out_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    fc_layer2_out_V_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state24, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            fc_layer2_out_V_ce0 <= ap_const_logic_1;
        else 
            fc_layer2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer2_out_V_d0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state22, p_Val2_3_reg_253, a_V_i_i1_cast_fu_610_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            fc_layer2_out_V_d0 <= a_V_i_i1_cast_fu_610_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            fc_layer2_out_V_d0 <= p_Val2_3_reg_253;
        else 
            fc_layer2_out_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fc_layer2_out_V_we0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            fc_layer2_out_V_we0 <= ap_const_logic_1;
        else 
            fc_layer2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_layer2_weights_V_address0 <= tmp_55_cast_fu_554_p1(14 - 1 downto 0);

    fc_layer2_weights_V_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            fc_layer2_weights_V_ce0 <= ap_const_logic_1;
        else 
            fc_layer2_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_layer3_out_V_address0 <= fc_layer3_out_V_addr_reg_897;

    fc_layer3_out_V_ce0_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            fc_layer3_out_V_ce0 <= ap_const_logic_1;
        else 
            fc_layer3_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_layer3_out_V_d0_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state28, p_Val2_6_reg_299, a_V_i_i2_cast_fu_750_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            fc_layer3_out_V_d0 <= a_V_i_i2_cast_fu_750_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            fc_layer3_out_V_d0 <= p_Val2_6_reg_299;
        else 
            fc_layer3_out_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fc_layer3_out_V_we0_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            fc_layer3_out_V_we0 <= ap_const_logic_1;
        else 
            fc_layer3_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_layer3_weights_V_address0 <= tmp_59_cast_fu_688_p1(10 - 1 downto 0);

    fc_layer3_weights_V_ce0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            fc_layer3_weights_V_ce0 <= ap_const_logic_1;
        else 
            fc_layer3_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    flatten_out_V_address0_assign_proc : process(ap_CS_fsm_state12, grp_flatten_fu_363_output_V_address0, ap_CS_fsm_state10, tmp_i_21_fu_404_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            flatten_out_V_address0 <= tmp_i_21_fu_404_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            flatten_out_V_address0 <= grp_flatten_fu_363_output_V_address0;
        else 
            flatten_out_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    flatten_out_V_ce0_assign_proc : process(ap_CS_fsm_state12, grp_flatten_fu_363_output_V_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            flatten_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            flatten_out_V_ce0 <= grp_flatten_fu_363_output_V_ce0;
        else 
            flatten_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flatten_out_V_d0 <= grp_flatten_fu_363_output_V_d0;

    flatten_out_V_we0_assign_proc : process(grp_flatten_fu_363_output_V_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            flatten_out_V_we0 <= grp_flatten_fu_363_output_V_we0;
        else 
            flatten_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_conv_layer1_fu_335_ap_start <= ap_reg_grp_conv_layer1_fu_335_ap_start;
    grp_conv_layer2_fu_323_ap_start <= ap_reg_grp_conv_layer2_fu_323_ap_start;
    grp_flatten_fu_363_ap_start <= ap_reg_grp_flatten_fu_363_ap_start;
    grp_pool_layer1_fu_347_ap_start <= ap_reg_grp_pool_layer1_fu_347_ap_start;
    grp_pool_layer2_fu_355_ap_start <= ap_reg_grp_pool_layer2_fu_355_ap_start;
    i_3_fu_511_p2 <= std_logic_vector(unsigned(i_i8_reg_242) + unsigned(ap_const_lv7_1));
    i_4_fu_621_p2 <= std_logic_vector(unsigned(i_i1_reg_288) + unsigned(ap_const_lv4_1));
    i_fu_377_p2 <= std_logic_vector(unsigned(i_i_reg_207) + unsigned(ap_const_lv7_1));
    j_3_fu_532_p2 <= std_logic_vector(unsigned(j_i1_reg_266) + unsigned(ap_const_lv7_1));
    j_4_fu_642_p2 <= std_logic_vector(unsigned(j_i2_reg_312) + unsigned(ap_const_lv7_1));
    j_fu_398_p2 <= std_logic_vector(unsigned(j_i_reg_231) + unsigned(ap_const_lv10_1));
    next_mul_fu_543_p2 <= std_logic_vector(unsigned(phi_mul_reg_277) + unsigned(ap_const_lv14_54));
    p_Val2_2_fu_466_p2 <= std_logic_vector(signed(tmp_42_i_cast_fu_463_p1) + signed(tmp_41_i_fu_455_p3));
    p_Val2_5_fu_576_p2 <= std_logic_vector(signed(tmp_37_i_cast_fu_573_p1) + signed(tmp_36_i_fu_565_p3));
    p_Val2_7_fu_699_p0 <= fc_layer2_out_V_load_reg_925;
    p_Val2_7_fu_699_p1 <= fc_layer3_weights_V_1_reg_920;
    p_Val2_7_fu_699_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_7_fu_699_p0) * signed(p_Val2_7_fu_699_p1))), 43));
    p_Val2_8_fu_716_p2 <= std_logic_vector(signed(tmp_32_i_cast_fu_713_p1) + signed(tmp_31_i_fu_705_p3));
    p_shl1_cast_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_421_p3),18));
    p_shl2_cast_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_fu_653_p3),11));
    p_shl3_cast_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_665_p3),11));
    p_shl_cast_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_409_p3),18));

    pool_layer1_out_V_address0_assign_proc : process(grp_conv_layer2_fu_323_image_V_address0, grp_pool_layer1_fu_347_output_V_address0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pool_layer1_out_V_address0 <= grp_pool_layer1_fu_347_output_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pool_layer1_out_V_address0 <= grp_conv_layer2_fu_323_image_V_address0;
        else 
            pool_layer1_out_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    pool_layer1_out_V_ce0_assign_proc : process(grp_conv_layer2_fu_323_image_V_ce0, grp_pool_layer1_fu_347_output_V_ce0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pool_layer1_out_V_ce0 <= grp_pool_layer1_fu_347_output_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pool_layer1_out_V_ce0 <= grp_conv_layer2_fu_323_image_V_ce0;
        else 
            pool_layer1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pool_layer1_out_V_d0 <= grp_pool_layer1_fu_347_output_V_d0;

    pool_layer1_out_V_we0_assign_proc : process(grp_pool_layer1_fu_347_output_V_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pool_layer1_out_V_we0 <= grp_pool_layer1_fu_347_output_V_we0;
        else 
            pool_layer1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pool_layer2_out_V_address0_assign_proc : process(grp_pool_layer2_fu_355_output_V_address0, grp_flatten_fu_363_input_V_address0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pool_layer2_out_V_address0 <= grp_flatten_fu_363_input_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pool_layer2_out_V_address0 <= grp_pool_layer2_fu_355_output_V_address0;
        else 
            pool_layer2_out_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    pool_layer2_out_V_ce0_assign_proc : process(grp_pool_layer2_fu_355_output_V_ce0, grp_flatten_fu_363_input_V_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pool_layer2_out_V_ce0 <= grp_flatten_fu_363_input_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pool_layer2_out_V_ce0 <= grp_pool_layer2_fu_355_output_V_ce0;
        else 
            pool_layer2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pool_layer2_out_V_d0 <= grp_pool_layer2_fu_355_output_V_d0;

    pool_layer2_out_V_we0_assign_proc : process(grp_pool_layer2_fu_355_output_V_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pool_layer2_out_V_we0 <= grp_pool_layer2_fu_355_output_V_we0;
        else 
            pool_layer2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_31_i_fu_705_p3 <= (p_Val2_6_reg_299 & ap_const_lv20_0);
        tmp_32_i_cast_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_7_reg_930),44));

    tmp_34_fu_482_p1 <= p_Val2_s_reg_218(23 - 1 downto 0);
    tmp_35_fu_433_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_417_p1) - unsigned(p_shl1_cast_fu_429_p1));
    tmp_36_fu_439_p2 <= std_logic_vector(unsigned(tmp_35_fu_433_p2) + unsigned(tmp_i_cast_reg_775));
    tmp_36_i_fu_565_p3 <= (p_Val2_3_reg_253 & ap_const_lv20_0);
    tmp_37_fu_592_p1 <= p_Val2_3_reg_253(23 - 1 downto 0);
        tmp_37_i_cast_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_4_reg_874),44));

    tmp_38_fu_549_p2 <= std_logic_vector(unsigned(phi_mul_reg_277) + unsigned(tmp_i9_cast_reg_831));
    tmp_39_fu_732_p1 <= p_Val2_6_reg_299(23 - 1 downto 0);
    tmp_40_fu_653_p3 <= (j_i2_reg_312 & ap_const_lv3_0);
    tmp_41_fu_665_p3 <= (j_i2_reg_312 & ap_const_lv1_0);
    tmp_41_i_fu_455_p3 <= (p_Val2_s_reg_218 & ap_const_lv20_0);
    tmp_42_fu_677_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_673_p1) + unsigned(p_shl2_cast_fu_661_p1));
        tmp_42_i_cast_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_reg_813),44));

    tmp_43_fu_683_p2 <= std_logic_vector(unsigned(tmp_42_fu_677_p2) + unsigned(tmp_i1_cast_reg_892));
        tmp_53_cast_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_36_fu_439_p2),64));

    tmp_55_cast_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_fu_549_p2),64));
    tmp_59_cast_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_fu_683_p2),64));
    tmp_fu_409_p3 <= (j_i_reg_231 & ap_const_lv7_0);
    tmp_i1_25_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_288),64));
    tmp_i1_cast_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_288),11));
    tmp_i1_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i1_reg_266),64));
    tmp_i2_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i2_reg_312),64));
    tmp_i9_cast_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i8_reg_242),14));
    tmp_i9_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i8_reg_242),64));
    tmp_i_21_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_231),64));
    tmp_i_cast_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_207),18));
    tmp_i_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_207),64));
    tmp_i_i1_fu_596_p2 <= "1" when (signed(p_Val2_3_reg_253) > signed(ap_const_lv24_0)) else "0";
    tmp_i_i2_fu_736_p2 <= "1" when (signed(p_Val2_6_reg_299) > signed(ap_const_lv24_0)) else "0";
    tmp_i_i_fu_486_p2 <= "1" when (signed(p_Val2_s_reg_218) > signed(ap_const_lv24_0)) else "0";
    tmp_s_fu_421_p3 <= (j_i_reg_231 & ap_const_lv3_0);
end behav;
