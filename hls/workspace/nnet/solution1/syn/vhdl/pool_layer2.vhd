-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pool_layer2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    image_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    image_V_ce0 : OUT STD_LOGIC;
    image_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of pool_layer2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal channel_1_fu_177_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal channel_1_reg_435 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_cast2_fu_183_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_1_cast2_reg_440 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond1_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_cast_fu_187_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_cast_reg_445 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_201_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_453 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_2_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_241_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_reg_458 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_7_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_285_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal k_1_fu_301_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_1_reg_484 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_16_fu_317_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_reg_489 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond2_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_360_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal l_1_fu_376_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal l_1_reg_502 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_19_fu_409_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_19_reg_507 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal max_V_1_fu_424_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal channel_reg_90 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_102 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_114 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_V1_reg_126 : STD_LOGIC_VECTOR (23 downto 0);
    signal k_reg_137 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_V_s_reg_148 : STD_LOGIC_VECTOR (23 downto 0);
    signal l_reg_160 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_12_fu_280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_cast_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_cast_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_201_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_207_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_217_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_229_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_225_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_fu_237_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_cast_fu_253_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_257_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_262_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_fu_272_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal k_cast2_fu_291_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_307_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_16_fu_317_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_fu_323_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_cast_fu_333_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_14_fu_337_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_24_cast_fu_342_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_15_fu_350_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal l_cast1_fu_366_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_382_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_cast_fu_388_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_392_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_397_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_29_cast_fu_405_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_11_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_fu_317_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_201_p00 : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    channel_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_191_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                channel_reg_90 <= channel_1_reg_435;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                channel_reg_90 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_171_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_102 <= ap_const_lv4_0;
            elsif (((tmp_7_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_reg_102 <= i_1_fu_285_p2;
            end if; 
        end if;
    end process;

    j_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_191_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_114 <= ap_const_lv4_0;
            elsif (((exitcond2_fu_295_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j_reg_114 <= j_1_fu_360_p2;
            end if; 
        end if;
    end process;

    k_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_370_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                k_reg_137 <= k_1_reg_484;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k_reg_137 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    l_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                l_reg_160 <= l_1_reg_502;
            elsif (((exitcond2_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                l_reg_160 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    max_V1_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_370_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                max_V1_reg_126 <= max_V_s_reg_148;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                max_V1_reg_126 <= image_V_q0;
            end if; 
        end if;
    end process;

    max_V_s_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                max_V_s_reg_148 <= max_V_1_fu_424_p3;
            elsif (((exitcond2_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                max_V_s_reg_148 <= max_V1_reg_126;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                channel_1_reg_435 <= channel_1_fu_177_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                k_1_reg_484 <= k_1_fu_301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                l_1_reg_502 <= l_1_fu_376_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_16_reg_489 <= tmp_16_fu_317_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_370_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                tmp_19_reg_507 <= tmp_19_fu_409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_171_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_1_cast2_reg_440(4 downto 0) <= tmp_1_cast2_fu_183_p1(4 downto 0);
                    tmp_1_cast_reg_445(4 downto 0) <= tmp_1_cast_fu_187_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_191_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_3_reg_458(6 downto 1) <= tmp_3_fu_241_p2(6 downto 1);
                tmp_reg_453 <= tmp_fu_201_p2;
            end if;
        end if;
    end process;
    tmp_1_cast2_reg_440(12 downto 5) <= "00000000";
    tmp_1_cast_reg_445(10 downto 5) <= "000000";
    tmp_3_reg_458(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_171_p2, ap_CS_fsm_state3, tmp_2_fu_191_p2, ap_CS_fsm_state4, tmp_7_fu_247_p2, ap_CS_fsm_state6, exitcond2_fu_295_p2, ap_CS_fsm_state7, exitcond_fu_370_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_171_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_2_fu_191_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((tmp_7_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((exitcond2_fu_295_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((exitcond_fu_370_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_171_p2)
    begin
        if ((((exitcond1_fu_171_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_171_p2)
    begin
        if (((exitcond1_fu_171_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    channel_1_fu_177_p2 <= std_logic_vector(unsigned(channel_reg_90) + unsigned(ap_const_lv5_1));
    exitcond1_fu_171_p2 <= "1" when (channel_reg_90 = ap_const_lv5_10) else "0";
    exitcond2_fu_295_p2 <= "1" when (k_reg_137 = ap_const_lv2_2) else "0";
    exitcond_fu_370_p2 <= "1" when (l_reg_160 = ap_const_lv2_2) else "0";
    i_1_fu_285_p2 <= std_logic_vector(unsigned(i_reg_102) + unsigned(ap_const_lv4_2));

    image_V_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, tmp_12_fu_280_p1, tmp_30_cast_fu_414_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            image_V_address0 <= tmp_30_cast_fu_414_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            image_V_address0 <= tmp_12_fu_280_p1(12 - 1 downto 0);
        else 
            image_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    image_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            image_V_ce0 <= ap_const_logic_1;
        else 
            image_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_360_p2 <= std_logic_vector(unsigned(j_reg_114) + unsigned(ap_const_lv4_2));
    k_1_fu_301_p2 <= std_logic_vector(unsigned(k_reg_137) + unsigned(ap_const_lv2_1));
    k_cast2_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_137),4));
    l_1_fu_376_p2 <= std_logic_vector(unsigned(l_reg_160) + unsigned(ap_const_lv2_1));
    l_cast1_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_reg_160),4));
    max_V_1_fu_424_p3 <= 
        image_V_q0 when (tmp_11_fu_418_p2(0) = '1') else 
        max_V_s_reg_148;
    output_V_address0 <= tmp_25_cast_fu_355_p1(10 - 1 downto 0);

    output_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= max_V1_reg_126;

    output_V_we0_assign_proc : process(ap_CS_fsm_state6, exitcond2_fu_295_p2)
    begin
        if (((exitcond2_fu_295_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_229_p3),7));
    p_shl_cast_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_217_p3),7));
    tmp_10_cast_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_382_p2),8));
    tmp_10_fu_272_p3 <= (tmp_8_fu_262_p4 & channel_reg_90);
    tmp_11_fu_418_p2 <= "1" when (signed(image_V_q0) > signed(max_V_s_reg_148)) else "0";
    tmp_12_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_272_p3),64));
    tmp_13_fu_323_p4 <= j_reg_114(3 downto 1);
    tmp_14_fu_337_p2 <= std_logic_vector(unsigned(tmp_3_reg_458) + unsigned(tmp_6_cast_fu_333_p1));
    tmp_15_fu_350_p2 <= std_logic_vector(unsigned(tmp_24_cast_fu_342_p3) + unsigned(tmp_1_cast_reg_445));
    tmp_16_fu_317_p0 <= tmp_16_fu_317_p00(4 - 1 downto 0);
    tmp_16_fu_317_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_307_p2),8));
    tmp_16_fu_317_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_317_p0) * unsigned(ap_const_lv8_D), 8));
    tmp_17_fu_392_p2 <= std_logic_vector(unsigned(tmp_16_reg_489) + unsigned(tmp_10_cast_fu_388_p1));
    tmp_18_fu_397_p3 <= (tmp_17_fu_392_p2 & ap_const_lv4_0);
    tmp_19_fu_409_p2 <= std_logic_vector(unsigned(tmp_29_cast_fu_405_p1) + unsigned(tmp_1_cast2_reg_440));
    tmp_1_cast2_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channel_reg_90),13));
    tmp_1_cast_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channel_reg_90),11));
    tmp_1_fu_229_p3 <= (tmp_5_fu_207_p4 & ap_const_lv1_0);
    tmp_24_cast_fu_342_p3 <= (tmp_14_fu_337_p2 & ap_const_lv4_0);
    tmp_25_cast_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_350_p2),64));
    tmp_29_cast_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_397_p3),13));
    tmp_2_fu_191_p2 <= "1" when (unsigned(i_reg_102) < unsigned(ap_const_lv4_C)) else "0";
    tmp_30_cast_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_reg_507),64));
    tmp_3_fu_241_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_225_p1) - unsigned(p_shl1_cast_fu_237_p1));
    tmp_4_fu_382_p2 <= std_logic_vector(unsigned(l_cast1_fu_366_p1) + unsigned(j_reg_114));
    tmp_5_fu_207_p4 <= i_reg_102(3 downto 1);
    tmp_6_cast_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_323_p4),7));
    tmp_6_fu_257_p2 <= std_logic_vector(unsigned(tmp_reg_453) + unsigned(tmp_8_cast_fu_253_p1));
    tmp_7_fu_247_p2 <= "1" when (unsigned(j_reg_114) < unsigned(ap_const_lv4_C)) else "0";
    tmp_8_cast_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_114),8));
    tmp_8_fu_262_p4 <= tmp_6_fu_257_p2(7 downto 1);
    tmp_9_fu_307_p2 <= std_logic_vector(unsigned(k_cast2_fu_291_p1) + unsigned(i_reg_102));
    tmp_fu_201_p0 <= tmp_fu_201_p00(4 - 1 downto 0);
    tmp_fu_201_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_102),8));
    tmp_fu_201_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_201_p0) * unsigned(ap_const_lv8_D), 8));
    tmp_s_fu_217_p3 <= (tmp_5_fu_207_p4 & ap_const_lv3_0);
end behav;
