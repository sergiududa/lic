-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_layer1_conv_dEe_rom is 
    generic(
             dwidth     : integer := 19; 
             awidth     : integer := 7; 
             mem_size    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_layer1_conv_dEe_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "0100000101011100011", 1 => "1010011111101001100", 
    2 => "0101000111011111000", 3 => "1011101011011101110", 
    4 => "1010010010101110010", 5 => "0000100101111000100", 
    6 => "0000000011000111100", 7 => "0101100011001100001", 
    8 => "0010001101110000110", 9 => "0101100101111100101", 
    10 => "1011000100010010001", 11 => "0100100111010100111", 
    12 => "0101010010011011011", 13 => "0010101111111100001", 
    14 => "1110110010000101110", 15 => "0000111111001010110", 
    16 => "0100101000100111100", 17 => "0001010000010100101", 
    18 => "0011100110111011011", 19 => "0110001011011110110", 
    20 => "1010010010001010100", 21 => "1101110110100100011", 
    22 => "1100010111010010100", 23 => "1101101001110011011", 
    24 => "1001111110110000111", 25 => "1010010110001010011", 
    26 => "1101101111011101010", 27 => "1111111000000110010", 
    28 => "1010111101101101100", 29 => "1101111101100010100", 
    30 => "0000010010100110110", 31 => "1101011101100101100", 
    32 => "0100111111001100000", 33 => "0011111100010000111", 
    34 => "0110100001011100101", 35 => "0010000101010010010", 
    36 => "1011001000010101111", 37 => "1011111101110010101", 
    38 => "0010000101001100000", 39 => "0011011010100111001", 
    40 => "0011010100000001100", 41 => "1110111001110010110", 
    42 => "0101110110111101011", 43 => "0101000110011100000", 
    44 => "0101011100111001011", 45 => "1100111101001110100", 
    46 => "1011101111101010010", 47 => "1010000100010000001", 
    48 => "0110010111111111101", 49 => "1001111110011010000", 
    50 => "1100011101001010001", 51 => "1001100000111101111", 
    52 => "0001010100001001010", 53 => "1100110000011000111", 
    54 => "1111011011101000000", 55 => "1100001101110011000", 
    56 => "1011001101110110110", 57 => "0001011100000110000", 
    58 => "0010101000101101111", 59 => "0000111010000101000", 
    60 => "1100110101101100000", 61 => "1010101101011000011", 
    62 => "0110000011110000010", 63 => "1100001111001011000", 
    64 => "0101110011100100111", 65 => "1010000111001000010", 
    66 => "0101000100011110100", 67 => "1100100001000110000", 
    68 => "1111010001000110111", 69 => "1011001011110111111", 
    70 => "0101100011111111010", 71 => "1101111110000111000", 
    72 => "0110011000101000101", 73 => "0100100000110011100", 
    74 => "0011100000110001110", 75 => "1101001101001101010", 
    76 => "1111100110111100001", 77 => "0100011011010000010", 
    78 => "0011101000001010110", 79 => "1110000111110110110", 
    80 => "0011010001101000000", 81 => "1110100010111110000", 
    82 => "1110001011001111100", 83 => "1001100001111011110", 
    84 => "1011110000000000101", 85 => "0110011011111000100", 
    86 => "1100110011001011001", 87 => "1101110010100100110", 
    88 => "0010010011101101100", 89 => "1010011010011011111", 
    90 => "1010001101100101100", 91 => "0110000001111011111", 
    92 => "1111100101010101110", 93 => "0001111010100110000", 
    94 => "0110000000010111101", 95 => "0100101001010011000", 
    96 => "1011011110111100000", 97 => "1111011101110010100", 
    98 => "0011010111111011111", 99 => "1100110011001110000", 
    100 => "0100001010010111011", 101 => "1101001001001000100", 
    102 => "0101010101101110110", 103 => "0010010110010110111", 
    104 => "0001000110100111110", 105 => "0100001010011111010", 
    106 => "0011110011110000010", 107 => "1111011000001111110", 
    108 => "1011100001100001111", 109 => "1100111001110111001", 
    110 => "0010101101110110100", 111 => "1101000010101000100", 
    112 => "1101001101100011111", 113 => "0100010001010000110", 
    114 => "0010000101111100000", 115 => "1100011011010010010", 
    116 => "1111100000110111001", 117 => "0011010011111111001", 
    118 => "1111000000011110111", 119 => "1100110011010011010", 
    120 => "0101110100010011100", 121 => "1100101101100110000", 
    122 => "0010000001011011000", 123 => "0010111011011000100", 
    124 => "0011111101101001111", 125 => "0010010001011001101", 
    126 => "1111101111011110001", 127 => "0100110110110100101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_layer1_conv_dEe is
    generic (
        DataWidth : INTEGER := 19;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_layer1_conv_dEe is
    component conv_layer1_conv_dEe_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_layer1_conv_dEe_rom_U :  component conv_layer1_conv_dEe_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


