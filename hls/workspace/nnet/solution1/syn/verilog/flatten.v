// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module flatten (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        input_V_address0,
        input_V_ce0,
        input_V_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [23:0] output_V_d0;
output  [9:0] input_V_address0;
output   input_V_ce0;
input  [23:0] input_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_V_ce0;
reg output_V_we0;
reg input_V_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_3_fu_110_p2;
reg   [2:0] i_3_reg_268;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp_fu_140_p2;
reg   [10:0] tmp_reg_273;
wire   [0:0] exitcond3_fu_104_p2;
wire   [6:0] tmp_227_fu_170_p2;
reg   [6:0] tmp_227_reg_278;
wire   [2:0] j_1_fu_182_p2;
reg   [2:0] j_1_reg_286;
wire    ap_CS_fsm_state3;
wire   [6:0] tmp_4_fu_188_p3;
reg   [6:0] tmp_4_reg_291;
wire   [0:0] exitcond2_fu_176_p2;
wire   [10:0] tmp_246_cast_fu_205_p3;
reg   [10:0] tmp_246_cast_reg_296;
wire   [4:0] k_1_fu_223_p2;
reg   [4:0] k_1_reg_304;
wire    ap_CS_fsm_state4;
wire   [10:0] tmp_7_fu_238_p2;
reg   [10:0] tmp_7_reg_309;
wire   [0:0] exitcond_fu_217_p2;
reg   [2:0] i_reg_71;
reg   [2:0] j_reg_82;
reg   [4:0] k_reg_93;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_247_cast_fu_252_p1;
wire   [63:0] tmp_8_fu_260_p1;
wire   [9:0] p_shl_fu_116_p3;
wire   [7:0] p_shl5_fu_128_p3;
wire   [10:0] p_shl_cast_fu_124_p1;
wire   [10:0] p_shl5_cast_fu_136_p1;
wire   [5:0] tmp_s_fu_146_p3;
wire   [3:0] tmp_226_fu_158_p3;
wire   [6:0] p_shl1_cast_fu_154_p1;
wire   [6:0] p_shl2_cast_fu_166_p1;
wire   [6:0] tmp_5_cast_fu_196_p1;
wire   [6:0] tmp_228_fu_200_p2;
wire   [6:0] k_cast3_fu_213_p1;
wire   [6:0] tmp1_fu_229_p2;
wire   [10:0] tmp1_cast_fu_234_p1;
wire   [10:0] tmp_9_cast_fu_243_p1;
wire   [10:0] tmp_229_fu_247_p2;
wire  signed [31:0] tmp_7_cast_fu_257_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_71 <= i_3_reg_268;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_71 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_reg_82 <= j_1_reg_286;
    end else if (((exitcond3_fu_104_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_82 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_reg_93 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        k_reg_93 <= k_1_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_3_reg_268 <= i_3_fu_110_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_286 <= j_1_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_1_reg_304 <= k_1_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_104_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_227_reg_278[6 : 1] <= tmp_227_fu_170_p2[6 : 1];
        tmp_reg_273[10 : 5] <= tmp_fu_140_p2[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_246_cast_reg_296[10 : 4] <= tmp_246_cast_fu_205_p3[10 : 4];
        tmp_4_reg_291[6 : 4] <= tmp_4_fu_188_p3[6 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_217_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_7_reg_309 <= tmp_7_fu_238_p2;
    end
end

always @ (*) begin
    if ((((exitcond3_fu_104_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_fu_104_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond3_fu_104_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond2_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign exitcond2_fu_176_p2 = ((j_reg_82 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond3_fu_104_p2 = ((i_reg_71 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond_fu_217_p2 = ((k_reg_93 == 5'd16) ? 1'b1 : 1'b0);

assign i_3_fu_110_p2 = (i_reg_71 + 3'd1);

assign input_V_address0 = tmp_247_cast_fu_252_p1;

assign j_1_fu_182_p2 = (j_reg_82 + 3'd1);

assign k_1_fu_223_p2 = (k_reg_93 + 5'd1);

assign k_cast3_fu_213_p1 = k_reg_93;

assign output_V_address0 = tmp_8_fu_260_p1;

assign output_V_d0 = input_V_q0;

assign p_shl1_cast_fu_154_p1 = tmp_s_fu_146_p3;

assign p_shl2_cast_fu_166_p1 = tmp_226_fu_158_p3;

assign p_shl5_cast_fu_136_p1 = p_shl5_fu_128_p3;

assign p_shl5_fu_128_p3 = {{i_reg_71}, {5'd0}};

assign p_shl_cast_fu_124_p1 = p_shl_fu_116_p3;

assign p_shl_fu_116_p3 = {{i_reg_71}, {7'd0}};

assign tmp1_cast_fu_234_p1 = tmp1_fu_229_p2;

assign tmp1_fu_229_p2 = (k_cast3_fu_213_p1 + tmp_4_reg_291);

assign tmp_226_fu_158_p3 = {{i_reg_71}, {1'd0}};

assign tmp_227_fu_170_p2 = (p_shl1_cast_fu_154_p1 - p_shl2_cast_fu_166_p1);

assign tmp_228_fu_200_p2 = (tmp_5_cast_fu_196_p1 + tmp_227_reg_278);

assign tmp_229_fu_247_p2 = (tmp_246_cast_reg_296 + tmp_9_cast_fu_243_p1);

assign tmp_246_cast_fu_205_p3 = {{tmp_228_fu_200_p2}, {4'd0}};

assign tmp_247_cast_fu_252_p1 = tmp_229_fu_247_p2;

assign tmp_4_fu_188_p3 = {{j_reg_82}, {4'd0}};

assign tmp_5_cast_fu_196_p1 = j_reg_82;

assign tmp_7_cast_fu_257_p1 = $signed(tmp_7_reg_309);

assign tmp_7_fu_238_p2 = (tmp_reg_273 + tmp1_cast_fu_234_p1);

assign tmp_8_fu_260_p1 = $unsigned(tmp_7_cast_fu_257_p1);

assign tmp_9_cast_fu_243_p1 = k_reg_93;

assign tmp_fu_140_p2 = (p_shl_cast_fu_124_p1 - p_shl5_cast_fu_136_p1);

assign tmp_s_fu_146_p3 = {{i_reg_71}, {3'd0}};

always @ (posedge ap_clk) begin
    tmp_reg_273[4:0] <= 5'b00000;
    tmp_227_reg_278[0] <= 1'b0;
    tmp_4_reg_291[3:0] <= 4'b0000;
    tmp_246_cast_reg_296[3:0] <= 4'b0000;
end

endmodule //flatten
