// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_layer2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        image_V_address0,
        image_V_ce0,
        image_V_q0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [23:0] output_V_d0;
output  [10:0] image_V_address0;
output   image_V_ce0;
input  [23:0] image_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_V_ce0;
reg output_V_we0;
reg image_V_ce0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] conv_layer2_bias_V_address0;
reg    conv_layer2_bias_V_ce0;
wire   [19:0] conv_layer2_bias_V_q0;
wire   [8:0] conv_layer2_weights_s_address0;
reg    conv_layer2_weights_s_ce0;
wire   [18:0] conv_layer2_weights_s_q0;
wire   [4:0] filter_1_fu_247_p2;
reg   [4:0] filter_1_reg_578;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond8_fu_241_p2;
wire   [10:0] tmp_cast2_fu_258_p1;
reg   [10:0] tmp_cast2_reg_588;
wire    ap_CS_fsm_state3;
wire   [12:0] tmp_cast_fu_262_p1;
reg   [12:0] tmp_cast_reg_593;
wire  signed [23:0] p_Val2_12_cast_fu_266_p1;
reg  signed [23:0] p_Val2_12_cast_reg_598;
wire  signed [22:0] tmp_2_fu_270_p1;
reg  signed [22:0] tmp_2_reg_603;
wire   [7:0] next_mul_fu_274_p2;
reg   [7:0] next_mul_reg_608;
wire    ap_CS_fsm_state4;
wire   [3:0] i_5_fu_286_p2;
reg   [3:0] i_5_reg_616;
wire   [3:0] j_5_fu_298_p2;
reg   [3:0] j_5_reg_624;
wire    ap_CS_fsm_state5;
wire   [1:0] row_offset_1_fu_314_p2;
reg   [1:0] row_offset_1_reg_632;
wire    ap_CS_fsm_state6;
wire   [8:0] tmp_52_fu_350_p2;
reg   [8:0] tmp_52_reg_637;
wire   [0:0] exitcond2_fu_308_p2;
wire   [3:0] tmp_76_cast_fu_364_p1;
reg   [3:0] tmp_76_cast_reg_642;
wire   [12:0] tmp_49_fu_390_p2;
reg   [12:0] tmp_49_reg_647;
wire   [22:0] a_V_i_fu_415_p3;
reg   [22:0] a_V_i_reg_652;
wire   [1:0] col_offset_1_fu_433_p2;
reg   [1:0] col_offset_1_reg_660;
wire    ap_CS_fsm_state7;
wire   [11:0] tmp_79_cast_fu_454_p3;
reg   [11:0] tmp_79_cast_reg_665;
wire   [0:0] exitcond3_fu_427_p2;
wire   [6:0] tmp_42_fu_467_p3;
reg   [6:0] tmp_42_reg_670;
wire   [3:0] channel_offset_1_fu_481_p2;
reg   [3:0] channel_offset_1_reg_678;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond_fu_475_p2;
reg  signed [23:0] image_V_load_reg_693;
wire    ap_CS_fsm_state9;
reg  signed [18:0] conv_layer2_weights_2_reg_698;
wire  signed [41:0] p_Val2_2_fu_569_p2;
reg  signed [41:0] p_Val2_2_reg_703;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
reg   [4:0] filter_reg_124;
wire   [0:0] exitcond9_fu_280_p2;
reg   [3:0] i_reg_136;
wire   [0:0] exitcond1_fu_292_p2;
reg   [7:0] phi_mul_reg_148;
reg   [3:0] j_reg_160;
wire    ap_CS_fsm_state12;
reg   [23:0] p_Val2_s_reg_172;
reg   [1:0] row_offset_reg_184;
reg   [23:0] sum_1_reg_195;
reg   [1:0] col_offset_reg_207;
reg   [23:0] p_Val2_1_reg_218;
reg   [3:0] channel_offset_reg_230;
wire   [63:0] tmp_fu_253_p1;
wire   [63:0] tmp_83_cast_fu_500_p1;
wire   [63:0] tmp_87_cast_fu_523_p1;
wire   [63:0] tmp_71_cast_fu_561_p1;
wire   [3:0] row_offset_cast5_fu_304_p1;
wire   [3:0] tmp_27_fu_320_p2;
wire   [7:0] tmp_50_fu_326_p3;
wire   [4:0] tmp_51_fu_338_p3;
wire   [8:0] p_shl_cast_fu_334_p1;
wire   [8:0] p_shl1_cast_fu_346_p1;
wire   [2:0] tmp_53_fu_356_p3;
wire   [7:0] tmp_26_cast_fu_368_p1;
wire   [7:0] tmp_s_fu_372_p2;
wire   [11:0] tmp_40_fu_378_p3;
wire   [12:0] tmp_70_cast_fu_386_p1;
wire   [22:0] tmp_41_fu_395_p1;
wire   [23:0] p_Val2_s_34_fu_399_p2;
wire   [0:0] tmp_i_fu_409_p2;
wire   [22:0] p_Val2_cast_fu_404_p2;
wire   [3:0] col_offset_cast3_fu_423_p1;
wire   [3:0] tmp_28_fu_439_p2;
wire   [8:0] tmp_29_cast_fu_445_p1;
wire   [8:0] tmp_54_fu_449_p2;
wire   [3:0] tmp_55_fu_462_p2;
wire   [11:0] tmp_31_cast_fu_491_p1;
wire   [11:0] tmp_56_fu_495_p2;
wire   [6:0] tmp_31_fu_487_p1;
wire   [6:0] tmp_57_fu_505_p2;
wire   [10:0] tmp_86_cast_fu_510_p3;
wire   [10:0] tmp_58_fu_518_p2;
wire   [43:0] tmp_32_fu_534_p3;
wire  signed [43:0] tmp_40_cast_fu_542_p1;
wire   [43:0] p_Val2_3_fu_545_p2;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

conv_layer2_conv_fYi #(
    .DataWidth( 20 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv_layer2_bias_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_layer2_bias_V_address0),
    .ce0(conv_layer2_bias_V_ce0),
    .q0(conv_layer2_bias_V_q0)
);

conv_layer2_conv_g8j #(
    .DataWidth( 19 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
conv_layer2_weights_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_layer2_weights_s_address0),
    .ce0(conv_layer2_weights_s_ce0),
    .q0(conv_layer2_weights_s_q0)
);

nnet_mul_mul_24s_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 42 ))
nnet_mul_mul_24s_hbi_U9(
    .din0(image_V_load_reg_693),
    .din1(conv_layer2_weights_2_reg_698),
    .dout(p_Val2_2_fu_569_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        channel_offset_reg_230 <= channel_offset_1_reg_678;
    end else if (((exitcond3_fu_427_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        channel_offset_reg_230 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond_fu_475_p2 == 1'd1))) begin
        col_offset_reg_207 <= col_offset_1_reg_660;
    end else if (((exitcond2_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        col_offset_reg_207 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond9_fu_280_p2 == 1'd1))) begin
        filter_reg_124 <= filter_1_reg_578;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        filter_reg_124 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_292_p2 == 1'd1))) begin
        i_reg_136 <= i_5_reg_616;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_136 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond9_fu_280_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_reg_160 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        j_reg_160 <= j_5_reg_624;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_Val2_1_reg_218 <= {{p_Val2_3_fu_545_p2[43:20]}};
    end else if (((exitcond3_fu_427_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        p_Val2_1_reg_218 <= sum_1_reg_195;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_292_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        p_Val2_s_reg_172 <= 24'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (exitcond3_fu_427_p2 == 1'd1))) begin
        p_Val2_s_reg_172 <= sum_1_reg_195;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_292_p2 == 1'd1))) begin
        phi_mul_reg_148 <= next_mul_reg_608;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        phi_mul_reg_148 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_292_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        row_offset_reg_184 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (exitcond3_fu_427_p2 == 1'd1))) begin
        row_offset_reg_184 <= row_offset_1_reg_632;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond_fu_475_p2 == 1'd1))) begin
        sum_1_reg_195 <= p_Val2_1_reg_218;
    end else if (((exitcond2_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        sum_1_reg_195 <= p_Val2_s_reg_172;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond2_fu_308_p2 == 1'd1))) begin
        a_V_i_reg_652 <= a_V_i_fu_415_p3;
        tmp_49_reg_647 <= tmp_49_fu_390_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        channel_offset_1_reg_678 <= channel_offset_1_fu_481_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        col_offset_1_reg_660 <= col_offset_1_fu_433_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv_layer2_weights_2_reg_698 <= conv_layer2_weights_s_q0;
        image_V_load_reg_693 <= image_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        filter_1_reg_578 <= filter_1_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_5_reg_616 <= i_5_fu_286_p2;
        next_mul_reg_608 <= next_mul_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_5_reg_624 <= j_5_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_Val2_12_cast_reg_598 <= p_Val2_12_cast_fu_266_p1;
        tmp_2_reg_603 <= tmp_2_fu_270_p1;
        tmp_cast2_reg_588[4 : 0] <= tmp_cast2_fu_258_p1[4 : 0];
        tmp_cast_reg_593[4 : 0] <= tmp_cast_fu_262_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_Val2_2_reg_703 <= p_Val2_2_fu_569_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        row_offset_1_reg_632 <= row_offset_1_fu_314_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_427_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_42_reg_670[6 : 3] <= tmp_42_fu_467_p3[6 : 3];
        tmp_79_cast_reg_665[11 : 3] <= tmp_79_cast_fu_454_p3[11 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_52_reg_637[8 : 1] <= tmp_52_fu_350_p2[8 : 1];
        tmp_76_cast_reg_642[2 : 1] <= tmp_76_cast_fu_364_p1[2 : 1];
    end
end

always @ (*) begin
    if ((((exitcond8_fu_241_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond8_fu_241_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_layer2_bias_V_ce0 = 1'b1;
    end else begin
        conv_layer2_bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_layer2_weights_s_ce0 = 1'b1;
    end else begin
        conv_layer2_weights_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        image_V_ce0 = 1'b1;
    end else begin
        image_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond8_fu_241_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond9_fu_280_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_292_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond2_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond3_fu_427_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond_fu_475_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_V_i_fu_415_p3 = ((tmp_i_fu_409_p2[0:0] === 1'b1) ? p_Val2_cast_fu_404_p2 : 23'd0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign channel_offset_1_fu_481_p2 = (channel_offset_reg_230 + 4'd1);

assign col_offset_1_fu_433_p2 = (col_offset_reg_207 + 2'd1);

assign col_offset_cast3_fu_423_p1 = col_offset_reg_207;

assign conv_layer2_bias_V_address0 = tmp_fu_253_p1;

assign conv_layer2_weights_s_address0 = tmp_87_cast_fu_523_p1;

assign exitcond1_fu_292_p2 = ((j_reg_160 == 4'd13) ? 1'b1 : 1'b0);

assign exitcond2_fu_308_p2 = ((row_offset_reg_184 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond3_fu_427_p2 = ((col_offset_reg_207 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond8_fu_241_p2 = ((filter_reg_124 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond9_fu_280_p2 = ((i_reg_136 == 4'd13) ? 1'b1 : 1'b0);

assign exitcond_fu_475_p2 = ((channel_offset_reg_230 == 4'd8) ? 1'b1 : 1'b0);

assign filter_1_fu_247_p2 = (filter_reg_124 + 5'd1);

assign i_5_fu_286_p2 = (i_reg_136 + 4'd1);

assign image_V_address0 = tmp_83_cast_fu_500_p1;

assign j_5_fu_298_p2 = (j_reg_160 + 4'd1);

assign next_mul_fu_274_p2 = (phi_mul_reg_148 + 8'd13);

assign output_V_address0 = tmp_71_cast_fu_561_p1;

assign output_V_d0 = a_V_i_reg_652;

assign p_Val2_12_cast_fu_266_p1 = $signed(conv_layer2_bias_V_q0);

assign p_Val2_3_fu_545_p2 = ($signed(tmp_32_fu_534_p3) + $signed(tmp_40_cast_fu_542_p1));

assign p_Val2_cast_fu_404_p2 = ($signed(tmp_2_reg_603) + $signed(tmp_41_fu_395_p1));

assign p_Val2_s_34_fu_399_p2 = ($signed(p_Val2_s_reg_172) + $signed(p_Val2_12_cast_reg_598));

assign p_shl1_cast_fu_346_p1 = tmp_51_fu_338_p3;

assign p_shl_cast_fu_334_p1 = tmp_50_fu_326_p3;

assign row_offset_1_fu_314_p2 = (row_offset_reg_184 + 2'd1);

assign row_offset_cast5_fu_304_p1 = row_offset_reg_184;

assign tmp_26_cast_fu_368_p1 = j_reg_160;

assign tmp_27_fu_320_p2 = (row_offset_cast5_fu_304_p1 + i_reg_136);

assign tmp_28_fu_439_p2 = (j_reg_160 + col_offset_cast3_fu_423_p1);

assign tmp_29_cast_fu_445_p1 = tmp_28_fu_439_p2;

assign tmp_2_fu_270_p1 = $signed(conv_layer2_bias_V_q0);

assign tmp_31_cast_fu_491_p1 = channel_offset_reg_230;

assign tmp_31_fu_487_p1 = channel_offset_reg_230;

assign tmp_32_fu_534_p3 = {{p_Val2_1_reg_218}, {20'd0}};

assign tmp_40_cast_fu_542_p1 = p_Val2_2_reg_703;

assign tmp_40_fu_378_p3 = {{tmp_s_fu_372_p2}, {4'd0}};

assign tmp_41_fu_395_p1 = p_Val2_s_reg_172[22:0];

assign tmp_42_fu_467_p3 = {{tmp_55_fu_462_p2}, {3'd0}};

assign tmp_49_fu_390_p2 = (tmp_cast_reg_593 + tmp_70_cast_fu_386_p1);

assign tmp_50_fu_326_p3 = {{tmp_27_fu_320_p2}, {4'd0}};

assign tmp_51_fu_338_p3 = {{tmp_27_fu_320_p2}, {1'd0}};

assign tmp_52_fu_350_p2 = (p_shl_cast_fu_334_p1 - p_shl1_cast_fu_346_p1);

assign tmp_53_fu_356_p3 = {{row_offset_reg_184}, {1'd0}};

assign tmp_54_fu_449_p2 = (tmp_29_cast_fu_445_p1 + tmp_52_reg_637);

assign tmp_55_fu_462_p2 = (col_offset_cast3_fu_423_p1 + tmp_76_cast_reg_642);

assign tmp_56_fu_495_p2 = (tmp_31_cast_fu_491_p1 + tmp_79_cast_reg_665);

assign tmp_57_fu_505_p2 = (tmp_31_fu_487_p1 + tmp_42_reg_670);

assign tmp_58_fu_518_p2 = (tmp_cast2_reg_588 + tmp_86_cast_fu_510_p3);

assign tmp_70_cast_fu_386_p1 = tmp_40_fu_378_p3;

assign tmp_71_cast_fu_561_p1 = tmp_49_reg_647;

assign tmp_76_cast_fu_364_p1 = tmp_53_fu_356_p3;

assign tmp_79_cast_fu_454_p3 = {{tmp_54_fu_449_p2}, {3'd0}};

assign tmp_83_cast_fu_500_p1 = tmp_56_fu_495_p2;

assign tmp_86_cast_fu_510_p3 = {{tmp_57_fu_505_p2}, {4'd0}};

assign tmp_87_cast_fu_523_p1 = tmp_58_fu_518_p2;

assign tmp_cast2_fu_258_p1 = filter_reg_124;

assign tmp_cast_fu_262_p1 = filter_reg_124;

assign tmp_fu_253_p1 = filter_reg_124;

assign tmp_i_fu_409_p2 = (($signed(p_Val2_s_34_fu_399_p2) > $signed(24'd0)) ? 1'b1 : 1'b0);

assign tmp_s_fu_372_p2 = (tmp_26_cast_fu_368_p1 + phi_mul_reg_148);

always @ (posedge ap_clk) begin
    tmp_cast2_reg_588[10:5] <= 6'b000000;
    tmp_cast_reg_593[12:5] <= 8'b00000000;
    tmp_52_reg_637[0] <= 1'b0;
    tmp_76_cast_reg_642[0] <= 1'b0;
    tmp_76_cast_reg_642[3] <= 1'b0;
    tmp_79_cast_reg_665[2:0] <= 3'b000;
    tmp_42_reg_670[2:0] <= 3'b000;
end

endmodule //conv_layer2
