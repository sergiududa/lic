-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_layer1_imagecud_rom is 
    generic(
             dwidth     : integer := 20; 
             awidth     : integer := 10; 
             mem_size    : integer := 1024
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_layer1_imagecud_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 to 300=> "00000000000000000000", 301 => "01100001011000010101", 
    302 => "01100000011000000110", 303 => "01001101010011010101", 
    304 => "01110110011101100111", 305 => "00111101001111010100", 
    306 to 324=> "00000000000000000000", 325 => "01011010010110100101", 
    326 => "10001010100010101000", 327 to 332=> "11101011111010111111", 
    333 to 334=> "11111011111111000000", 335 => "11111000111110001111", 
    336 => "11111110111111101111", 337 => "11110101111101011111", 
    338 => "11101011111010111111", 339 => "10111110101111101011", 
    340 => "00010101000101010001", 341 to 355=> "00000000000000000000", 
    356 => "10001100100011001001", 357 => "11111011111111000000", 
    358 to 371=> "11111110111111101111", 372 => "10111101101111011011", 
    373 => "00010111000101110001", 374 to 387=> "00000000000000000000", 
    388 => "11100010111000101110", 389 => "11111110111111101111", 
    390 => "11010000110100001100", 391 to 394=> "11000111110001111100", 
    395 => "10001011100010111000", 396 to 400=> "00111101001111010100", 
    401 => "10000000100000001000", 402 => "11011110110111101101", 
    403 to 404=> "11111110111111101111", 405 => "10111101101111011011", 
    406 => "00010101000101010001", 407 to 419=> "00000000000000000000", 
    420 => "00100110001001100010", 421 => "01010010010100100101", 
    422 => "00001101000011010000", 423 to 433=> "00000000000000000000", 
    434 => "00100010001000100001", 435 => "11010101110101011101", 
    436 to 437=> "11111110111111101111", 438 => "01110011011100110110", 
    439 to 466=> "00000000000000000000", 467 => "01010100010101000101", 
    468 to 469=> "11111110111111101111", 470 => "11101010111010101110", 
    471 to 498=> "00000000000000000000", 499 => "01010100010101000101", 
    500 to 501=> "11111110111111101111", 502 => "11101010111010101110", 
    503 to 529=> "00000000000000000000", 530 => "01101010011010100110", 
    531 => "10011101100111011001", 532 to 533=> "11111110111111101111", 
    534 => "11110011111100111111", 535 => "00110011001100110011", 
    536 to 556=> "00000000000000000000", 557 => "00011001000110010001", 
    558 => "01110101011101010111", 559 to 561=> "11100100111001001110", 
    562 => "11111101111111100000", 563 to 566=> "11111110111111101111", 
    567 => "11110000111100001111", 568 to 586=> "00000000000000000000", 
    587 => "01000100010001000100", 588 => "01110111011101110111", 
    589 => "11011100110111001101", 590 to 598=> "11111110111111101111", 
    599 => "10001110100011101001", 600 to 616=> "00000000000000000000", 
    617 => "00100101001001010010", 618 => "10111011101110111011", 
    619 => "11111101111111100000", 620 to 622=> "11111110111111101111", 
    623 => "11011111110111111110", 624 to 625=> "11001110110011101100", 
    626 => "01001011010010110101", 627 => "01000100010001000100", 
    628 => "11010111110101111101", 629 to 630=> "11111110111111101111", 
    631 => "01110101011101010111", 632 to 647=> "00000000000000000000", 
    648 => "01110001011100010110", 649 => "11011011110110111110", 
    650 => "11111110111111101111", 651 => "11110010111100101111", 
    652 => "11100011111000111110", 653 => "01110011011100110110", 
    654 => "01011001010110010101", 655 => "00011111000111110010", 
    656 to 659=> "00000000000000000000", 660 => "11001000110010001100", 
    661 => "11111110111111101111", 662 => "11110001111100011111", 
    663 => "00101001001010010010", 664 to 679=> "00000000000000000000", 
    680 => "10101001101010011010", 681 => "11111110111111101111", 
    682 => "10110000101100001010", 683 => "00111110001111100011", 
    684 to 690=> "00000000000000000000", 691 => "00110000001100000010", 
    692 => "11100111111001111110", 693 => "11111110111111101111", 
    694 => "11101010111010101110", 695 to 711=> "00000000000000000000", 
    712 => "00010010000100100000", 713 => "01111100011111001000", 
    714 to 722=> "00000000000000000000", 723 => "01010100010101000101", 
    724 to 725=> "11111110111111101111", 726 => "10100110101001101010", 
    727 to 754=> "00000000000000000000", 755 => "10001011100010111000", 
    756 => "11111110111111101111", 757 => "11101110111011101110", 
    758 => "00111001001110010011", 759 to 785=> "00000000000000000000", 
    786 => "11010010110100101100", 787 => "11111010111110101111", 
    788 => "11111110111111101111", 789 => "10101000101010001011", 
    790 to 817=> "00000000000000000000", 818 => "11110010111100101111", 
    819 => "11111110111111101111", 820 => "11101111111011111111", 
    821 => "00111001001110010011", 822 to 848=> "00000000000000000000", 
    849 => "01011001010110010101", 850 => "11111011111111000000", 
    851 => "11110001111100011111", 852 => "01010110010101100101", 
    853 to 879=> "00000000000000000000", 880 => "00000101000001010000", 
    881 => "11001110110011101100", 882 => "11110110111101101111", 
    883 => "10011101100111011001", 884 to 911=> "00000000000000000000", 
    912 => "00000100000000111111", 913 => "01110101011101010111", 
    914 => "01000101010001010100", 915 to 1023=> "00000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_layer1_imagecud is
    generic (
        DataWidth : INTEGER := 20;
        AddressRange : INTEGER := 1024;
        AddressWidth : INTEGER := 10);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_layer1_imagecud is
    component conv_layer1_imagecud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_layer1_imagecud_rom_U :  component conv_layer1_imagecud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


