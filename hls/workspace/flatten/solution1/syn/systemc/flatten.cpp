// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "flatten.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic flatten::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic flatten::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> flatten::ap_ST_fsm_state1 = "1";
const sc_lv<5> flatten::ap_ST_fsm_state2 = "10";
const sc_lv<5> flatten::ap_ST_fsm_state3 = "100";
const sc_lv<5> flatten::ap_ST_fsm_state4 = "1000";
const sc_lv<5> flatten::ap_ST_fsm_state5 = "10000";
const sc_lv<32> flatten::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> flatten::ap_const_lv32_1 = "1";
const sc_lv<1> flatten::ap_const_lv1_0 = "0";
const sc_lv<32> flatten::ap_const_lv32_2 = "10";
const sc_lv<32> flatten::ap_const_lv32_3 = "11";
const sc_lv<3> flatten::ap_const_lv3_0 = "000";
const sc_lv<1> flatten::ap_const_lv1_1 = "1";
const sc_lv<32> flatten::ap_const_lv32_4 = "100";
const sc_lv<5> flatten::ap_const_lv5_0 = "00000";
const sc_lv<3> flatten::ap_const_lv3_6 = "110";
const sc_lv<3> flatten::ap_const_lv3_1 = "1";
const sc_lv<7> flatten::ap_const_lv7_0 = "0000000";
const sc_lv<4> flatten::ap_const_lv4_0 = "0000";
const sc_lv<5> flatten::ap_const_lv5_10 = "10000";
const sc_lv<5> flatten::ap_const_lv5_1 = "1";
const bool flatten::ap_const_boolean_1 = true;

flatten::flatten(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_106_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_106_p2 );

    SC_METHOD(thread_exitcond1_fu_178_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_reg_84 );

    SC_METHOD(thread_exitcond2_fu_106_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_73 );

    SC_METHOD(thread_exitcond_fu_219_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( k_reg_95 );

    SC_METHOD(thread_i_1_fu_112_p2);
    sensitive << ( i_reg_73 );

    SC_METHOD(thread_input_r_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_12_cast_fu_240_p1 );

    SC_METHOD(thread_input_r_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_j_1_fu_184_p2);
    sensitive << ( j_reg_84 );

    SC_METHOD(thread_k_1_fu_225_p2);
    sensitive << ( k_reg_95 );

    SC_METHOD(thread_k_cast3_fu_215_p1);
    sensitive << ( k_reg_95 );

    SC_METHOD(thread_output_r_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_9_fu_262_p1 );

    SC_METHOD(thread_output_r_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_output_r_d0);
    sensitive << ( input_r_q0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_output_r_we0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_p_shl1_cast_fu_126_p1);
    sensitive << ( tmp_fu_118_p3 );

    SC_METHOD(thread_p_shl2_cast_fu_138_p1);
    sensitive << ( tmp_2_fu_130_p3 );

    SC_METHOD(thread_p_shl5_cast_fu_168_p1);
    sensitive << ( p_shl5_fu_160_p3 );

    SC_METHOD(thread_p_shl5_fu_160_p3);
    sensitive << ( i_reg_73 );

    SC_METHOD(thread_p_shl_cast_fu_156_p1);
    sensitive << ( p_shl_fu_148_p3 );

    SC_METHOD(thread_p_shl_fu_148_p3);
    sensitive << ( i_reg_73 );

    SC_METHOD(thread_tmp1_cast_fu_250_p1);
    sensitive << ( tmp1_fu_245_p2 );

    SC_METHOD(thread_tmp1_fu_245_p2);
    sensitive << ( tmp_4_reg_298 );
    sensitive << ( k_cast3_fu_215_p1 );

    SC_METHOD(thread_tmp_11_cast_fu_199_p3);
    sensitive << ( tmp_7_fu_194_p2 );

    SC_METHOD(thread_tmp_12_cast_fu_240_p1);
    sensitive << ( tmp_s_fu_235_p2 );

    SC_METHOD(thread_tmp_1_fu_172_p2);
    sensitive << ( p_shl_cast_fu_156_p1 );
    sensitive << ( p_shl5_cast_fu_168_p1 );

    SC_METHOD(thread_tmp_2_fu_130_p3);
    sensitive << ( i_reg_73 );

    SC_METHOD(thread_tmp_3_cast_fu_190_p1);
    sensitive << ( j_reg_84 );

    SC_METHOD(thread_tmp_4_fu_207_p3);
    sensitive << ( j_reg_84 );

    SC_METHOD(thread_tmp_5_fu_142_p2);
    sensitive << ( p_shl1_cast_fu_126_p1 );
    sensitive << ( p_shl2_cast_fu_138_p1 );

    SC_METHOD(thread_tmp_6_cast_fu_231_p1);
    sensitive << ( k_reg_95 );

    SC_METHOD(thread_tmp_7_fu_194_p2);
    sensitive << ( tmp_5_reg_275 );
    sensitive << ( tmp_3_cast_fu_190_p1 );

    SC_METHOD(thread_tmp_8_cast_fu_259_p1);
    sensitive << ( tmp_8_reg_316 );

    SC_METHOD(thread_tmp_8_fu_254_p2);
    sensitive << ( tmp_1_reg_280 );
    sensitive << ( tmp1_cast_fu_250_p1 );

    SC_METHOD(thread_tmp_9_fu_262_p1);
    sensitive << ( tmp_8_cast_fu_259_p1 );

    SC_METHOD(thread_tmp_fu_118_p3);
    sensitive << ( i_reg_73 );

    SC_METHOD(thread_tmp_s_fu_235_p2);
    sensitive << ( tmp_11_cast_reg_293 );
    sensitive << ( tmp_6_cast_fu_231_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_106_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond1_fu_178_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_219_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "flatten_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, output_r_address0, "(port)output_r_address0");
    sc_trace(mVcdFile, output_r_ce0, "(port)output_r_ce0");
    sc_trace(mVcdFile, output_r_we0, "(port)output_r_we0");
    sc_trace(mVcdFile, output_r_d0, "(port)output_r_d0");
    sc_trace(mVcdFile, input_r_address0, "(port)input_r_address0");
    sc_trace(mVcdFile, input_r_ce0, "(port)input_r_ce0");
    sc_trace(mVcdFile, input_r_q0, "(port)input_r_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_1_fu_112_p2, "i_1_fu_112_p2");
    sc_trace(mVcdFile, i_1_reg_270, "i_1_reg_270");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_5_fu_142_p2, "tmp_5_fu_142_p2");
    sc_trace(mVcdFile, tmp_5_reg_275, "tmp_5_reg_275");
    sc_trace(mVcdFile, exitcond2_fu_106_p2, "exitcond2_fu_106_p2");
    sc_trace(mVcdFile, tmp_1_fu_172_p2, "tmp_1_fu_172_p2");
    sc_trace(mVcdFile, tmp_1_reg_280, "tmp_1_reg_280");
    sc_trace(mVcdFile, j_1_fu_184_p2, "j_1_fu_184_p2");
    sc_trace(mVcdFile, j_1_reg_288, "j_1_reg_288");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_11_cast_fu_199_p3, "tmp_11_cast_fu_199_p3");
    sc_trace(mVcdFile, tmp_11_cast_reg_293, "tmp_11_cast_reg_293");
    sc_trace(mVcdFile, exitcond1_fu_178_p2, "exitcond1_fu_178_p2");
    sc_trace(mVcdFile, tmp_4_fu_207_p3, "tmp_4_fu_207_p3");
    sc_trace(mVcdFile, tmp_4_reg_298, "tmp_4_reg_298");
    sc_trace(mVcdFile, k_1_fu_225_p2, "k_1_fu_225_p2");
    sc_trace(mVcdFile, k_1_reg_306, "k_1_reg_306");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, exitcond_fu_219_p2, "exitcond_fu_219_p2");
    sc_trace(mVcdFile, tmp_8_fu_254_p2, "tmp_8_fu_254_p2");
    sc_trace(mVcdFile, tmp_8_reg_316, "tmp_8_reg_316");
    sc_trace(mVcdFile, i_reg_73, "i_reg_73");
    sc_trace(mVcdFile, j_reg_84, "j_reg_84");
    sc_trace(mVcdFile, k_reg_95, "k_reg_95");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_12_cast_fu_240_p1, "tmp_12_cast_fu_240_p1");
    sc_trace(mVcdFile, tmp_9_fu_262_p1, "tmp_9_fu_262_p1");
    sc_trace(mVcdFile, tmp_fu_118_p3, "tmp_fu_118_p3");
    sc_trace(mVcdFile, tmp_2_fu_130_p3, "tmp_2_fu_130_p3");
    sc_trace(mVcdFile, p_shl1_cast_fu_126_p1, "p_shl1_cast_fu_126_p1");
    sc_trace(mVcdFile, p_shl2_cast_fu_138_p1, "p_shl2_cast_fu_138_p1");
    sc_trace(mVcdFile, p_shl_fu_148_p3, "p_shl_fu_148_p3");
    sc_trace(mVcdFile, p_shl5_fu_160_p3, "p_shl5_fu_160_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_156_p1, "p_shl_cast_fu_156_p1");
    sc_trace(mVcdFile, p_shl5_cast_fu_168_p1, "p_shl5_cast_fu_168_p1");
    sc_trace(mVcdFile, tmp_3_cast_fu_190_p1, "tmp_3_cast_fu_190_p1");
    sc_trace(mVcdFile, tmp_7_fu_194_p2, "tmp_7_fu_194_p2");
    sc_trace(mVcdFile, tmp_6_cast_fu_231_p1, "tmp_6_cast_fu_231_p1");
    sc_trace(mVcdFile, tmp_s_fu_235_p2, "tmp_s_fu_235_p2");
    sc_trace(mVcdFile, k_cast3_fu_215_p1, "k_cast3_fu_215_p1");
    sc_trace(mVcdFile, tmp1_fu_245_p2, "tmp1_fu_245_p2");
    sc_trace(mVcdFile, tmp1_cast_fu_250_p1, "tmp1_cast_fu_250_p1");
    sc_trace(mVcdFile, tmp_8_cast_fu_259_p1, "tmp_8_cast_fu_259_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("flatten.hdltvin.dat");
    mHdltvoutHandle.open("flatten.hdltvout.dat");
}

flatten::~flatten() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void flatten::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_178_p2.read(), ap_const_lv1_1))) {
        i_reg_73 = i_1_reg_270.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_73 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_219_p2.read(), ap_const_lv1_1))) {
        j_reg_84 = j_1_reg_288.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond2_fu_106_p2.read(), ap_const_lv1_0))) {
        j_reg_84 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_178_p2.read()))) {
        k_reg_95 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        k_reg_95 = k_1_reg_306.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_270 = i_1_fu_112_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_1_reg_288 = j_1_fu_184_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        k_1_reg_306 = k_1_fu_225_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_178_p2.read()))) {
        tmp_11_cast_reg_293 = tmp_11_cast_fu_199_p3.read();
        tmp_4_reg_298 = tmp_4_fu_207_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond2_fu_106_p2.read(), ap_const_lv1_0))) {
        tmp_1_reg_280 = tmp_1_fu_172_p2.read();
        tmp_5_reg_275 = tmp_5_fu_142_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_219_p2.read()))) {
        tmp_8_reg_316 = tmp_8_fu_254_p2.read();
    }
}

void flatten::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void flatten::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void flatten::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void flatten::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void flatten::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void flatten::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_106_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void flatten::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void flatten::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_106_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void flatten::thread_exitcond1_fu_178_p2() {
    exitcond1_fu_178_p2 = (!j_reg_84.read().is_01() || !ap_const_lv3_6.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_84.read() == ap_const_lv3_6);
}

void flatten::thread_exitcond2_fu_106_p2() {
    exitcond2_fu_106_p2 = (!i_reg_73.read().is_01() || !ap_const_lv3_6.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_73.read() == ap_const_lv3_6);
}

void flatten::thread_exitcond_fu_219_p2() {
    exitcond_fu_219_p2 = (!k_reg_95.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(k_reg_95.read() == ap_const_lv5_10);
}

void flatten::thread_i_1_fu_112_p2() {
    i_1_fu_112_p2 = (!i_reg_73.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_reg_73.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void flatten::thread_input_r_address0() {
    input_r_address0 =  (sc_lv<10>) (tmp_12_cast_fu_240_p1.read());
}

void flatten::thread_input_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        input_r_ce0 = ap_const_logic_1;
    } else {
        input_r_ce0 = ap_const_logic_0;
    }
}

void flatten::thread_j_1_fu_184_p2() {
    j_1_fu_184_p2 = (!j_reg_84.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_reg_84.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void flatten::thread_k_1_fu_225_p2() {
    k_1_fu_225_p2 = (!k_reg_95.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(k_reg_95.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void flatten::thread_k_cast3_fu_215_p1() {
    k_cast3_fu_215_p1 = esl_zext<7,5>(k_reg_95.read());
}

void flatten::thread_output_r_address0() {
    output_r_address0 =  (sc_lv<10>) (tmp_9_fu_262_p1.read());
}

void flatten::thread_output_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        output_r_ce0 = ap_const_logic_1;
    } else {
        output_r_ce0 = ap_const_logic_0;
    }
}

void flatten::thread_output_r_d0() {
    output_r_d0 = input_r_q0.read();
}

void flatten::thread_output_r_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        output_r_we0 = ap_const_logic_1;
    } else {
        output_r_we0 = ap_const_logic_0;
    }
}

void flatten::thread_p_shl1_cast_fu_126_p1() {
    p_shl1_cast_fu_126_p1 = esl_zext<7,6>(tmp_fu_118_p3.read());
}

void flatten::thread_p_shl2_cast_fu_138_p1() {
    p_shl2_cast_fu_138_p1 = esl_zext<7,4>(tmp_2_fu_130_p3.read());
}

void flatten::thread_p_shl5_cast_fu_168_p1() {
    p_shl5_cast_fu_168_p1 = esl_zext<11,8>(p_shl5_fu_160_p3.read());
}

void flatten::thread_p_shl5_fu_160_p3() {
    p_shl5_fu_160_p3 = esl_concat<3,5>(i_reg_73.read(), ap_const_lv5_0);
}

void flatten::thread_p_shl_cast_fu_156_p1() {
    p_shl_cast_fu_156_p1 = esl_zext<11,10>(p_shl_fu_148_p3.read());
}

void flatten::thread_p_shl_fu_148_p3() {
    p_shl_fu_148_p3 = esl_concat<3,7>(i_reg_73.read(), ap_const_lv7_0);
}

void flatten::thread_tmp1_cast_fu_250_p1() {
    tmp1_cast_fu_250_p1 = esl_zext<11,7>(tmp1_fu_245_p2.read());
}

void flatten::thread_tmp1_fu_245_p2() {
    tmp1_fu_245_p2 = (!k_cast3_fu_215_p1.read().is_01() || !tmp_4_reg_298.read().is_01())? sc_lv<7>(): (sc_biguint<7>(k_cast3_fu_215_p1.read()) + sc_biguint<7>(tmp_4_reg_298.read()));
}

void flatten::thread_tmp_11_cast_fu_199_p3() {
    tmp_11_cast_fu_199_p3 = esl_concat<7,4>(tmp_7_fu_194_p2.read(), ap_const_lv4_0);
}

void flatten::thread_tmp_12_cast_fu_240_p1() {
    tmp_12_cast_fu_240_p1 = esl_zext<64,11>(tmp_s_fu_235_p2.read());
}

void flatten::thread_tmp_1_fu_172_p2() {
    tmp_1_fu_172_p2 = (!p_shl_cast_fu_156_p1.read().is_01() || !p_shl5_cast_fu_168_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(p_shl_cast_fu_156_p1.read()) - sc_biguint<11>(p_shl5_cast_fu_168_p1.read()));
}

void flatten::thread_tmp_2_fu_130_p3() {
    tmp_2_fu_130_p3 = esl_concat<3,1>(i_reg_73.read(), ap_const_lv1_0);
}

void flatten::thread_tmp_3_cast_fu_190_p1() {
    tmp_3_cast_fu_190_p1 = esl_zext<7,3>(j_reg_84.read());
}

void flatten::thread_tmp_4_fu_207_p3() {
    tmp_4_fu_207_p3 = esl_concat<3,4>(j_reg_84.read(), ap_const_lv4_0);
}

void flatten::thread_tmp_5_fu_142_p2() {
    tmp_5_fu_142_p2 = (!p_shl1_cast_fu_126_p1.read().is_01() || !p_shl2_cast_fu_138_p1.read().is_01())? sc_lv<7>(): (sc_biguint<7>(p_shl1_cast_fu_126_p1.read()) - sc_biguint<7>(p_shl2_cast_fu_138_p1.read()));
}

void flatten::thread_tmp_6_cast_fu_231_p1() {
    tmp_6_cast_fu_231_p1 = esl_zext<11,5>(k_reg_95.read());
}

void flatten::thread_tmp_7_fu_194_p2() {
    tmp_7_fu_194_p2 = (!tmp_3_cast_fu_190_p1.read().is_01() || !tmp_5_reg_275.read().is_01())? sc_lv<7>(): (sc_biguint<7>(tmp_3_cast_fu_190_p1.read()) + sc_biguint<7>(tmp_5_reg_275.read()));
}

void flatten::thread_tmp_8_cast_fu_259_p1() {
    tmp_8_cast_fu_259_p1 = esl_sext<32,11>(tmp_8_reg_316.read());
}

void flatten::thread_tmp_8_fu_254_p2() {
    tmp_8_fu_254_p2 = (!tmp_1_reg_280.read().is_01() || !tmp1_cast_fu_250_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_1_reg_280.read()) + sc_biguint<11>(tmp1_cast_fu_250_p1.read()));
}

void flatten::thread_tmp_9_fu_262_p1() {
    tmp_9_fu_262_p1 = esl_zext<64,32>(tmp_8_cast_fu_259_p1.read());
}

void flatten::thread_tmp_fu_118_p3() {
    tmp_fu_118_p3 = esl_concat<3,3>(i_reg_73.read(), ap_const_lv3_0);
}

void flatten::thread_tmp_s_fu_235_p2() {
    tmp_s_fu_235_p2 = (!tmp_11_cast_reg_293.read().is_01() || !tmp_6_cast_fu_231_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_11_cast_reg_293.read()) + sc_biguint<11>(tmp_6_cast_fu_231_p1.read()));
}

void flatten::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond2_fu_106_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond1_fu_178_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(exitcond_fu_219_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

void flatten::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_address0\" :  \"" << output_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_ce0\" :  \"" << output_r_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_we0\" :  \"" << output_r_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_d0\" :  \"" << output_r_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_r_address0\" :  \"" << input_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_r_ce0\" :  \"" << input_r_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_r_q0\" :  \"" << input_r_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

